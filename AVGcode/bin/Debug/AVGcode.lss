
bin\Debug\AVGcode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00002aa2  00002b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aa2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800220  00800220  00002b76  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00002b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00002b79  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b8c  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000001f8  00000000  00000000  00002bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001c71  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00001309  00000000  00000000  00004a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00002078  00000000  00000000  00005d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000007d0  00000000  00000000  00007dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000954  00000000  00000000  0000858c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001c3  00000000  00000000  00008ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 03 04 	jmp	0x806	; 0x806 <__vector_17>
      48:	0c 94 33 04 	jmp	0x866	; 0x866 <__vector_18>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_20>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__vector_32>
      84:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__vector_33>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__vector_35>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e2 ea       	ldi	r30, 0xA2	; 162

000000fc <.Loc.4>:
      fc:	fa e2       	ldi	r31, 0x2A	; 42

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	a0 32       	cpi	r26, 0x20	; 32

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	a0 e2       	ldi	r26, 0x20	; 32

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	ac 32       	cpi	r26, 0x2C	; 44

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 ba 06 	call	0xd74	; 0xd74 <main>
     122:	0c 94 4f 15 	jmp	0x2a9e	; 0x2a9e <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <I2C_Init>:

volatile int Gyro_count = 0;
volatile float DS_1 = 0;
volatile float DS_2 = 0;

void I2C_Init() {
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62

00000132 <.Loc.1>:
    // Set SCL frequency to 100kHz
    TWBR = 72;
     132:	88 eb       	ldi	r24, 0xB8	; 184
     134:	90 e0       	ldi	r25, 0x00	; 0

00000136 <.Loc.2>:
     136:	28 e4       	ldi	r18, 0x48	; 72
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18

0000013c <.Loc.3>:
}
     13c:	00 00       	nop
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <I2C_Start>:

void I2C_Start() {
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62

0000014c <.Loc.5>:
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     14c:	8c eb       	ldi	r24, 0xBC	; 188
     14e:	90 e0       	ldi	r25, 0x00	; 0

00000150 <.Loc.6>:
     150:	24 ea       	ldi	r18, 0xA4	; 164
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18

00000156 <.Loc.7>:
	...

00000158 <.L3>:
    while (!(TWCR & (1 << TWINT)));
     158:	8c eb       	ldi	r24, 0xBC	; 188
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	80 81       	ld	r24, Z

00000160 <.Loc.9>:
     160:	88 23       	and	r24, r24
     162:	d4 f7       	brge	.-12     	; 0x158 <.L3>

00000164 <.Loc.10>:
}
     164:	00 00       	nop
     166:	00 00       	nop
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <I2C_Stop>:

void I2C_Stop() {
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62

00000176 <.Loc.12>:
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     176:	8c eb       	ldi	r24, 0xBC	; 188
     178:	90 e0       	ldi	r25, 0x00	; 0

0000017a <.Loc.13>:
     17a:	24 e9       	ldi	r18, 0x94	; 148
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18

00000180 <.Loc.14>:
}
     180:	00 00       	nop
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <I2C_Write>:

void I2C_Write(uint8_t data) {
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	0f 92       	push	r0
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	89 83       	std	Y+1, r24	; 0x01

00000194 <.Loc.16>:
    TWDR = data;
     194:	8b eb       	ldi	r24, 0xBB	; 187
     196:	90 e0       	ldi	r25, 0x00	; 0

00000198 <.Loc.17>:
     198:	29 81       	ldd	r18, Y+1	; 0x01
     19a:	fc 01       	movw	r30, r24
     19c:	20 83       	st	Z, r18

0000019e <.Loc.18>:
    TWCR = (1 << TWINT) | (1 << TWEN);
     19e:	8c eb       	ldi	r24, 0xBC	; 188
     1a0:	90 e0       	ldi	r25, 0x00	; 0

000001a2 <.Loc.19>:
     1a2:	24 e8       	ldi	r18, 0x84	; 132
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 83       	st	Z, r18

000001a8 <.Loc.20>:
	...

000001aa <.L6>:
    while (!(TWCR & (1 << TWINT)));
     1aa:	8c eb       	ldi	r24, 0xBC	; 188
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	80 81       	ld	r24, Z

000001b2 <.Loc.22>:
     1b2:	88 23       	and	r24, r24
     1b4:	d4 f7       	brge	.-12     	; 0x1aa <.L6>

000001b6 <.Loc.23>:
}
     1b6:	00 00       	nop
     1b8:	00 00       	nop
     1ba:	0f 90       	pop	r0
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <I2C_ReadACK>:

uint8_t I2C_ReadACK() {
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62

000001ca <.Loc.25>:
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     1ca:	8c eb       	ldi	r24, 0xBC	; 188
     1cc:	90 e0       	ldi	r25, 0x00	; 0

000001ce <.Loc.26>:
     1ce:	24 ec       	ldi	r18, 0xC4	; 196
     1d0:	fc 01       	movw	r30, r24
     1d2:	20 83       	st	Z, r18

000001d4 <.Loc.27>:
	...

000001d6 <.L8>:
    while (!(TWCR & (1 << TWINT)));
     1d6:	8c eb       	ldi	r24, 0xBC	; 188
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	fc 01       	movw	r30, r24
     1dc:	80 81       	ld	r24, Z

000001de <.Loc.29>:
     1de:	88 23       	and	r24, r24
     1e0:	d4 f7       	brge	.-12     	; 0x1d6 <.L8>

000001e2 <.Loc.30>:
    return TWDR;
     1e2:	8b eb       	ldi	r24, 0xBB	; 187
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z

000001ea <.Loc.31>:
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <I2C_ReadNACK>:

uint8_t I2C_ReadNACK() {
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62

000001f8 <.Loc.33>:
    TWCR = (1 << TWINT) | (1 << TWEN);
     1f8:	8c eb       	ldi	r24, 0xBC	; 188
     1fa:	90 e0       	ldi	r25, 0x00	; 0

000001fc <.Loc.34>:
     1fc:	24 e8       	ldi	r18, 0x84	; 132
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18

00000202 <.Loc.35>:
	...

00000204 <.L11>:
    while (!(TWCR & (1 << TWINT)));
     204:	8c eb       	ldi	r24, 0xBC	; 188
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	fc 01       	movw	r30, r24
     20a:	80 81       	ld	r24, Z

0000020c <.Loc.37>:
     20c:	88 23       	and	r24, r24
     20e:	d4 f7       	brge	.-12     	; 0x204 <.L11>

00000210 <.Loc.38>:
    return TWDR;
     210:	8b eb       	ldi	r24, 0xBB	; 187
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	fc 01       	movw	r30, r24
     216:	80 81       	ld	r24, Z

00000218 <.Loc.39>:
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <MPU6050_WriteReg>:

void MPU6050_WriteReg(uint8_t reg, uint8_t data) {
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	0f 92       	push	r0
     224:	0f 92       	push	r0
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	89 83       	std	Y+1, r24	; 0x01
     22c:	6a 83       	std	Y+2, r22	; 0x02

0000022e <.Loc.41>:
    I2C_Start();
     22e:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>

00000232 <.Loc.42>:
    I2C_Write(MPU6050_ADDR << 1);
     232:	80 ed       	ldi	r24, 0xD0	; 208
     234:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

00000238 <.Loc.43>:
    I2C_Write(reg);
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

0000023e <.Loc.44>:
    I2C_Write(data);
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

00000244 <.Loc.45>:
    I2C_Stop();
     244:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Stop>

00000248 <.Loc.46>:
}
     248:	00 00       	nop
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <MPU6050_ReadGyro>:

int16_t MPU6050_ReadGyro(uint8_t reg) {
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	00 d0       	rcall	.+0      	; 0x25e <L0^A>

0000025e <L0^A>:
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	8b 83       	std	Y+3, r24	; 0x03

00000264 <.Loc.48>:
    int16_t value;
    I2C_Start();
     264:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>

00000268 <.Loc.49>:
    I2C_Write(MPU6050_ADDR << 1);
     268:	80 ed       	ldi	r24, 0xD0	; 208
     26a:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

0000026e <.Loc.50>:
    I2C_Write(reg);
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

00000274 <.Loc.51>:
    I2C_Start();
     274:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>

00000278 <.Loc.52>:
    I2C_Write((MPU6050_ADDR << 1) | 0x01);
     278:	81 ed       	ldi	r24, 0xD1	; 209
     27a:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

0000027e <.Loc.53>:
    value = (I2C_ReadACK() << 8) | I2C_ReadNACK();
     27e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadACK>
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0

00000286 <.Loc.54>:
     286:	18 2f       	mov	r17, r24
     288:	00 27       	eor	r16, r16

0000028a <.Loc.55>:
     28a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_ReadNACK>
     28e:	88 2f       	mov	r24, r24
     290:	90 e0       	ldi	r25, 0x00	; 0

00000292 <.Loc.56>:
     292:	80 2b       	or	r24, r16
     294:	91 2b       	or	r25, r17
     296:	9a 83       	std	Y+2, r25	; 0x02
     298:	89 83       	std	Y+1, r24	; 0x01

0000029a <.Loc.57>:
    I2C_Stop();
     29a:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Stop>

0000029e <.Loc.58>:
    return value;
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02

000002a2 <.Loc.59>:
}
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <Read_Gyro_X>:

float Read_Gyro_X(void){
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	66 97       	sbiw	r28, 0x16	; 22
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	cd bf       	out	0x3d, r28	; 61

000002c6 <.Loc.61>:
    int16_t GyroX = MPU6050_ReadGyro(0x43);
     2c6:	83 e4       	ldi	r24, 0x43	; 67
     2c8:	0e 94 2a 01 	call	0x254	; 0x254 <MPU6050_ReadGyro>
     2cc:	9a 83       	std	Y+2, r25	; 0x02
     2ce:	89 83       	std	Y+1, r24	; 0x01

000002d0 <.Loc.62>:
    GyroX += 230;
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	8a 51       	subi	r24, 0x1A	; 26
     2d6:	9f 4f       	sbci	r25, 0xFF	; 255
     2d8:	9a 83       	std	Y+2, r25	; 0x02
     2da:	89 83       	std	Y+1, r24	; 0x01

000002dc <.Loc.63>:
    float GyroX_degPerSec = (float)GyroX / 131.0;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	9c 01       	movw	r18, r24
     2e2:	99 0f       	add	r25, r25
     2e4:	44 0b       	sbc	r20, r20
     2e6:	55 0b       	sbc	r21, r21
     2e8:	2f 87       	std	Y+15, r18	; 0x0f
     2ea:	38 8b       	std	Y+16, r19	; 0x10
     2ec:	49 8b       	std	Y+17, r20	; 0x11
     2ee:	5a 8b       	std	Y+18, r21	; 0x12
     2f0:	6f 85       	ldd	r22, Y+15	; 0x0f
     2f2:	78 89       	ldd	r23, Y+16	; 0x10
     2f4:	89 89       	ldd	r24, Y+17	; 0x11
     2f6:	9a 89       	ldd	r25, Y+18	; 0x12
     2f8:	0e 94 2d 14 	call	0x285a	; 0x285a <__floatsisf>
     2fc:	6f 83       	std	Y+7, r22	; 0x07
     2fe:	78 87       	std	Y+8, r23	; 0x08
     300:	89 87       	std	Y+9, r24	; 0x09
     302:	9a 87       	std	Y+10, r25	; 0x0a

00000304 <.Loc.64>:
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	43 e0       	ldi	r20, 0x03	; 3
     30a:	53 e4       	ldi	r21, 0x43	; 67
     30c:	6f 81       	ldd	r22, Y+7	; 0x07
     30e:	78 85       	ldd	r23, Y+8	; 0x08
     310:	89 85       	ldd	r24, Y+9	; 0x09
     312:	9a 85       	ldd	r25, Y+10	; 0x0a
     314:	0e 94 83 13 	call	0x2706	; 0x2706 <__divsf3>
     318:	6b 8b       	std	Y+19, r22	; 0x13
     31a:	7c 8b       	std	Y+20, r23	; 0x14
     31c:	8d 8b       	std	Y+21, r24	; 0x15
     31e:	9e 8b       	std	Y+22, r25	; 0x16
     320:	8b 89       	ldd	r24, Y+19	; 0x13
     322:	9c 89       	ldd	r25, Y+20	; 0x14
     324:	ad 89       	ldd	r26, Y+21	; 0x15
     326:	be 89       	ldd	r27, Y+22	; 0x16
     328:	8b 83       	std	Y+3, r24	; 0x03
     32a:	9c 83       	std	Y+4, r25	; 0x04
     32c:	ad 83       	std	Y+5, r26	; 0x05
     32e:	be 83       	std	Y+6, r27	; 0x06

00000330 <.Loc.65>:
    return GyroX_degPerSec;
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	ad 81       	ldd	r26, Y+5	; 0x05
     336:	be 81       	ldd	r27, Y+6	; 0x06
     338:	8b 87       	std	Y+11, r24	; 0x0b
     33a:	9c 87       	std	Y+12, r25	; 0x0c
     33c:	ad 87       	std	Y+13, r26	; 0x0d
     33e:	be 87       	std	Y+14, r27	; 0x0e

00000340 <.Loc.66>:
}
     340:	6b 85       	ldd	r22, Y+11	; 0x0b
     342:	7c 85       	ldd	r23, Y+12	; 0x0c
     344:	8d 85       	ldd	r24, Y+13	; 0x0d
     346:	9e 85       	ldd	r25, Y+14	; 0x0e
     348:	66 96       	adiw	r28, 0x16	; 22
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <Read_Gyro_Y>:
float Read_Gyro_Y(void){
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	66 97       	sbiw	r28, 0x16	; 22
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61

0000036e <.Loc.68>:
    int16_t GyroY = MPU6050_ReadGyro(0x45);
     36e:	85 e4       	ldi	r24, 0x45	; 69
     370:	0e 94 2a 01 	call	0x254	; 0x254 <MPU6050_ReadGyro>
     374:	9a 83       	std	Y+2, r25	; 0x02
     376:	89 83       	std	Y+1, r24	; 0x01

00000378 <.Loc.69>:
    float GyroY_degPerSec = (float)GyroY / 131.0;
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	9a 81       	ldd	r25, Y+2	; 0x02
     37c:	9c 01       	movw	r18, r24
     37e:	99 0f       	add	r25, r25
     380:	44 0b       	sbc	r20, r20
     382:	55 0b       	sbc	r21, r21
     384:	2f 87       	std	Y+15, r18	; 0x0f
     386:	38 8b       	std	Y+16, r19	; 0x10
     388:	49 8b       	std	Y+17, r20	; 0x11
     38a:	5a 8b       	std	Y+18, r21	; 0x12
     38c:	6f 85       	ldd	r22, Y+15	; 0x0f
     38e:	78 89       	ldd	r23, Y+16	; 0x10
     390:	89 89       	ldd	r24, Y+17	; 0x11
     392:	9a 89       	ldd	r25, Y+18	; 0x12
     394:	0e 94 2d 14 	call	0x285a	; 0x285a <__floatsisf>
     398:	6f 83       	std	Y+7, r22	; 0x07
     39a:	78 87       	std	Y+8, r23	; 0x08
     39c:	89 87       	std	Y+9, r24	; 0x09
     39e:	9a 87       	std	Y+10, r25	; 0x0a

000003a0 <.Loc.70>:
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	43 e0       	ldi	r20, 0x03	; 3
     3a6:	53 e4       	ldi	r21, 0x43	; 67
     3a8:	6f 81       	ldd	r22, Y+7	; 0x07
     3aa:	78 85       	ldd	r23, Y+8	; 0x08
     3ac:	89 85       	ldd	r24, Y+9	; 0x09
     3ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b0:	0e 94 83 13 	call	0x2706	; 0x2706 <__divsf3>
     3b4:	6b 8b       	std	Y+19, r22	; 0x13
     3b6:	7c 8b       	std	Y+20, r23	; 0x14
     3b8:	8d 8b       	std	Y+21, r24	; 0x15
     3ba:	9e 8b       	std	Y+22, r25	; 0x16
     3bc:	8b 89       	ldd	r24, Y+19	; 0x13
     3be:	9c 89       	ldd	r25, Y+20	; 0x14
     3c0:	ad 89       	ldd	r26, Y+21	; 0x15
     3c2:	be 89       	ldd	r27, Y+22	; 0x16
     3c4:	8b 83       	std	Y+3, r24	; 0x03
     3c6:	9c 83       	std	Y+4, r25	; 0x04
     3c8:	ad 83       	std	Y+5, r26	; 0x05
     3ca:	be 83       	std	Y+6, r27	; 0x06

000003cc <.Loc.71>:
    return GyroY_degPerSec;
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	9c 81       	ldd	r25, Y+4	; 0x04
     3d0:	ad 81       	ldd	r26, Y+5	; 0x05
     3d2:	be 81       	ldd	r27, Y+6	; 0x06
     3d4:	8b 87       	std	Y+11, r24	; 0x0b
     3d6:	9c 87       	std	Y+12, r25	; 0x0c
     3d8:	ad 87       	std	Y+13, r26	; 0x0d
     3da:	be 87       	std	Y+14, r27	; 0x0e

000003dc <.Loc.72>:
}
     3dc:	6b 85       	ldd	r22, Y+11	; 0x0b
     3de:	7c 85       	ldd	r23, Y+12	; 0x0c
     3e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     3e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     3e4:	66 96       	adiw	r28, 0x16	; 22
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <Read_Gyro_Z>:
float Read_Gyro_Z(void){
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	66 97       	sbiw	r28, 0x16	; 22
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61

0000040a <.Loc.74>:
    int16_t GyroZ = MPU6050_ReadGyro(0x47);
     40a:	87 e4       	ldi	r24, 0x47	; 71
     40c:	0e 94 2a 01 	call	0x254	; 0x254 <MPU6050_ReadGyro>
     410:	9a 83       	std	Y+2, r25	; 0x02
     412:	89 83       	std	Y+1, r24	; 0x01

00000414 <.Loc.75>:
    float GyroZ_degPerSec = (float)GyroZ / 131.0;
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	9c 01       	movw	r18, r24
     41a:	99 0f       	add	r25, r25
     41c:	44 0b       	sbc	r20, r20
     41e:	55 0b       	sbc	r21, r21
     420:	2f 87       	std	Y+15, r18	; 0x0f
     422:	38 8b       	std	Y+16, r19	; 0x10
     424:	49 8b       	std	Y+17, r20	; 0x11
     426:	5a 8b       	std	Y+18, r21	; 0x12
     428:	6f 85       	ldd	r22, Y+15	; 0x0f
     42a:	78 89       	ldd	r23, Y+16	; 0x10
     42c:	89 89       	ldd	r24, Y+17	; 0x11
     42e:	9a 89       	ldd	r25, Y+18	; 0x12
     430:	0e 94 2d 14 	call	0x285a	; 0x285a <__floatsisf>
     434:	6f 83       	std	Y+7, r22	; 0x07
     436:	78 87       	std	Y+8, r23	; 0x08
     438:	89 87       	std	Y+9, r24	; 0x09
     43a:	9a 87       	std	Y+10, r25	; 0x0a

0000043c <.Loc.76>:
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	43 e0       	ldi	r20, 0x03	; 3
     442:	53 e4       	ldi	r21, 0x43	; 67
     444:	6f 81       	ldd	r22, Y+7	; 0x07
     446:	78 85       	ldd	r23, Y+8	; 0x08
     448:	89 85       	ldd	r24, Y+9	; 0x09
     44a:	9a 85       	ldd	r25, Y+10	; 0x0a
     44c:	0e 94 83 13 	call	0x2706	; 0x2706 <__divsf3>
     450:	6b 8b       	std	Y+19, r22	; 0x13
     452:	7c 8b       	std	Y+20, r23	; 0x14
     454:	8d 8b       	std	Y+21, r24	; 0x15
     456:	9e 8b       	std	Y+22, r25	; 0x16
     458:	8b 89       	ldd	r24, Y+19	; 0x13
     45a:	9c 89       	ldd	r25, Y+20	; 0x14
     45c:	ad 89       	ldd	r26, Y+21	; 0x15
     45e:	be 89       	ldd	r27, Y+22	; 0x16
     460:	8b 83       	std	Y+3, r24	; 0x03
     462:	9c 83       	std	Y+4, r25	; 0x04
     464:	ad 83       	std	Y+5, r26	; 0x05
     466:	be 83       	std	Y+6, r27	; 0x06

00000468 <.Loc.77>:
    return GyroZ_degPerSec;
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	9c 81       	ldd	r25, Y+4	; 0x04
     46c:	ad 81       	ldd	r26, Y+5	; 0x05
     46e:	be 81       	ldd	r27, Y+6	; 0x06
     470:	8b 87       	std	Y+11, r24	; 0x0b
     472:	9c 87       	std	Y+12, r25	; 0x0c
     474:	ad 87       	std	Y+13, r26	; 0x0d
     476:	be 87       	std	Y+14, r27	; 0x0e

00000478 <.Loc.78>:
}
     478:	6b 85       	ldd	r22, Y+11	; 0x0b
     47a:	7c 85       	ldd	r23, Y+12	; 0x0c
     47c:	8d 85       	ldd	r24, Y+13	; 0x0d
     47e:	9e 85       	ldd	r25, Y+14	; 0x0e
     480:	66 96       	adiw	r28, 0x16	; 22
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <MPU6050_Init>:


void MPU6050_Init() {
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62

0000049a <.Loc.80>:
    MPU6050_WriteReg(0x6B, 0x00); // Power on the MPU6050
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	8b e6       	ldi	r24, 0x6B	; 107
     49e:	0e 94 0f 01 	call	0x21e	; 0x21e <MPU6050_WriteReg>

000004a2 <.Loc.81>:
}
     4a2:	00 00       	nop
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <initTimerGyro>:

void initTimerGyro(void){
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62

000004b2 <.Loc.83>:
    TCCR0A = 0;
     4b2:	84 e4       	ldi	r24, 0x44	; 68
     4b4:	90 e0       	ldi	r25, 0x00	; 0

000004b6 <.Loc.84>:
     4b6:	fc 01       	movw	r30, r24
     4b8:	10 82       	st	Z, r1

000004ba <.Loc.85>:
    TCCR0B |= (1<<CS00);
     4ba:	85 e4       	ldi	r24, 0x45	; 69
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	fc 01       	movw	r30, r24
     4c0:	20 81       	ld	r18, Z
     4c2:	85 e4       	ldi	r24, 0x45	; 69
     4c4:	90 e0       	ldi	r25, 0x00	; 0

000004c6 <.Loc.86>:
     4c6:	21 60       	ori	r18, 0x01	; 1
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18

000004cc <.Loc.87>:
    //16000000 / 256 = 62,500
    //1 / 62500 = 0.000016s = 0.016ms = 16us
    //62500x/sec
    TIMSK0 = (1<<TOIE0);
     4cc:	8e e6       	ldi	r24, 0x6E	; 110
     4ce:	90 e0       	ldi	r25, 0x00	; 0

000004d0 <.Loc.88>:
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18

000004d6 <.Loc.89>:
    sei();
     4d6:	78 94       	sei

000004d8 <.Loc.90>:
}
     4d8:	00 00       	nop
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <__vector_23>:
ISR(TIMER0_OVF_vect){
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62

000004f6 <.Loc.92>:
    Gyro_count++;
     4f6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Gyro_count>
     4fa:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Gyro_count+0x1>
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <Gyro_count+0x1>
     504:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Gyro_count>

00000508 <.Loc.93>:
}
     508:	00 00       	nop
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	9f 91       	pop	r25
     510:	8f 91       	pop	r24
     512:	0f 90       	pop	r0
     514:	0f be       	out	0x3f, r0	; 63
     516:	0f 90       	pop	r0
     518:	1f 90       	pop	r1
     51a:	18 95       	reti

0000051c <UpdateHeading>:

float UpdateHeading(float CurrentHeading){
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	ec 97       	sbiw	r28, 0x3c	; 60
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	69 87       	std	Y+9, r22	; 0x09
     532:	7a 87       	std	Y+10, r23	; 0x0a
     534:	8b 87       	std	Y+11, r24	; 0x0b
     536:	9c 87       	std	Y+12, r25	; 0x0c

00000538 <.Loc.95>:

    float DeltaTijd = 0;
     538:	19 82       	std	Y+1, r1	; 0x01
     53a:	1a 82       	std	Y+2, r1	; 0x02
     53c:	1b 82       	std	Y+3, r1	; 0x03
     53e:	1c 82       	std	Y+4, r1	; 0x04

00000540 <.Loc.96>:
    float DeltaHeading;

    // Read gyroscopic rotation data
    DS_2 = Read_Gyro_X();
     540:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Read_Gyro_X>
     544:	6d 87       	std	Y+13, r22	; 0x0d
     546:	7e 87       	std	Y+14, r23	; 0x0e
     548:	8f 87       	std	Y+15, r24	; 0x0f
     54a:	98 8b       	std	Y+16, r25	; 0x10

0000054c <.Loc.97>:
     54c:	2d 85       	ldd	r18, Y+13	; 0x0d
     54e:	3e 85       	ldd	r19, Y+14	; 0x0e
     550:	4f 85       	ldd	r20, Y+15	; 0x0f
     552:	58 89       	ldd	r21, Y+16	; 0x10
     554:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <DS_2>
     558:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <DS_2+0x1>
     55c:	40 93 28 02 	sts	0x0228, r20	; 0x800228 <DS_2+0x2>
     560:	50 93 29 02 	sts	0x0229, r21	; 0x800229 <DS_2+0x3>

00000564 <.Loc.98>:
    //Timer uitlezen
    //16us * count is aantal s
    DeltaTijd = Gyro_count;
     564:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Gyro_count>
     568:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Gyro_count+0x1>
     56c:	9c 01       	movw	r18, r24
     56e:	99 0f       	add	r25, r25
     570:	44 0b       	sbc	r20, r20
     572:	55 0b       	sbc	r21, r21
     574:	29 a3       	std	Y+33, r18	; 0x21
     576:	3a a3       	std	Y+34, r19	; 0x22
     578:	4b a3       	std	Y+35, r20	; 0x23
     57a:	5c a3       	std	Y+36, r21	; 0x24
     57c:	69 a1       	ldd	r22, Y+33	; 0x21
     57e:	7a a1       	ldd	r23, Y+34	; 0x22
     580:	8b a1       	ldd	r24, Y+35	; 0x23
     582:	9c a1       	ldd	r25, Y+36	; 0x24
     584:	0e 94 2d 14 	call	0x285a	; 0x285a <__floatsisf>
     588:	6d a3       	std	Y+37, r22	; 0x25
     58a:	7e a3       	std	Y+38, r23	; 0x26
     58c:	8f a3       	std	Y+39, r24	; 0x27
     58e:	98 a7       	std	Y+40, r25	; 0x28
     590:	8d a1       	ldd	r24, Y+37	; 0x25
     592:	9e a1       	ldd	r25, Y+38	; 0x26
     594:	af a1       	ldd	r26, Y+39	; 0x27
     596:	b8 a5       	ldd	r27, Y+40	; 0x28
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	ab 83       	std	Y+3, r26	; 0x03
     59e:	bc 83       	std	Y+4, r27	; 0x04

000005a0 <.Loc.99>:

    //reset timer
    TCNT0 = 0;
     5a0:	86 e4       	ldi	r24, 0x46	; 70
     5a2:	90 e0       	ldi	r25, 0x00	; 0

000005a4 <.Loc.100>:
     5a4:	dc 01       	movw	r26, r24
     5a6:	1c 92       	st	X, r1

000005a8 <.Loc.101>:
    TIFR0 = 1<<TOV0;
     5a8:	85 e3       	ldi	r24, 0x35	; 53
     5aa:	90 e0       	ldi	r25, 0x00	; 0

000005ac <.Loc.102>:
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18

000005b2 <.Loc.103>:
    Gyro_count = 0;
     5b2:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <Gyro_count+0x1>
     5b6:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <Gyro_count>

000005ba <.Loc.104>:
    DeltaTijd = DeltaTijd * 0.000016; //DT nu in s
     5ba:	2d eb       	ldi	r18, 0xBD	; 189
     5bc:	37 e3       	ldi	r19, 0x37	; 55
     5be:	46 e8       	ldi	r20, 0x86	; 134
     5c0:	57 e3       	ldi	r21, 0x37	; 55
     5c2:	69 81       	ldd	r22, Y+1	; 0x01
     5c4:	7a 81       	ldd	r23, Y+2	; 0x02
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ca:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
     5ce:	69 a7       	std	Y+41, r22	; 0x29
     5d0:	7a a7       	std	Y+42, r23	; 0x2a
     5d2:	8b a7       	std	Y+43, r24	; 0x2b
     5d4:	9c a7       	std	Y+44, r25	; 0x2c
     5d6:	29 a5       	ldd	r18, Y+41	; 0x29
     5d8:	3a a5       	ldd	r19, Y+42	; 0x2a
     5da:	4b a5       	ldd	r20, Y+43	; 0x2b
     5dc:	5c a5       	ldd	r21, Y+44	; 0x2c
     5de:	29 83       	std	Y+1, r18	; 0x01
     5e0:	3a 83       	std	Y+2, r19	; 0x02
     5e2:	4b 83       	std	Y+3, r20	; 0x03
     5e4:	5c 83       	std	Y+4, r21	; 0x04

000005e6 <.Loc.105>:
    DeltaHeading = ((DS_1 + DS_2)*(DeltaTijd))/2.0;
     5e6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <DS_1>
     5ea:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <DS_1+0x1>
     5ee:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <DS_1+0x2>
     5f2:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <DS_1+0x3>
     5f6:	89 8b       	std	Y+17, r24	; 0x11
     5f8:	9a 8b       	std	Y+18, r25	; 0x12
     5fa:	ab 8b       	std	Y+19, r26	; 0x13
     5fc:	bc 8b       	std	Y+20, r27	; 0x14
     5fe:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DS_2>
     602:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DS_2+0x1>
     606:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <DS_2+0x2>
     60a:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <DS_2+0x3>
     60e:	9c 01       	movw	r18, r24
     610:	ad 01       	movw	r20, r26
     612:	69 89       	ldd	r22, Y+17	; 0x11
     614:	7a 89       	ldd	r23, Y+18	; 0x12
     616:	8b 89       	ldd	r24, Y+19	; 0x13
     618:	9c 89       	ldd	r25, Y+20	; 0x14
     61a:	0e 94 12 13 	call	0x2624	; 0x2624 <__addsf3>
     61e:	6d a7       	std	Y+45, r22	; 0x2d
     620:	7e a7       	std	Y+46, r23	; 0x2e
     622:	8f a7       	std	Y+47, r24	; 0x2f
     624:	98 ab       	std	Y+48, r25	; 0x30
     626:	2d a5       	ldd	r18, Y+45	; 0x2d
     628:	3e a5       	ldd	r19, Y+46	; 0x2e
     62a:	4f a5       	ldd	r20, Y+47	; 0x2f
     62c:	58 a9       	ldd	r21, Y+48	; 0x30
     62e:	2d 8b       	std	Y+21, r18	; 0x15
     630:	3e 8b       	std	Y+22, r19	; 0x16
     632:	4f 8b       	std	Y+23, r20	; 0x17
     634:	58 8f       	std	Y+24, r21	; 0x18

00000636 <.Loc.106>:
     636:	29 81       	ldd	r18, Y+1	; 0x01
     638:	3a 81       	ldd	r19, Y+2	; 0x02
     63a:	4b 81       	ldd	r20, Y+3	; 0x03
     63c:	5c 81       	ldd	r21, Y+4	; 0x04
     63e:	6d 89       	ldd	r22, Y+21	; 0x15
     640:	7e 89       	ldd	r23, Y+22	; 0x16
     642:	8f 89       	ldd	r24, Y+23	; 0x17
     644:	98 8d       	ldd	r25, Y+24	; 0x18
     646:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
     64a:	69 ab       	std	Y+49, r22	; 0x31
     64c:	7a ab       	std	Y+50, r23	; 0x32
     64e:	8b ab       	std	Y+51, r24	; 0x33
     650:	9c ab       	std	Y+52, r25	; 0x34
     652:	89 a9       	ldd	r24, Y+49	; 0x31
     654:	9a a9       	ldd	r25, Y+50	; 0x32
     656:	ab a9       	ldd	r26, Y+51	; 0x33
     658:	bc a9       	ldd	r27, Y+52	; 0x34
     65a:	89 8f       	std	Y+25, r24	; 0x19
     65c:	9a 8f       	std	Y+26, r25	; 0x1a
     65e:	ab 8f       	std	Y+27, r26	; 0x1b
     660:	bc 8f       	std	Y+28, r27	; 0x1c

00000662 <.Loc.107>:
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e4       	ldi	r21, 0x40	; 64
     66a:	69 8d       	ldd	r22, Y+25	; 0x19
     66c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     66e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     670:	9c 8d       	ldd	r25, Y+28	; 0x1c
     672:	0e 94 83 13 	call	0x2706	; 0x2706 <__divsf3>
     676:	6d ab       	std	Y+53, r22	; 0x35
     678:	7e ab       	std	Y+54, r23	; 0x36
     67a:	8f ab       	std	Y+55, r24	; 0x37
     67c:	98 af       	std	Y+56, r25	; 0x38
     67e:	2d a9       	ldd	r18, Y+53	; 0x35
     680:	3e a9       	ldd	r19, Y+54	; 0x36
     682:	4f a9       	ldd	r20, Y+55	; 0x37
     684:	58 ad       	ldd	r21, Y+56	; 0x38
     686:	2d 83       	std	Y+5, r18	; 0x05
     688:	3e 83       	std	Y+6, r19	; 0x06
     68a:	4f 83       	std	Y+7, r20	; 0x07
     68c:	58 87       	std	Y+8, r21	; 0x08

0000068e <.Loc.108>:
    CurrentHeading = CurrentHeading + DeltaHeading;
     68e:	2d 81       	ldd	r18, Y+5	; 0x05
     690:	3e 81       	ldd	r19, Y+6	; 0x06
     692:	4f 81       	ldd	r20, Y+7	; 0x07
     694:	58 85       	ldd	r21, Y+8	; 0x08
     696:	69 85       	ldd	r22, Y+9	; 0x09
     698:	7a 85       	ldd	r23, Y+10	; 0x0a
     69a:	8b 85       	ldd	r24, Y+11	; 0x0b
     69c:	9c 85       	ldd	r25, Y+12	; 0x0c
     69e:	0e 94 12 13 	call	0x2624	; 0x2624 <__addsf3>
     6a2:	69 af       	std	Y+57, r22	; 0x39
     6a4:	7a af       	std	Y+58, r23	; 0x3a
     6a6:	8b af       	std	Y+59, r24	; 0x3b
     6a8:	9c af       	std	Y+60, r25	; 0x3c
     6aa:	89 ad       	ldd	r24, Y+57	; 0x39
     6ac:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ae:	ab ad       	ldd	r26, Y+59	; 0x3b
     6b0:	bc ad       	ldd	r27, Y+60	; 0x3c
     6b2:	89 87       	std	Y+9, r24	; 0x09
     6b4:	9a 87       	std	Y+10, r25	; 0x0a
     6b6:	ab 87       	std	Y+11, r26	; 0x0b
     6b8:	bc 87       	std	Y+12, r27	; 0x0c

000006ba <.Loc.109>:
    DS_1 = DS_2;
     6ba:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DS_2>
     6be:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DS_2+0x1>
     6c2:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <DS_2+0x2>
     6c6:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <DS_2+0x3>
     6ca:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <DS_1>
     6ce:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <DS_1+0x1>
     6d2:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <DS_1+0x2>
     6d6:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <DS_1+0x3>

000006da <.Loc.110>:

	return CurrentHeading;
     6da:	89 85       	ldd	r24, Y+9	; 0x09
     6dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6de:	ab 85       	ldd	r26, Y+11	; 0x0b
     6e0:	bc 85       	ldd	r27, Y+12	; 0x0c
     6e2:	8d 8f       	std	Y+29, r24	; 0x1d
     6e4:	9e 8f       	std	Y+30, r25	; 0x1e
     6e6:	af 8f       	std	Y+31, r26	; 0x1f
     6e8:	b8 a3       	std	Y+32, r27	; 0x20

000006ea <.Loc.111>:
}
     6ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6ec:	7e 8d       	ldd	r23, Y+30	; 0x1e
     6ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6f0:	98 a1       	ldd	r25, Y+32	; 0x20
     6f2:	ec 96       	adiw	r28, 0x3c	; 60
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <init_Gyro>:

void init_Gyro(){
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62

0000070c <.Loc.113>:
    I2C_Init();
     70c:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_Init>

00000710 <.Loc.114>:
    MPU6050_Init();
     710:	0e 94 49 02 	call	0x492	; 0x492 <MPU6050_Init>

00000714 <.Loc.115>:
    initTimerGyro();
     714:	0e 94 55 02 	call	0x4aa	; 0x4aa <initTimerGyro>

00000718 <.Loc.116>:
}
     718:	00 00       	nop
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <__vector_20>:
#include "h_bridge_1.h"
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER1_OVF_vect){
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	0b b6       	in	r0, 0x3b	; 59
     72c:	0f 92       	push	r0
     72e:	2f 93       	push	r18
     730:	8f 93       	push	r24
     732:	9f 93       	push	r25
     734:	ef 93       	push	r30
     736:	ff 93       	push	r31
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62

00000740 <.Loc.1>:
	if (OCR1A == 0 && OCR1B == 0){
     740:	88 e8       	ldi	r24, 0x88	; 136
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	91 81       	ldd	r25, Z+1	; 0x01

0000074a <.Loc.2>:
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	d1 f4       	brne	.+52     	; 0x782 <.L2>

0000074e <.Loc.3>:
     74e:	8a e8       	ldi	r24, 0x8A	; 138
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01

00000758 <.Loc.4>:
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	99 f4       	brne	.+38     	; 0x782 <.L2>

0000075c <.Loc.5>:
		port_R1 &= ~(1<<pin_R1);
     75c:	88 e0       	ldi	r24, 0x08	; 8
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	fc 01       	movw	r30, r24
     762:	20 81       	ld	r18, Z

00000764 <.Loc.6>:
     764:	88 e0       	ldi	r24, 0x08	; 8
     766:	91 e0       	ldi	r25, 0x01	; 1

00000768 <.Loc.7>:
     768:	2f 7d       	andi	r18, 0xDF	; 223
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18

0000076e <.Loc.8>:
		port_L1 &= ~(1<<pin_L1);
     76e:	88 e0       	ldi	r24, 0x08	; 8
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	fc 01       	movw	r30, r24
     774:	20 81       	ld	r18, Z

00000776 <.Loc.9>:
     776:	88 e0       	ldi	r24, 0x08	; 8
     778:	91 e0       	ldi	r25, 0x01	; 1

0000077a <.Loc.10>:
     77a:	2f 7e       	andi	r18, 0xEF	; 239
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18

00000780 <.Loc.11>:
	}
	else if (OCR1B != 0){
		port_R1 &= ~(1<<pin_R1);
		port_L1 |= (1<<pin_L1);
	}
}
     780:	33 c0       	rjmp	.+102    	; 0x7e8 <.L5>

00000782 <.L2>:
	else if (OCR1A != 0){
     782:	88 e8       	ldi	r24, 0x88	; 136
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	fc 01       	movw	r30, r24
     788:	80 81       	ld	r24, Z
     78a:	91 81       	ldd	r25, Z+1	; 0x01

0000078c <.Loc.13>:
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	99 f0       	breq	.+38     	; 0x7b6 <.L4>

00000790 <.Loc.14>:
		port_R1 |= (1<<pin_R1);
     790:	88 e0       	ldi	r24, 0x08	; 8
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	fc 01       	movw	r30, r24
     796:	20 81       	ld	r18, Z
     798:	88 e0       	ldi	r24, 0x08	; 8
     79a:	91 e0       	ldi	r25, 0x01	; 1

0000079c <.Loc.15>:
     79c:	20 62       	ori	r18, 0x20	; 32
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18

000007a2 <.Loc.16>:
		port_L1 &= ~(1<<pin_L1);
     7a2:	88 e0       	ldi	r24, 0x08	; 8
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 81       	ld	r18, Z

000007aa <.Loc.17>:
     7aa:	88 e0       	ldi	r24, 0x08	; 8
     7ac:	91 e0       	ldi	r25, 0x01	; 1

000007ae <.Loc.18>:
     7ae:	2f 7e       	andi	r18, 0xEF	; 239
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18

000007b4 <.Loc.19>:
}
     7b4:	19 c0       	rjmp	.+50     	; 0x7e8 <.L5>

000007b6 <.L4>:
	else if (OCR1B != 0){
     7b6:	8a e8       	ldi	r24, 0x8A	; 138
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	91 81       	ldd	r25, Z+1	; 0x01

000007c0 <.Loc.21>:
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	91 f0       	breq	.+36     	; 0x7e8 <.L5>

000007c4 <.Loc.22>:
		port_R1 &= ~(1<<pin_R1);
     7c4:	88 e0       	ldi	r24, 0x08	; 8
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 81       	ld	r18, Z

000007cc <.Loc.23>:
     7cc:	88 e0       	ldi	r24, 0x08	; 8
     7ce:	91 e0       	ldi	r25, 0x01	; 1

000007d0 <.Loc.24>:
     7d0:	2f 7d       	andi	r18, 0xDF	; 223
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18

000007d6 <.Loc.25>:
		port_L1 |= (1<<pin_L1);
     7d6:	88 e0       	ldi	r24, 0x08	; 8
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	fc 01       	movw	r30, r24
     7dc:	20 81       	ld	r18, Z
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	91 e0       	ldi	r25, 0x01	; 1

000007e2 <.Loc.26>:
     7e2:	20 61       	ori	r18, 0x10	; 16
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18

000007e8 <.L5>:
}
     7e8:	00 00       	nop
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	2f 91       	pop	r18
     7f8:	0f 90       	pop	r0
     7fa:	0b be       	out	0x3b, r0	; 59
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	18 95       	reti

00000806 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
     806:	1f 92       	push	r1
     808:	0f 92       	push	r0
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	0b b6       	in	r0, 0x3b	; 59
     812:	0f 92       	push	r0
     814:	2f 93       	push	r18
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62

00000826 <.Loc.29>:
	if (OCR1A != 65535){
     826:	88 e8       	ldi	r24, 0x88	; 136
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	91 81       	ldd	r25, Z+1	; 0x01

00000830 <.Loc.30>:
     830:	8f 3f       	cpi	r24, 0xFF	; 255
     832:	98 07       	cpc	r25, r24
     834:	49 f0       	breq	.+18     	; 0x848 <.L8>

00000836 <.Loc.31>:
		port_R1 &= ~(1<<pin_R1);
     836:	88 e0       	ldi	r24, 0x08	; 8
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	fc 01       	movw	r30, r24
     83c:	20 81       	ld	r18, Z

0000083e <.Loc.32>:
     83e:	88 e0       	ldi	r24, 0x08	; 8
     840:	91 e0       	ldi	r25, 0x01	; 1

00000842 <.Loc.33>:
     842:	2f 7d       	andi	r18, 0xDF	; 223
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18

00000848 <.L8>:
	}
}
     848:	00 00       	nop
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	ff 91       	pop	r31
     850:	ef 91       	pop	r30
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	2f 91       	pop	r18
     858:	0f 90       	pop	r0
     85a:	0b be       	out	0x3b, r0	; 59
     85c:	0f 90       	pop	r0
     85e:	0f be       	out	0x3f, r0	; 63
     860:	0f 90       	pop	r0
     862:	1f 90       	pop	r1
     864:	18 95       	reti

00000866 <__vector_18>:

ISR(TIMER1_COMPB_vect)
{
     866:	1f 92       	push	r1
     868:	0f 92       	push	r0
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	0f 92       	push	r0
     86e:	11 24       	eor	r1, r1
     870:	0b b6       	in	r0, 0x3b	; 59
     872:	0f 92       	push	r0
     874:	2f 93       	push	r18
     876:	8f 93       	push	r24
     878:	9f 93       	push	r25
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62

00000886 <.Loc.36>:
	if (OCR1B != 65535){
     886:	8a e8       	ldi	r24, 0x8A	; 138
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	fc 01       	movw	r30, r24
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01

00000890 <.Loc.37>:
     890:	8f 3f       	cpi	r24, 0xFF	; 255
     892:	98 07       	cpc	r25, r24
     894:	49 f0       	breq	.+18     	; 0x8a8 <.L11>

00000896 <.Loc.38>:
		port_L1 &= ~(1<<pin_L1);
     896:	88 e0       	ldi	r24, 0x08	; 8
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	fc 01       	movw	r30, r24
     89c:	20 81       	ld	r18, Z

0000089e <.Loc.39>:
     89e:	88 e0       	ldi	r24, 0x08	; 8
     8a0:	91 e0       	ldi	r25, 0x01	; 1

000008a2 <.Loc.40>:
     8a2:	2f 7e       	andi	r18, 0xEF	; 239
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18

000008a8 <.L11>:
	}
}
     8a8:	00 00       	nop
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	ff 91       	pop	r31
     8b0:	ef 91       	pop	r30
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	2f 91       	pop	r18
     8b8:	0f 90       	pop	r0
     8ba:	0b be       	out	0x3b, r0	; 59
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <init_motor_1>:

void init_motor_1(void)
{
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62

000008ce <.Loc.43>:
	// Pin outputs
	ddr_R1 |= (1<<pin_R1);
     8ce:	87 e0       	ldi	r24, 0x07	; 7
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 81       	ld	r18, Z
     8d6:	87 e0       	ldi	r24, 0x07	; 7
     8d8:	91 e0       	ldi	r25, 0x01	; 1

000008da <.Loc.44>:
     8da:	20 62       	ori	r18, 0x20	; 32
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18

000008e0 <.Loc.45>:
	ddr_L1 |= (1<<pin_L1);
     8e0:	87 e0       	ldi	r24, 0x07	; 7
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 81       	ld	r18, Z
     8e8:	87 e0       	ldi	r24, 0x07	; 7
     8ea:	91 e0       	ldi	r25, 0x01	; 1

000008ec <.Loc.46>:
     8ec:	20 61       	ori	r18, 0x10	; 16
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 83       	st	Z, r18

000008f2 <.Loc.47>:

	// zekerheid laag
	port_R1 &= ~(1<<pin_R1);
     8f2:	88 e0       	ldi	r24, 0x08	; 8
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	fc 01       	movw	r30, r24
     8f8:	20 81       	ld	r18, Z

000008fa <.Loc.48>:
     8fa:	88 e0       	ldi	r24, 0x08	; 8
     8fc:	91 e0       	ldi	r25, 0x01	; 1

000008fe <.Loc.49>:
     8fe:	2f 7d       	andi	r18, 0xDF	; 223
     900:	fc 01       	movw	r30, r24
     902:	20 83       	st	Z, r18

00000904 <.Loc.50>:
	port_L1 &= ~(1<<pin_L1);
     904:	88 e0       	ldi	r24, 0x08	; 8
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	fc 01       	movw	r30, r24
     90a:	20 81       	ld	r18, Z

0000090c <.Loc.51>:
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	91 e0       	ldi	r25, 0x01	; 1

00000910 <.Loc.52>:
     910:	2f 7e       	andi	r18, 0xEF	; 239
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18

00000916 <.Loc.53>:

	// prescale 64
	TCCR1A = 0;
     916:	80 e8       	ldi	r24, 0x80	; 128
     918:	90 e0       	ldi	r25, 0x00	; 0

0000091a <.Loc.54>:
     91a:	fc 01       	movw	r30, r24
     91c:	10 82       	st	Z, r1

0000091e <.Loc.55>:
	TCCR1B = (0<<CS12) | (0<<CS11) | (1<<CS10);
     91e:	81 e8       	ldi	r24, 0x81	; 129
     920:	90 e0       	ldi	r25, 0x00	; 0

00000922 <.Loc.56>:
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18

00000928 <.Loc.57>:

	// standaard 0
	OCR1A = 0;
     928:	88 e8       	ldi	r24, 0x88	; 136
     92a:	90 e0       	ldi	r25, 0x00	; 0

0000092c <.Loc.58>:
     92c:	fc 01       	movw	r30, r24
     92e:	11 82       	std	Z+1, r1	; 0x01
     930:	10 82       	st	Z, r1

00000932 <.Loc.59>:
	OCR1B = 0;
     932:	8a e8       	ldi	r24, 0x8A	; 138
     934:	90 e0       	ldi	r25, 0x00	; 0

00000936 <.Loc.60>:
     936:	fc 01       	movw	r30, r24
     938:	11 82       	std	Z+1, r1	; 0x01
     93a:	10 82       	st	Z, r1

0000093c <.Loc.61>:
	TIMSK1 = (1<<OCIE1B) | (1<<OCIE1A) | (1<<TOIE1);
     93c:	8f e6       	ldi	r24, 0x6F	; 111
     93e:	90 e0       	ldi	r25, 0x00	; 0

00000940 <.Loc.62>:
     940:	27 e0       	ldi	r18, 0x07	; 7
     942:	fc 01       	movw	r30, r24
     944:	20 83       	st	Z, r18

00000946 <.Loc.63>:
	Motor_1_set_power(0);
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

0000094c <.Loc.64>:
}
     94c:	00 00       	nop
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <Motor_1_set_power>:

void Motor_1_set_power(signed char power)
{
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	00 d0       	rcall	.+0      	; 0x95e <L0^A>

0000095e <L0^A>:
     95e:	00 d0       	rcall	.+0      	; 0x960 <L0^A>

00000960 <L0^A>:
     960:	00 d0       	rcall	.+0      	; 0x962 <L0^A>

00000962 <L0^A>:
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	89 83       	std	Y+1, r24	; 0x01

00000968 <.Loc.66>:
	if (power >= -100 && power <= 100){
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	8c 39       	cpi	r24, 0x9C	; 156
     96c:	0c f4       	brge	.+2      	; 0x970 <.Loc.67>

0000096e <L0^A>:
     96e:	61 c0       	rjmp	.+194    	; 0xa32 <.L16>

00000970 <.Loc.67>:
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	84 36       	cpi	r24, 0x64	; 100
     974:	11 f0       	breq	.+4      	; 0x97a <.Loc.68>

00000976 <L0^A>:
     976:	0c f0       	brlt	.+2      	; 0x97a <.Loc.68>

00000978 <L0^A>:
     978:	5c c0       	rjmp	.+184    	; 0xa32 <.L16>

0000097a <.Loc.68>:
		if (power >= 0){
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	88 23       	and	r24, r24
     97e:	6c f1       	brlt	.+90     	; 0x9da <.L15>

00000980 <.Loc.69>:
			OCR1B = 0;
     980:	8a e8       	ldi	r24, 0x8A	; 138
     982:	90 e0       	ldi	r25, 0x00	; 0

00000984 <.Loc.70>:
     984:	fc 01       	movw	r30, r24
     986:	11 82       	std	Z+1, r1	; 0x01
     988:	10 82       	st	Z, r1

0000098a <.Loc.71>:
			OCR1A = (65535*power)/100;
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	48 2f       	mov	r20, r24
     98e:	88 0f       	add	r24, r24
     990:	55 0b       	sbc	r21, r21
     992:	66 0b       	sbc	r22, r22
     994:	77 0b       	sbc	r23, r23
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	dc 01       	movw	r26, r24
     99c:	9a 01       	movw	r18, r20
     99e:	ab 01       	movw	r20, r22
     9a0:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__muluhisi3>
     9a4:	6a 83       	std	Y+2, r22	; 0x02
     9a6:	7b 83       	std	Y+3, r23	; 0x03
     9a8:	8c 83       	std	Y+4, r24	; 0x04
     9aa:	9d 83       	std	Y+5, r25	; 0x05

000009ac <.Loc.72>:
     9ac:	04 e6       	ldi	r16, 0x64	; 100
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	6a 81       	ldd	r22, Y+2	; 0x02
     9b6:	7b 81       	ldd	r23, Y+3	; 0x03
     9b8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ba:	9d 81       	ldd	r25, Y+5	; 0x05
     9bc:	a9 01       	movw	r20, r18
     9be:	98 01       	movw	r18, r16
     9c0:	0e 94 a2 12 	call	0x2544	; 0x2544 <__divmodsi4>
     9c4:	da 01       	movw	r26, r20
     9c6:	c9 01       	movw	r24, r18
     9c8:	ac 01       	movw	r20, r24
     9ca:	bd 01       	movw	r22, r26

000009cc <.Loc.73>:
     9cc:	88 e8       	ldi	r24, 0x88	; 136
     9ce:	90 e0       	ldi	r25, 0x00	; 0

000009d0 <.Loc.74>:
     9d0:	9a 01       	movw	r18, r20
     9d2:	fc 01       	movw	r30, r24
     9d4:	31 83       	std	Z+1, r19	; 0x01
     9d6:	20 83       	st	Z, r18

000009d8 <.Loc.75>:
		else {
			OCR1A = 0;
			OCR1B = (65535*power)/-100;
		}
	}
}
     9d8:	2c c0       	rjmp	.+88     	; 0xa32 <.L16>

000009da <.L15>:
			OCR1A = 0;
     9da:	88 e8       	ldi	r24, 0x88	; 136
     9dc:	90 e0       	ldi	r25, 0x00	; 0

000009de <.Loc.77>:
     9de:	fc 01       	movw	r30, r24
     9e0:	11 82       	std	Z+1, r1	; 0x01
     9e2:	10 82       	st	Z, r1

000009e4 <.Loc.78>:
			OCR1B = (65535*power)/-100;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	48 2f       	mov	r20, r24
     9e8:	88 0f       	add	r24, r24
     9ea:	55 0b       	sbc	r21, r21
     9ec:	66 0b       	sbc	r22, r22
     9ee:	77 0b       	sbc	r23, r23
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	dc 01       	movw	r26, r24
     9f6:	9a 01       	movw	r18, r20
     9f8:	ab 01       	movw	r20, r22
     9fa:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__muluhisi3>
     9fe:	6e 83       	std	Y+6, r22	; 0x06
     a00:	7f 83       	std	Y+7, r23	; 0x07
     a02:	88 87       	std	Y+8, r24	; 0x08
     a04:	99 87       	std	Y+9, r25	; 0x09

00000a06 <.Loc.79>:
     a06:	0c e9       	ldi	r16, 0x9C	; 156
     a08:	1f ef       	ldi	r17, 0xFF	; 255
     a0a:	2f ef       	ldi	r18, 0xFF	; 255
     a0c:	3f ef       	ldi	r19, 0xFF	; 255
     a0e:	6e 81       	ldd	r22, Y+6	; 0x06
     a10:	7f 81       	ldd	r23, Y+7	; 0x07
     a12:	88 85       	ldd	r24, Y+8	; 0x08
     a14:	99 85       	ldd	r25, Y+9	; 0x09
     a16:	a9 01       	movw	r20, r18
     a18:	98 01       	movw	r18, r16
     a1a:	0e 94 a2 12 	call	0x2544	; 0x2544 <__divmodsi4>
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	ac 01       	movw	r20, r24
     a24:	bd 01       	movw	r22, r26

00000a26 <.Loc.80>:
     a26:	8a e8       	ldi	r24, 0x8A	; 138
     a28:	90 e0       	ldi	r25, 0x00	; 0

00000a2a <.Loc.81>:
     a2a:	9a 01       	movw	r18, r20
     a2c:	fc 01       	movw	r30, r24
     a2e:	31 83       	std	Z+1, r19	; 0x01
     a30:	20 83       	st	Z, r18

00000a32 <.L16>:
}
     a32:	00 00       	nop
     a34:	29 96       	adiw	r28, 0x09	; 9
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <__vector_35>:
#include "h_bridge_2.h"
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER3_OVF_vect){
     a4a:	1f 92       	push	r1
     a4c:	0f 92       	push	r0
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	0f 92       	push	r0
     a52:	11 24       	eor	r1, r1
     a54:	0b b6       	in	r0, 0x3b	; 59
     a56:	0f 92       	push	r0
     a58:	2f 93       	push	r18
     a5a:	8f 93       	push	r24
     a5c:	9f 93       	push	r25
     a5e:	ef 93       	push	r30
     a60:	ff 93       	push	r31
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62

00000a6a <.Loc.1>:
	if (OCR3A == 0 && OCR3B == 0){
     a6a:	88 e9       	ldi	r24, 0x98	; 152
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	fc 01       	movw	r30, r24
     a70:	80 81       	ld	r24, Z
     a72:	91 81       	ldd	r25, Z+1	; 0x01

00000a74 <.Loc.2>:
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	d1 f4       	brne	.+52     	; 0xaac <.L2>

00000a78 <.Loc.3>:
     a78:	8a e9       	ldi	r24, 0x9A	; 154
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	fc 01       	movw	r30, r24
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01

00000a82 <.Loc.4>:
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	99 f4       	brne	.+38     	; 0xaac <.L2>

00000a86 <.Loc.5>:
		port_R2 &= ~(1<<pin_R2);
     a86:	88 e0       	ldi	r24, 0x08	; 8
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 81       	ld	r18, Z

00000a8e <.Loc.6>:
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	91 e0       	ldi	r25, 0x01	; 1

00000a92 <.Loc.7>:
     a92:	2f 77       	andi	r18, 0x7F	; 127
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18

00000a98 <.Loc.8>:
		port_L2 &= ~(1<<pin_L2);
     a98:	88 e0       	ldi	r24, 0x08	; 8
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 81       	ld	r18, Z

00000aa0 <.Loc.9>:
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	91 e0       	ldi	r25, 0x01	; 1

00000aa4 <.Loc.10>:
     aa4:	2f 7b       	andi	r18, 0xBF	; 191
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18

00000aaa <.Loc.11>:
	}
	else if (OCR3B != 0){
		port_R2 &= ~(1<<pin_R2);
		port_L2 |= (1<<pin_L2);
	}
}
     aaa:	33 c0       	rjmp	.+102    	; 0xb12 <.L5>

00000aac <.L2>:
	else if (OCR3A != 0){
     aac:	88 e9       	ldi	r24, 0x98	; 152
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	fc 01       	movw	r30, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01

00000ab6 <.Loc.13>:
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	99 f0       	breq	.+38     	; 0xae0 <.L4>

00000aba <.Loc.14>:
		port_R2 |= (1<<pin_R2);
     aba:	88 e0       	ldi	r24, 0x08	; 8
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	fc 01       	movw	r30, r24
     ac0:	20 81       	ld	r18, Z
     ac2:	88 e0       	ldi	r24, 0x08	; 8
     ac4:	91 e0       	ldi	r25, 0x01	; 1

00000ac6 <.Loc.15>:
     ac6:	20 68       	ori	r18, 0x80	; 128
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18

00000acc <.Loc.16>:
		port_L2 &= ~(1<<pin_L2);
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 81       	ld	r18, Z

00000ad4 <.Loc.17>:
     ad4:	88 e0       	ldi	r24, 0x08	; 8
     ad6:	91 e0       	ldi	r25, 0x01	; 1

00000ad8 <.Loc.18>:
     ad8:	2f 7b       	andi	r18, 0xBF	; 191
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18

00000ade <.Loc.19>:
}
     ade:	19 c0       	rjmp	.+50     	; 0xb12 <.L5>

00000ae0 <.L4>:
	else if (OCR3B != 0){
     ae0:	8a e9       	ldi	r24, 0x9A	; 154
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	fc 01       	movw	r30, r24
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01

00000aea <.Loc.21>:
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	91 f0       	breq	.+36     	; 0xb12 <.L5>

00000aee <.Loc.22>:
		port_R2 &= ~(1<<pin_R2);
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	fc 01       	movw	r30, r24
     af4:	20 81       	ld	r18, Z

00000af6 <.Loc.23>:
     af6:	88 e0       	ldi	r24, 0x08	; 8
     af8:	91 e0       	ldi	r25, 0x01	; 1

00000afa <.Loc.24>:
     afa:	2f 77       	andi	r18, 0x7F	; 127
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18

00000b00 <.Loc.25>:
		port_L2 |= (1<<pin_L2);
     b00:	88 e0       	ldi	r24, 0x08	; 8
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	fc 01       	movw	r30, r24
     b06:	20 81       	ld	r18, Z
     b08:	88 e0       	ldi	r24, 0x08	; 8
     b0a:	91 e0       	ldi	r25, 0x01	; 1

00000b0c <.Loc.26>:
     b0c:	20 64       	ori	r18, 0x40	; 64
     b0e:	fc 01       	movw	r30, r24
     b10:	20 83       	st	Z, r18

00000b12 <.L5>:
}
     b12:	00 00       	nop
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0b be       	out	0x3b, r0	; 59
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     b30:	1f 92       	push	r1
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	0f 92       	push	r0
     b38:	11 24       	eor	r1, r1
     b3a:	0b b6       	in	r0, 0x3b	; 59
     b3c:	0f 92       	push	r0
     b3e:	2f 93       	push	r18
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	ef 93       	push	r30
     b46:	ff 93       	push	r31
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

00000b50 <.Loc.29>:
	if (OCR3A != 65535){
     b50:	88 e9       	ldi	r24, 0x98	; 152
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	fc 01       	movw	r30, r24
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01

00000b5a <.Loc.30>:
     b5a:	8f 3f       	cpi	r24, 0xFF	; 255
     b5c:	98 07       	cpc	r25, r24
     b5e:	49 f0       	breq	.+18     	; 0xb72 <.L8>

00000b60 <.Loc.31>:
		port_R2 &= ~(1<<pin_R2);
     b60:	88 e0       	ldi	r24, 0x08	; 8
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	fc 01       	movw	r30, r24
     b66:	20 81       	ld	r18, Z

00000b68 <.Loc.32>:
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	91 e0       	ldi	r25, 0x01	; 1

00000b6c <.Loc.33>:
     b6c:	2f 77       	andi	r18, 0x7F	; 127
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18

00000b72 <.L8>:
	}
}
     b72:	00 00       	nop
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	ff 91       	pop	r31
     b7a:	ef 91       	pop	r30
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0b be       	out	0x3b, r0	; 59
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	11 24       	eor	r1, r1
     b9a:	0b b6       	in	r0, 0x3b	; 59
     b9c:	0f 92       	push	r0
     b9e:	2f 93       	push	r18
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62

00000bb0 <.Loc.36>:
	if (OCR3B != 65535){
     bb0:	8a e9       	ldi	r24, 0x9A	; 154
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	fc 01       	movw	r30, r24
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01

00000bba <.Loc.37>:
     bba:	8f 3f       	cpi	r24, 0xFF	; 255
     bbc:	98 07       	cpc	r25, r24
     bbe:	49 f0       	breq	.+18     	; 0xbd2 <.L11>

00000bc0 <.Loc.38>:
		port_L2 &= ~(1<<pin_L2);
     bc0:	88 e0       	ldi	r24, 0x08	; 8
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 81       	ld	r18, Z

00000bc8 <.Loc.39>:
     bc8:	88 e0       	ldi	r24, 0x08	; 8
     bca:	91 e0       	ldi	r25, 0x01	; 1

00000bcc <.Loc.40>:
     bcc:	2f 7b       	andi	r18, 0xBF	; 191
     bce:	fc 01       	movw	r30, r24
     bd0:	20 83       	st	Z, r18

00000bd2 <.L11>:
	}
}
     bd2:	00 00       	nop
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	2f 91       	pop	r18
     be2:	0f 90       	pop	r0
     be4:	0b be       	out	0x3b, r0	; 59
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <init_motor_2>:

void init_motor_2(void)
{
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62

00000bf8 <.Loc.43>:
	// Pin outputs
	ddr_R2 |= (1<<pin_R2);
     bf8:	87 e0       	ldi	r24, 0x07	; 7
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 81       	ld	r18, Z
     c00:	87 e0       	ldi	r24, 0x07	; 7
     c02:	91 e0       	ldi	r25, 0x01	; 1

00000c04 <.Loc.44>:
     c04:	20 68       	ori	r18, 0x80	; 128
     c06:	fc 01       	movw	r30, r24
     c08:	20 83       	st	Z, r18

00000c0a <.Loc.45>:
	ddr_L2 |= (1<<pin_L2);
     c0a:	87 e0       	ldi	r24, 0x07	; 7
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	fc 01       	movw	r30, r24
     c10:	20 81       	ld	r18, Z
     c12:	87 e0       	ldi	r24, 0x07	; 7
     c14:	91 e0       	ldi	r25, 0x01	; 1

00000c16 <.Loc.46>:
     c16:	20 64       	ori	r18, 0x40	; 64
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18

00000c1c <.Loc.47>:

	// zekerheid laag
	port_R2 &= ~(1<<pin_R2);
     c1c:	88 e0       	ldi	r24, 0x08	; 8
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	fc 01       	movw	r30, r24
     c22:	20 81       	ld	r18, Z

00000c24 <.Loc.48>:
     c24:	88 e0       	ldi	r24, 0x08	; 8
     c26:	91 e0       	ldi	r25, 0x01	; 1

00000c28 <.Loc.49>:
     c28:	2f 77       	andi	r18, 0x7F	; 127
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18

00000c2e <.Loc.50>:
	port_L2 &= ~(1<<pin_L2);
     c2e:	88 e0       	ldi	r24, 0x08	; 8
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	fc 01       	movw	r30, r24
     c34:	20 81       	ld	r18, Z

00000c36 <.Loc.51>:
     c36:	88 e0       	ldi	r24, 0x08	; 8
     c38:	91 e0       	ldi	r25, 0x01	; 1

00000c3a <.Loc.52>:
     c3a:	2f 7b       	andi	r18, 0xBF	; 191
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18

00000c40 <.Loc.53>:

	// prescale 64
	TCCR3A = 0;
     c40:	80 e9       	ldi	r24, 0x90	; 144
     c42:	90 e0       	ldi	r25, 0x00	; 0

00000c44 <.Loc.54>:
     c44:	fc 01       	movw	r30, r24
     c46:	10 82       	st	Z, r1

00000c48 <.Loc.55>:
	TCCR3B = (0<<CS32) | (0<<CS31) | (1<<CS30);
     c48:	81 e9       	ldi	r24, 0x91	; 145
     c4a:	90 e0       	ldi	r25, 0x00	; 0

00000c4c <.Loc.56>:
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18

00000c52 <.Loc.57>:

	// standaard 0
	OCR3A = 0;
     c52:	88 e9       	ldi	r24, 0x98	; 152
     c54:	90 e0       	ldi	r25, 0x00	; 0

00000c56 <.Loc.58>:
     c56:	fc 01       	movw	r30, r24
     c58:	11 82       	std	Z+1, r1	; 0x01
     c5a:	10 82       	st	Z, r1

00000c5c <.Loc.59>:
	OCR3B = 0;
     c5c:	8a e9       	ldi	r24, 0x9A	; 154
     c5e:	90 e0       	ldi	r25, 0x00	; 0

00000c60 <.Loc.60>:
     c60:	fc 01       	movw	r30, r24
     c62:	11 82       	std	Z+1, r1	; 0x01
     c64:	10 82       	st	Z, r1

00000c66 <.Loc.61>:
	TIMSK3 = (1<<OCIE3B) | (1<<OCIE3A) | (1<<TOIE3);
     c66:	81 e7       	ldi	r24, 0x71	; 113
     c68:	90 e0       	ldi	r25, 0x00	; 0

00000c6a <.Loc.62>:
     c6a:	27 e0       	ldi	r18, 0x07	; 7
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18

00000c70 <.Loc.63>:
	Motor_2_set_power(0);
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000c76 <.Loc.64>:
}
     c76:	00 00       	nop
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <Motor_2_set_power>:

void Motor_2_set_power(signed char power)
{
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <L0^A>

00000c88 <L0^A>:
     c88:	00 d0       	rcall	.+0      	; 0xc8a <L0^A>

00000c8a <L0^A>:
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <L0^A>

00000c8c <L0^A>:
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	89 83       	std	Y+1, r24	; 0x01

00000c92 <.Loc.66>:
	if (power >= -100 && power <= 100){
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	8c 39       	cpi	r24, 0x9C	; 156
     c96:	0c f4       	brge	.+2      	; 0xc9a <.Loc.67>

00000c98 <L0^A>:
     c98:	61 c0       	rjmp	.+194    	; 0xd5c <.L16>

00000c9a <.Loc.67>:
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	84 36       	cpi	r24, 0x64	; 100
     c9e:	11 f0       	breq	.+4      	; 0xca4 <.Loc.68>

00000ca0 <L0^A>:
     ca0:	0c f0       	brlt	.+2      	; 0xca4 <.Loc.68>

00000ca2 <L0^A>:
     ca2:	5c c0       	rjmp	.+184    	; 0xd5c <.L16>

00000ca4 <.Loc.68>:
		if (power >= 0){
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	88 23       	and	r24, r24
     ca8:	6c f1       	brlt	.+90     	; 0xd04 <.L15>

00000caa <.Loc.69>:
			OCR3B = 0;
     caa:	8a e9       	ldi	r24, 0x9A	; 154
     cac:	90 e0       	ldi	r25, 0x00	; 0

00000cae <.Loc.70>:
     cae:	fc 01       	movw	r30, r24
     cb0:	11 82       	std	Z+1, r1	; 0x01
     cb2:	10 82       	st	Z, r1

00000cb4 <.Loc.71>:
			OCR3A = (65535*power)/100;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	48 2f       	mov	r20, r24
     cb8:	88 0f       	add	r24, r24
     cba:	55 0b       	sbc	r21, r21
     cbc:	66 0b       	sbc	r22, r22
     cbe:	77 0b       	sbc	r23, r23
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
     cc4:	dc 01       	movw	r26, r24
     cc6:	9a 01       	movw	r18, r20
     cc8:	ab 01       	movw	r20, r22
     cca:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__muluhisi3>
     cce:	6a 83       	std	Y+2, r22	; 0x02
     cd0:	7b 83       	std	Y+3, r23	; 0x03
     cd2:	8c 83       	std	Y+4, r24	; 0x04
     cd4:	9d 83       	std	Y+5, r25	; 0x05

00000cd6 <.Loc.72>:
     cd6:	04 e6       	ldi	r16, 0x64	; 100
     cd8:	10 e0       	ldi	r17, 0x00	; 0
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	6a 81       	ldd	r22, Y+2	; 0x02
     ce0:	7b 81       	ldd	r23, Y+3	; 0x03
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	a9 01       	movw	r20, r18
     ce8:	98 01       	movw	r18, r16
     cea:	0e 94 a2 12 	call	0x2544	; 0x2544 <__divmodsi4>
     cee:	da 01       	movw	r26, r20
     cf0:	c9 01       	movw	r24, r18
     cf2:	ac 01       	movw	r20, r24
     cf4:	bd 01       	movw	r22, r26

00000cf6 <.Loc.73>:
     cf6:	88 e9       	ldi	r24, 0x98	; 152
     cf8:	90 e0       	ldi	r25, 0x00	; 0

00000cfa <.Loc.74>:
     cfa:	9a 01       	movw	r18, r20
     cfc:	fc 01       	movw	r30, r24
     cfe:	31 83       	std	Z+1, r19	; 0x01
     d00:	20 83       	st	Z, r18

00000d02 <.Loc.75>:
		else {
			OCR3A = 0;
			OCR3B = (65535*power)/-100;
		}
	}
}
     d02:	2c c0       	rjmp	.+88     	; 0xd5c <.L16>

00000d04 <.L15>:
			OCR3A = 0;
     d04:	88 e9       	ldi	r24, 0x98	; 152
     d06:	90 e0       	ldi	r25, 0x00	; 0

00000d08 <.Loc.77>:
     d08:	fc 01       	movw	r30, r24
     d0a:	11 82       	std	Z+1, r1	; 0x01
     d0c:	10 82       	st	Z, r1

00000d0e <.Loc.78>:
			OCR3B = (65535*power)/-100;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	48 2f       	mov	r20, r24
     d12:	88 0f       	add	r24, r24
     d14:	55 0b       	sbc	r21, r21
     d16:	66 0b       	sbc	r22, r22
     d18:	77 0b       	sbc	r23, r23
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	9f ef       	ldi	r25, 0xFF	; 255
     d1e:	dc 01       	movw	r26, r24
     d20:	9a 01       	movw	r18, r20
     d22:	ab 01       	movw	r20, r22
     d24:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__muluhisi3>
     d28:	6e 83       	std	Y+6, r22	; 0x06
     d2a:	7f 83       	std	Y+7, r23	; 0x07
     d2c:	88 87       	std	Y+8, r24	; 0x08
     d2e:	99 87       	std	Y+9, r25	; 0x09

00000d30 <.Loc.79>:
     d30:	0c e9       	ldi	r16, 0x9C	; 156
     d32:	1f ef       	ldi	r17, 0xFF	; 255
     d34:	2f ef       	ldi	r18, 0xFF	; 255
     d36:	3f ef       	ldi	r19, 0xFF	; 255
     d38:	6e 81       	ldd	r22, Y+6	; 0x06
     d3a:	7f 81       	ldd	r23, Y+7	; 0x07
     d3c:	88 85       	ldd	r24, Y+8	; 0x08
     d3e:	99 85       	ldd	r25, Y+9	; 0x09
     d40:	a9 01       	movw	r20, r18
     d42:	98 01       	movw	r18, r16
     d44:	0e 94 a2 12 	call	0x2544	; 0x2544 <__divmodsi4>
     d48:	da 01       	movw	r26, r20
     d4a:	c9 01       	movw	r24, r18
     d4c:	ac 01       	movw	r20, r24
     d4e:	bd 01       	movw	r22, r26

00000d50 <.Loc.80>:
     d50:	8a e9       	ldi	r24, 0x9A	; 154
     d52:	90 e0       	ldi	r25, 0x00	; 0

00000d54 <.Loc.81>:
     d54:	9a 01       	movw	r18, r20
     d56:	fc 01       	movw	r30, r24
     d58:	31 83       	std	Z+1, r19	; 0x01
     d5a:	20 83       	st	Z, r18

00000d5c <.L16>:
}
     d5c:	00 00       	nop
     d5e:	29 96       	adiw	r28, 0x09	; 9
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <main>:
*/



int main(void)
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	c6 55       	subi	r28, 0x56	; 86
     d7e:	d1 09       	sbc	r29, r1
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61

00000d8a <.Loc.1>:
    init();
     d8a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <init>

00000d8e <.Loc.2>:
    init_display_meneer();
     d8e:	0e 94 97 0a 	call	0x152e	; 0x152e <init_display_meneer>

00000d92 <.Loc.3>:
    int VolgModus = 0;
     d92:	1e 82       	std	Y+6, r1	; 0x06
     d94:	1d 82       	std	Y+5, r1	; 0x05

00000d96 <.Loc.4>:
    int KolommenModus = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	98 87       	std	Y+8, r25	; 0x08
     d9c:	8f 83       	std	Y+7, r24	; 0x07

00000d9e <.Loc.5>:

    int VolgTarget = 100;
     d9e:	84 e6       	ldi	r24, 0x64	; 100
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9a 87       	std	Y+10, r25	; 0x0a
     da4:	89 87       	std	Y+9, r24	; 0x09

00000da6 <.Loc.6>:
    float CurrentHeading = 360.0;
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a4 eb       	ldi	r26, 0xB4	; 180
     dac:	b3 e4       	ldi	r27, 0x43	; 67
     dae:	89 83       	std	Y+1, r24	; 0x01
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	ab 83       	std	Y+3, r26	; 0x03
     db4:	bc 83       	std	Y+4, r27	; 0x04

00000db6 <.Loc.7>:
    int TargetHeading = 360;
     db6:	88 e6       	ldi	r24, 0x68	; 104
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	9c 87       	std	Y+12, r25	; 0x0c
     dbc:	8b 87       	std	Y+11, r24	; 0x0b

00000dbe <.Loc.8>:
    int Afstand = 0;
     dbe:	1e 86       	std	Y+14, r1	; 0x0e
     dc0:	1d 86       	std	Y+13, r1	; 0x0d

00000dc2 <.Loc.9>:
    int Difference =0;
     dc2:	18 8a       	std	Y+16, r1	; 0x10
     dc4:	1f 86       	std	Y+15, r1	; 0x0f

00000dc6 <.Loc.10>:
    int HeadingDifference = 0;
     dc6:	1a 8a       	std	Y+18, r1	; 0x12
     dc8:	19 8a       	std	Y+17, r1	; 0x11

00000dca <.Loc.11>:

    int CurrentKolom = 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9c 8b       	std	Y+20, r25	; 0x14
     dd0:	8b 8b       	std	Y+19, r24	; 0x13

00000dd2 <.Loc.12>:

    int printgetal;
    DDRB |= ((1<<PB7) | (1<<PB6));
     dd2:	84 e2       	ldi	r24, 0x24	; 36
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	dc 01       	movw	r26, r24
     dd8:	2c 91       	ld	r18, X
     dda:	84 e2       	ldi	r24, 0x24	; 36
     ddc:	90 e0       	ldi	r25, 0x00	; 0

00000dde <.Loc.13>:
     dde:	20 6c       	ori	r18, 0xC0	; 192
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18

00000de4 <.Loc.14>:
    PORTB |= ((1<<PB7) | (1<<PB6));
     de4:	85 e2       	ldi	r24, 0x25	; 37
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	dc 01       	movw	r26, r24
     dea:	2c 91       	ld	r18, X
     dec:	85 e2       	ldi	r24, 0x25	; 37
     dee:	90 e0       	ldi	r25, 0x00	; 0

00000df0 <.Loc.15>:
     df0:	20 6c       	ori	r18, 0xC0	; 192
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18

00000df6 <.Loc.16>:
    DDRE |= (1<<PE5);
     df6:	8d e2       	ldi	r24, 0x2D	; 45
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	dc 01       	movw	r26, r24
     dfc:	2c 91       	ld	r18, X
     dfe:	8d e2       	ldi	r24, 0x2D	; 45
     e00:	90 e0       	ldi	r25, 0x00	; 0

00000e02 <.Loc.17>:
     e02:	20 62       	ori	r18, 0x20	; 32
     e04:	fc 01       	movw	r30, r24
     e06:	20 83       	st	Z, r18

00000e08 <.Loc.18>:
    PORTE |= (1<<PE5);
     e08:	8e e2       	ldi	r24, 0x2E	; 46
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	dc 01       	movw	r26, r24
     e0e:	2c 91       	ld	r18, X
     e10:	8e e2       	ldi	r24, 0x2E	; 46
     e12:	90 e0       	ldi	r25, 0x00	; 0

00000e14 <.Loc.19>:
     e14:	20 62       	ori	r18, 0x20	; 32
     e16:	fc 01       	movw	r30, r24
     e18:	20 83       	st	Z, r18

00000e1a <.Loc.20>:
                LightSwap();
                VolgModus = 0;
                KolommenModus = 1;
            }
        }*/
        while(VolgModus == 1){
     e1a:	ed c0       	rjmp	.+474    	; 0xff6 <.L2>

00000e1c <.L12>:
            /*if(RedSwitch()){
                VolgModus = 0;
                KolommenModus = 0;
            }*/

            Afstand = GetDistanceFront();
     e1c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <GetDistanceFront>
     e20:	9e 87       	std	Y+14, r25	; 0x0e
     e22:	8d 87       	std	Y+13, r24	; 0x0d

00000e24 <.Loc.22>:
            Difference = Afstand - VolgTarget;
     e24:	2d 85       	ldd	r18, Y+13	; 0x0d
     e26:	3e 85       	ldd	r19, Y+14	; 0x0e
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	a9 01       	movw	r20, r18
     e2e:	48 1b       	sub	r20, r24
     e30:	59 0b       	sbc	r21, r25
     e32:	ca 01       	movw	r24, r20
     e34:	98 8b       	std	Y+16, r25	; 0x10
     e36:	8f 87       	std	Y+15, r24	; 0x0f

00000e38 <.Loc.23>:
            display_getal(Afstand);
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <display_getal>

00000e40 <.Loc.24>:

            CurrentHeading = UpdateHeading(CurrentHeading);
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	ab 81       	ldd	r26, Y+3	; 0x03
     e46:	bc 81       	ldd	r27, Y+4	; 0x04
     e48:	8b a7       	std	Y+43, r24	; 0x2b
     e4a:	9c a7       	std	Y+44, r25	; 0x2c
     e4c:	ad a7       	std	Y+45, r26	; 0x2d
     e4e:	be a7       	std	Y+46, r27	; 0x2e
     e50:	6b a5       	ldd	r22, Y+43	; 0x2b
     e52:	7c a5       	ldd	r23, Y+44	; 0x2c
     e54:	8d a5       	ldd	r24, Y+45	; 0x2d
     e56:	9e a5       	ldd	r25, Y+46	; 0x2e
     e58:	0e 94 8e 02 	call	0x51c	; 0x51c <UpdateHeading>
     e5c:	6f a7       	std	Y+47, r22	; 0x2f
     e5e:	78 ab       	std	Y+48, r23	; 0x30
     e60:	89 ab       	std	Y+49, r24	; 0x31
     e62:	9a ab       	std	Y+50, r25	; 0x32
     e64:	2f a5       	ldd	r18, Y+47	; 0x2f
     e66:	38 a9       	ldd	r19, Y+48	; 0x30
     e68:	49 a9       	ldd	r20, Y+49	; 0x31
     e6a:	5a a9       	ldd	r21, Y+50	; 0x32
     e6c:	29 83       	std	Y+1, r18	; 0x01
     e6e:	3a 83       	std	Y+2, r19	; 0x02
     e70:	4b 83       	std	Y+3, r20	; 0x03
     e72:	5c 83       	std	Y+4, r21	; 0x04

00000e74 <.Loc.25>:
            HeadingDifference = TargetHeading - CurrentHeading;
     e74:	8b 85       	ldd	r24, Y+11	; 0x0b
     e76:	9c 85       	ldd	r25, Y+12	; 0x0c
     e78:	9c 01       	movw	r18, r24
     e7a:	99 0f       	add	r25, r25
     e7c:	44 0b       	sbc	r20, r20
     e7e:	55 0b       	sbc	r21, r21
     e80:	2b ab       	std	Y+51, r18	; 0x33
     e82:	3c ab       	std	Y+52, r19	; 0x34
     e84:	4d ab       	std	Y+53, r20	; 0x35
     e86:	5e ab       	std	Y+54, r21	; 0x36
     e88:	6b a9       	ldd	r22, Y+51	; 0x33
     e8a:	7c a9       	ldd	r23, Y+52	; 0x34
     e8c:	8d a9       	ldd	r24, Y+53	; 0x35
     e8e:	9e a9       	ldd	r25, Y+54	; 0x36
     e90:	0e 94 2d 14 	call	0x285a	; 0x285a <__floatsisf>
     e94:	6b 8f       	std	Y+27, r22	; 0x1b
     e96:	7c 8f       	std	Y+28, r23	; 0x1c
     e98:	8d 8f       	std	Y+29, r24	; 0x1d
     e9a:	9e 8f       	std	Y+30, r25	; 0x1e
     e9c:	29 81       	ldd	r18, Y+1	; 0x01
     e9e:	3a 81       	ldd	r19, Y+2	; 0x02
     ea0:	4b 81       	ldd	r20, Y+3	; 0x03
     ea2:	5c 81       	ldd	r21, Y+4	; 0x04
     ea4:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ea6:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eac:	0e 94 11 13 	call	0x2622	; 0x2622 <__subsf3>
     eb0:	6f ab       	std	Y+55, r22	; 0x37
     eb2:	78 af       	std	Y+56, r23	; 0x38
     eb4:	89 af       	std	Y+57, r24	; 0x39
     eb6:	9a af       	std	Y+58, r25	; 0x3a
     eb8:	8f a9       	ldd	r24, Y+55	; 0x37
     eba:	98 ad       	ldd	r25, Y+56	; 0x38
     ebc:	a9 ad       	ldd	r26, Y+57	; 0x39
     ebe:	ba ad       	ldd	r27, Y+58	; 0x3a
     ec0:	8f 8f       	std	Y+31, r24	; 0x1f
     ec2:	98 a3       	std	Y+32, r25	; 0x20
     ec4:	a9 a3       	std	Y+33, r26	; 0x21
     ec6:	ba a3       	std	Y+34, r27	; 0x22

00000ec8 <.Loc.26>:
     ec8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     eca:	78 a1       	ldd	r23, Y+32	; 0x20
     ecc:	89 a1       	ldd	r24, Y+33	; 0x21
     ece:	9a a1       	ldd	r25, Y+34	; 0x22
     ed0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fixsfsi>
     ed4:	6b af       	std	Y+59, r22	; 0x3b
     ed6:	7c af       	std	Y+60, r23	; 0x3c
     ed8:	8d af       	std	Y+61, r24	; 0x3d
     eda:	9e af       	std	Y+62, r25	; 0x3e
     edc:	ab ad       	ldd	r26, Y+59	; 0x3b
     ede:	bc ad       	ldd	r27, Y+60	; 0x3c
     ee0:	ba 8b       	std	Y+18, r27	; 0x12
     ee2:	a9 8b       	std	Y+17, r26	; 0x11

00000ee4 <.Loc.27>:

            if (HeadingDifference > 3){
     ee4:	89 89       	ldd	r24, Y+17	; 0x11
     ee6:	9a 89       	ldd	r25, Y+18	; 0x12
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	39 f0       	breq	.+14     	; 0xefc <.L3>
     eee:	34 f0       	brlt	.+12     	; 0xefc <.L3>

00000ef0 <.Loc.28>:
                Motor_1_set_power(35);
     ef0:	83 e2       	ldi	r24, 0x23	; 35
     ef2:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000ef6 <.Loc.29>:
                Motor_2_set_power(25);
     ef6:	89 e1       	ldi	r24, 0x19	; 25
     ef8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000efc <.L3>:
            }
            if (HeadingDifference < -3){
     efc:	89 89       	ldd	r24, Y+17	; 0x11
     efe:	9a 89       	ldd	r25, Y+18	; 0x12
     f00:	8d 3f       	cpi	r24, 0xFD	; 253
     f02:	bf ef       	ldi	r27, 0xFF	; 255
     f04:	9b 07       	cpc	r25, r27
     f06:	34 f4       	brge	.+12     	; 0xf14 <.L4>

00000f08 <.Loc.31>:
                Motor_1_set_power(25);
     f08:	89 e1       	ldi	r24, 0x19	; 25
     f0a:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000f0e <.Loc.32>:
                Motor_2_set_power(35);
     f0e:	83 e2       	ldi	r24, 0x23	; 35
     f10:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000f14 <.L4>:
            }
            if (Difference > 200){
     f14:	8f 85       	ldd	r24, Y+15	; 0x0f
     f16:	98 89       	ldd	r25, Y+16	; 0x10
     f18:	88 3c       	cpi	r24, 0xC8	; 200
     f1a:	91 05       	cpc	r25, r1
     f1c:	39 f0       	breq	.+14     	; 0xf2c <.L5>
     f1e:	34 f0       	brlt	.+12     	; 0xf2c <.L5>

00000f20 <.Loc.34>:
                Motor_1_set_power(35);
     f20:	83 e2       	ldi	r24, 0x23	; 35
     f22:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000f26 <.Loc.35>:
                Motor_2_set_power(35);
     f26:	83 e2       	ldi	r24, 0x23	; 35
     f28:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000f2c <.L5>:
            }
            if (Difference > 120 && Difference < 200){
     f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2e:	98 89       	ldd	r25, Y+16	; 0x10
     f30:	88 37       	cpi	r24, 0x78	; 120
     f32:	91 05       	cpc	r25, r1
     f34:	69 f0       	breq	.+26     	; 0xf50 <.L6>
     f36:	64 f0       	brlt	.+24     	; 0xf50 <.L6>

00000f38 <.Loc.37>:
     f38:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3a:	98 89       	ldd	r25, Y+16	; 0x10
     f3c:	87 3c       	cpi	r24, 0xC7	; 199
     f3e:	91 05       	cpc	r25, r1
     f40:	09 f0       	breq	.+2      	; 0xf44 <.Loc.38>

00000f42 <L0^A>:
     f42:	34 f4       	brge	.+12     	; 0xf50 <.L6>

00000f44 <.Loc.38>:
                Motor_1_set_power(22);
     f44:	86 e1       	ldi	r24, 0x16	; 22
     f46:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000f4a <.Loc.39>:
                Motor_2_set_power(22);
     f4a:	86 e1       	ldi	r24, 0x16	; 22
     f4c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000f50 <.L6>:
            }
            if (Difference > 60 && Difference < 120){
     f50:	8f 85       	ldd	r24, Y+15	; 0x0f
     f52:	98 89       	ldd	r25, Y+16	; 0x10
     f54:	8c 33       	cpi	r24, 0x3C	; 60
     f56:	91 05       	cpc	r25, r1
     f58:	69 f0       	breq	.+26     	; 0xf74 <.L7>
     f5a:	64 f0       	brlt	.+24     	; 0xf74 <.L7>

00000f5c <.Loc.41>:
     f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5e:	98 89       	ldd	r25, Y+16	; 0x10
     f60:	87 37       	cpi	r24, 0x77	; 119
     f62:	91 05       	cpc	r25, r1
     f64:	09 f0       	breq	.+2      	; 0xf68 <.Loc.42>

00000f66 <L0^A>:
     f66:	34 f4       	brge	.+12     	; 0xf74 <.L7>

00000f68 <.Loc.42>:
                Motor_1_set_power(18);
     f68:	82 e1       	ldi	r24, 0x12	; 18
     f6a:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000f6e <.Loc.43>:
                Motor_2_set_power(18);
     f6e:	82 e1       	ldi	r24, 0x12	; 18
     f70:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000f74 <.L7>:
            }
            if (Difference > 20 && Difference < 60){
     f74:	8f 85       	ldd	r24, Y+15	; 0x0f
     f76:	98 89       	ldd	r25, Y+16	; 0x10
     f78:	84 31       	cpi	r24, 0x14	; 20
     f7a:	91 05       	cpc	r25, r1
     f7c:	69 f0       	breq	.+26     	; 0xf98 <.L8>
     f7e:	64 f0       	brlt	.+24     	; 0xf98 <.L8>

00000f80 <.Loc.45>:
     f80:	8f 85       	ldd	r24, Y+15	; 0x0f
     f82:	98 89       	ldd	r25, Y+16	; 0x10
     f84:	8b 33       	cpi	r24, 0x3B	; 59
     f86:	91 05       	cpc	r25, r1
     f88:	09 f0       	breq	.+2      	; 0xf8c <.Loc.46>

00000f8a <L0^A>:
     f8a:	34 f4       	brge	.+12     	; 0xf98 <.L8>

00000f8c <.Loc.46>:
                Motor_1_set_power(15);
     f8c:	8f e0       	ldi	r24, 0x0F	; 15
     f8e:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000f92 <.Loc.47>:
                Motor_2_set_power(15);
     f92:	8f e0       	ldi	r24, 0x0F	; 15
     f94:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000f98 <.L8>:
            }
            if (Difference > 0 && Difference < 20){
     f98:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9a:	98 89       	ldd	r25, Y+16	; 0x10
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	69 f0       	breq	.+26     	; 0xfba <.L9>
     fa0:	64 f0       	brlt	.+24     	; 0xfba <.L9>

00000fa2 <.Loc.49>:
     fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa4:	98 89       	ldd	r25, Y+16	; 0x10
     fa6:	83 31       	cpi	r24, 0x13	; 19
     fa8:	91 05       	cpc	r25, r1
     faa:	09 f0       	breq	.+2      	; 0xfae <.Loc.50>

00000fac <L0^A>:
     fac:	34 f4       	brge	.+12     	; 0xfba <.L9>

00000fae <.Loc.50>:
                Motor_1_set_power(12);
     fae:	8c e0       	ldi	r24, 0x0C	; 12
     fb0:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000fb4 <.Loc.51>:
                Motor_2_set_power(12);
     fb4:	8c e0       	ldi	r24, 0x0C	; 12
     fb6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000fba <.L9>:
            }
            if (Difference < -5){
     fba:	8f 85       	ldd	r24, Y+15	; 0x0f
     fbc:	98 89       	ldd	r25, Y+16	; 0x10
     fbe:	8b 3f       	cpi	r24, 0xFB	; 251
     fc0:	ef ef       	ldi	r30, 0xFF	; 255
     fc2:	9e 07       	cpc	r25, r30
     fc4:	34 f4       	brge	.+12     	; 0xfd2 <.L10>

00000fc6 <.Loc.53>:
                Motor_1_set_power(-18);
     fc6:	8e ee       	ldi	r24, 0xEE	; 238
     fc8:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000fcc <.Loc.54>:
                Motor_2_set_power(-18);
     fcc:	8e ee       	ldi	r24, 0xEE	; 238
     fce:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000fd2 <.L10>:
            }
            if ( -5 < Difference && Difference < 5){
     fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd4:	98 89       	ldd	r25, Y+16	; 0x10
     fd6:	8c 3f       	cpi	r24, 0xFC	; 252
     fd8:	ff ef       	ldi	r31, 0xFF	; 255
     fda:	9f 07       	cpc	r25, r31
     fdc:	64 f0       	brlt	.+24     	; 0xff6 <.L2>

00000fde <.Loc.56>:
     fde:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe0:	98 89       	ldd	r25, Y+16	; 0x10
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f0       	breq	.+2      	; 0xfea <.Loc.57>

00000fe8 <L0^A>:
     fe8:	34 f4       	brge	.+12     	; 0xff6 <.L2>

00000fea <.Loc.57>:
                Motor_1_set_power(0);
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000ff0 <.Loc.58>:
                Motor_2_set_power(0);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000ff6 <.L2>:
        while(VolgModus == 1){
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <.Loc.60>

00001000 <L0^A>:
    1000:	0d cf       	rjmp	.-486    	; 0xe1c <.L12>

00001002 <.Loc.60>:
            }

        }
        while(KolommenModus == 1){
    1002:	ec c0       	rjmp	.+472    	; 0x11dc <.L13>

00001004 <.L22>:
            /*if(RedSwitch()){
                VolgModus = 0;
                KolommenModus = 0;
            }*/

            int AfstandLinks = GetDistanceLeft();
    1004:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GetDistanceLeft>
    1008:	9e 8b       	std	Y+22, r25	; 0x16
    100a:	8d 8b       	std	Y+21, r24	; 0x15

0000100c <.Loc.62>:
            int AfstandRechts = GetDistanceRight();
    100c:	0e 94 88 10 	call	0x2110	; 0x2110 <GetDistanceRight>
    1010:	98 8f       	std	Y+24, r25	; 0x18
    1012:	8f 8b       	std	Y+23, r24	; 0x17

00001014 <.Loc.63>:
            CurrentHeading = UpdateHeading(CurrentHeading);
    1014:	29 81       	ldd	r18, Y+1	; 0x01
    1016:	3a 81       	ldd	r19, Y+2	; 0x02
    1018:	4b 81       	ldd	r20, Y+3	; 0x03
    101a:	5c 81       	ldd	r21, Y+4	; 0x04
    101c:	23 96       	adiw	r28, 0x03	; 3
    101e:	2c af       	std	Y+60, r18	; 0x3c
    1020:	3d af       	std	Y+61, r19	; 0x3d
    1022:	4e af       	std	Y+62, r20	; 0x3e
    1024:	5f af       	std	Y+63, r21	; 0x3f
    1026:	23 97       	sbiw	r28, 0x03	; 3
    1028:	23 96       	adiw	r28, 0x03	; 3
    102a:	6c ad       	ldd	r22, Y+60	; 0x3c
    102c:	7d ad       	ldd	r23, Y+61	; 0x3d
    102e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1030:	9f ad       	ldd	r25, Y+63	; 0x3f
    1032:	23 97       	sbiw	r28, 0x03	; 3
    1034:	0e 94 8e 02 	call	0x51c	; 0x51c <UpdateHeading>
    1038:	27 96       	adiw	r28, 0x07	; 7
    103a:	6c af       	std	Y+60, r22	; 0x3c
    103c:	7d af       	std	Y+61, r23	; 0x3d
    103e:	8e af       	std	Y+62, r24	; 0x3e
    1040:	9f af       	std	Y+63, r25	; 0x3f
    1042:	27 97       	sbiw	r28, 0x07	; 7
    1044:	27 96       	adiw	r28, 0x07	; 7
    1046:	8c ad       	ldd	r24, Y+60	; 0x3c
    1048:	9d ad       	ldd	r25, Y+61	; 0x3d
    104a:	ae ad       	ldd	r26, Y+62	; 0x3e
    104c:	bf ad       	ldd	r27, Y+63	; 0x3f
    104e:	27 97       	sbiw	r28, 0x07	; 7
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	ab 83       	std	Y+3, r26	; 0x03
    1056:	bc 83       	std	Y+4, r27	; 0x04

00001058 <.Loc.64>:
            printgetal = (int)CurrentHeading;
    1058:	69 81       	ldd	r22, Y+1	; 0x01
    105a:	7a 81       	ldd	r23, Y+2	; 0x02
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fixsfsi>
    1064:	2b 96       	adiw	r28, 0x0b	; 11
    1066:	6c af       	std	Y+60, r22	; 0x3c
    1068:	7d af       	std	Y+61, r23	; 0x3d
    106a:	8e af       	std	Y+62, r24	; 0x3e
    106c:	9f af       	std	Y+63, r25	; 0x3f
    106e:	2b 97       	sbiw	r28, 0x0b	; 11
    1070:	29 96       	adiw	r28, 0x09	; 9
    1072:	ae ad       	ldd	r26, Y+62	; 0x3e
    1074:	bf ad       	ldd	r27, Y+63	; 0x3f
    1076:	29 97       	sbiw	r28, 0x09	; 9
    1078:	ba 8f       	std	Y+26, r27	; 0x1a
    107a:	a9 8f       	std	Y+25, r26	; 0x19

0000107c <.Loc.65>:
            display_getal(printgetal);
    107c:	89 8d       	ldd	r24, Y+25	; 0x19
    107e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1080:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <display_getal>

00001084 <.Loc.66>:
            Difference = TargetHeading - CurrentHeading;
    1084:	8b 85       	ldd	r24, Y+11	; 0x0b
    1086:	9c 85       	ldd	r25, Y+12	; 0x0c
    1088:	9c 01       	movw	r18, r24
    108a:	99 0f       	add	r25, r25
    108c:	44 0b       	sbc	r20, r20
    108e:	55 0b       	sbc	r21, r21
    1090:	2f 96       	adiw	r28, 0x0f	; 15
    1092:	2c af       	std	Y+60, r18	; 0x3c
    1094:	3d af       	std	Y+61, r19	; 0x3d
    1096:	4e af       	std	Y+62, r20	; 0x3e
    1098:	5f af       	std	Y+63, r21	; 0x3f
    109a:	2f 97       	sbiw	r28, 0x0f	; 15
    109c:	2f 96       	adiw	r28, 0x0f	; 15
    109e:	6c ad       	ldd	r22, Y+60	; 0x3c
    10a0:	7d ad       	ldd	r23, Y+61	; 0x3d
    10a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    10a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    10a6:	2f 97       	sbiw	r28, 0x0f	; 15
    10a8:	0e 94 2d 14 	call	0x285a	; 0x285a <__floatsisf>
    10ac:	6b a3       	std	Y+35, r22	; 0x23
    10ae:	7c a3       	std	Y+36, r23	; 0x24
    10b0:	8d a3       	std	Y+37, r24	; 0x25
    10b2:	9e a3       	std	Y+38, r25	; 0x26
    10b4:	29 81       	ldd	r18, Y+1	; 0x01
    10b6:	3a 81       	ldd	r19, Y+2	; 0x02
    10b8:	4b 81       	ldd	r20, Y+3	; 0x03
    10ba:	5c 81       	ldd	r21, Y+4	; 0x04
    10bc:	6b a1       	ldd	r22, Y+35	; 0x23
    10be:	7c a1       	ldd	r23, Y+36	; 0x24
    10c0:	8d a1       	ldd	r24, Y+37	; 0x25
    10c2:	9e a1       	ldd	r25, Y+38	; 0x26
    10c4:	0e 94 11 13 	call	0x2622	; 0x2622 <__subsf3>
    10c8:	63 96       	adiw	r28, 0x13	; 19
    10ca:	6c af       	std	Y+60, r22	; 0x3c
    10cc:	7d af       	std	Y+61, r23	; 0x3d
    10ce:	8e af       	std	Y+62, r24	; 0x3e
    10d0:	9f af       	std	Y+63, r25	; 0x3f
    10d2:	63 97       	sbiw	r28, 0x13	; 19
    10d4:	63 96       	adiw	r28, 0x13	; 19
    10d6:	8c ad       	ldd	r24, Y+60	; 0x3c
    10d8:	9d ad       	ldd	r25, Y+61	; 0x3d
    10da:	ae ad       	ldd	r26, Y+62	; 0x3e
    10dc:	bf ad       	ldd	r27, Y+63	; 0x3f
    10de:	63 97       	sbiw	r28, 0x13	; 19
    10e0:	8f a3       	std	Y+39, r24	; 0x27
    10e2:	98 a7       	std	Y+40, r25	; 0x28
    10e4:	a9 a7       	std	Y+41, r26	; 0x29
    10e6:	ba a7       	std	Y+42, r27	; 0x2a

000010e8 <.Loc.67>:
    10e8:	6f a1       	ldd	r22, Y+39	; 0x27
    10ea:	78 a5       	ldd	r23, Y+40	; 0x28
    10ec:	89 a5       	ldd	r24, Y+41	; 0x29
    10ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fixsfsi>
    10f4:	67 96       	adiw	r28, 0x17	; 23
    10f6:	6c af       	std	Y+60, r22	; 0x3c
    10f8:	7d af       	std	Y+61, r23	; 0x3d
    10fa:	8e af       	std	Y+62, r24	; 0x3e
    10fc:	9f af       	std	Y+63, r25	; 0x3f
    10fe:	67 97       	sbiw	r28, 0x17	; 23
    1100:	65 96       	adiw	r28, 0x15	; 21
    1102:	ae ad       	ldd	r26, Y+62	; 0x3e
    1104:	bf ad       	ldd	r27, Y+63	; 0x3f
    1106:	65 97       	sbiw	r28, 0x15	; 21
    1108:	b8 8b       	std	Y+16, r27	; 0x10
    110a:	af 87       	std	Y+15, r26	; 0x0f

0000110c <.Loc.68>:

            if(Difference > 1){
    110c:	8f 85       	ldd	r24, Y+15	; 0x0f
    110e:	98 89       	ldd	r25, Y+16	; 0x10
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	91 05       	cpc	r25, r1
    1114:	39 f0       	breq	.+14     	; 0x1124 <.L14>
    1116:	34 f0       	brlt	.+12     	; 0x1124 <.L14>

00001118 <.Loc.69>:
                //stuur naar links
                Motor_1_set_power(50);
    1118:	82 e3       	ldi	r24, 0x32	; 50
    111a:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

0000111e <.Loc.70>:
                Motor_2_set_power(45);
    111e:	8d e2       	ldi	r24, 0x2D	; 45
    1120:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00001124 <.L14>:
            }
            if(Difference > 3){
    1124:	8f 85       	ldd	r24, Y+15	; 0x0f
    1126:	98 89       	ldd	r25, Y+16	; 0x10
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	39 f0       	breq	.+14     	; 0x113c <.L15>
    112e:	34 f0       	brlt	.+12     	; 0x113c <.L15>

00001130 <.Loc.72>:
                //stuur naar links
                Motor_1_set_power(50);
    1130:	82 e3       	ldi	r24, 0x32	; 50
    1132:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00001136 <.Loc.73>:
                Motor_2_set_power(40);
    1136:	88 e2       	ldi	r24, 0x28	; 40
    1138:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

0000113c <.L15>:
            }
            if(Difference > 8){
    113c:	8f 85       	ldd	r24, Y+15	; 0x0f
    113e:	98 89       	ldd	r25, Y+16	; 0x10
    1140:	88 30       	cpi	r24, 0x08	; 8
    1142:	91 05       	cpc	r25, r1
    1144:	39 f0       	breq	.+14     	; 0x1154 <.L16>
    1146:	34 f0       	brlt	.+12     	; 0x1154 <.L16>

00001148 <.Loc.75>:
                //stuur naar links
                Motor_1_set_power(50);
    1148:	82 e3       	ldi	r24, 0x32	; 50
    114a:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

0000114e <.Loc.76>:
                Motor_2_set_power(20);
    114e:	84 e1       	ldi	r24, 0x14	; 20
    1150:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00001154 <.L16>:
            }
            if(Difference < -1){
    1154:	8f 85       	ldd	r24, Y+15	; 0x0f
    1156:	98 89       	ldd	r25, Y+16	; 0x10
    1158:	8f 3f       	cpi	r24, 0xFF	; 255
    115a:	bf ef       	ldi	r27, 0xFF	; 255
    115c:	9b 07       	cpc	r25, r27
    115e:	34 f4       	brge	.+12     	; 0x116c <.L17>

00001160 <.Loc.78>:
                //stuur naar rechts
                Motor_1_set_power(45);
    1160:	8d e2       	ldi	r24, 0x2D	; 45
    1162:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00001166 <.Loc.79>:
                Motor_2_set_power(50);
    1166:	82 e3       	ldi	r24, 0x32	; 50
    1168:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

0000116c <.L17>:
            }
            if(Difference < -3){
    116c:	8f 85       	ldd	r24, Y+15	; 0x0f
    116e:	98 89       	ldd	r25, Y+16	; 0x10
    1170:	8d 3f       	cpi	r24, 0xFD	; 253
    1172:	ef ef       	ldi	r30, 0xFF	; 255
    1174:	9e 07       	cpc	r25, r30
    1176:	34 f4       	brge	.+12     	; 0x1184 <.L18>

00001178 <.Loc.81>:
                //stuur naar rechts
                Motor_1_set_power(40);
    1178:	88 e2       	ldi	r24, 0x28	; 40
    117a:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

0000117e <.Loc.82>:
                Motor_2_set_power(50);
    117e:	82 e3       	ldi	r24, 0x32	; 50
    1180:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00001184 <.L18>:
            }
            if(Difference < -8){
    1184:	8f 85       	ldd	r24, Y+15	; 0x0f
    1186:	98 89       	ldd	r25, Y+16	; 0x10
    1188:	88 3f       	cpi	r24, 0xF8	; 248
    118a:	ff ef       	ldi	r31, 0xFF	; 255
    118c:	9f 07       	cpc	r25, r31
    118e:	34 f4       	brge	.+12     	; 0x119c <.L19>

00001190 <.Loc.84>:
                //stuur naar rechts
                Motor_1_set_power(20);
    1190:	84 e1       	ldi	r24, 0x14	; 20
    1192:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00001196 <.Loc.85>:
                Motor_2_set_power(50);
    1196:	82 e3       	ldi	r24, 0x32	; 50
    1198:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

0000119c <.L19>:
            }
            if ( -1 < Difference && Difference < 1){
    119c:	8f 85       	ldd	r24, Y+15	; 0x0f
    119e:	98 89       	ldd	r25, Y+16	; 0x10
    11a0:	99 23       	and	r25, r25
    11a2:	5c f0       	brlt	.+22     	; 0x11ba <.L20>

000011a4 <.Loc.87>:
    11a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a6:	98 89       	ldd	r25, Y+16	; 0x10
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	09 f0       	breq	.+2      	; 0x11ae <.Loc.88>

000011ac <L0^A>:
    11ac:	34 f4       	brge	.+12     	; 0x11ba <.L20>

000011ae <.Loc.88>:
                Motor_1_set_power(50);
    11ae:	82 e3       	ldi	r24, 0x32	; 50
    11b0:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

000011b4 <.Loc.89>:
                Motor_2_set_power(50);
    11b4:	82 e3       	ldi	r24, 0x32	; 50
    11b6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

000011ba <.L20>:
            }
            if(BoomDetectie() == 1){
    11ba:	0e 94 69 09 	call	0x12d2	; 0x12d2 <BoomDetectie>

000011be <.Loc.91>:
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	61 f4       	brne	.+24     	; 0x11dc <.L13>

000011c4 <.LBB16>:
                Motor_1_set_power(0);
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

000011ca <.Loc.93>:
                Motor_2_set_power(0);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

000011d0 <.Loc.94>:
                GeluidSignaal();
    11d0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <GeluidSignaal>

000011d4 <.Loc.95>:
                wait_ms(2000);
    11d4:	80 ed       	ldi	r24, 0xD0	; 208
    11d6:	97 e0       	ldi	r25, 0x07	; 7
    11d8:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <wait_ms>

000011dc <.L13>:
        while(KolommenModus == 1){
    11dc:	8f 81       	ldd	r24, Y+7	; 0x07
    11de:	98 85       	ldd	r25, Y+8	; 0x08
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <.Loc.97>

000011e6 <L0^A>:
    11e6:	0e cf       	rjmp	.-484    	; 0x1004 <.L22>

000011e8 <.Loc.97>:
        while(VolgModus == 1){
    11e8:	06 cf       	rjmp	.-500    	; 0xff6 <.L2>

000011ea <init>:

    return 0;
}


void init (void){
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62

000011f2 <.Loc.99>:
    init_SonicSensors();
    11f2:	0e 94 4d 0c 	call	0x189a	; 0x189a <init_SonicSensors>

000011f6 <.Loc.100>:
    initTimer();
    11f6:	0e 94 47 0a 	call	0x148e	; 0x148e <initTimer>

000011fa <.Loc.101>:
    init_motor_1();
    11fa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <init_motor_1>

000011fe <.Loc.102>:
    init_motor_2();
    11fe:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <init_motor_2>

00001202 <.Loc.103>:
    init_Gyro();
    1202:	0e 94 82 03 	call	0x704	; 0x704 <init_Gyro>

00001206 <.Loc.104>:
    PORTK &= ~(1<<PK0);
    1206:	88 e0       	ldi	r24, 0x08	; 8
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	fc 01       	movw	r30, r24
    120c:	20 81       	ld	r18, Z

0000120e <.Loc.105>:
    120e:	88 e0       	ldi	r24, 0x08	; 8
    1210:	91 e0       	ldi	r25, 0x01	; 1

00001212 <.Loc.106>:
    1212:	2e 7f       	andi	r18, 0xFE	; 254
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18

00001218 <.Loc.107>:
    sei();
    1218:	78 94       	sei

0000121a <.Loc.108>:
}
    121a:	00 00       	nop
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret

00001222 <ModeSwitch1>:


// 48 46 44
int ModeSwitch1(){
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62

0000122a <.Loc.110>:
    if (PINL & (1<<PL1)){//D48
    122a:	89 e0       	ldi	r24, 0x09	; 9
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	fc 01       	movw	r30, r24
    1230:	80 81       	ld	r24, Z

00001232 <.Loc.111>:
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	82 70       	andi	r24, 0x02	; 2
    1238:	99 27       	eor	r25, r25

0000123a <.Loc.112>:
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	19 f0       	breq	.+6      	; 0x1244 <.L26>

0000123e <.Loc.113>:
        return 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <.L27>

00001244 <.L26>:
    }
    else{
        return 0;
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0

00001248 <.L27>:
    }
}
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	08 95       	ret

0000124e <ModeSwitch2>:
int ModeSwitch2(){
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62

00001256 <.Loc.117>:
    if (PINL & (1<<PL3)){//D46
    1256:	89 e0       	ldi	r24, 0x09	; 9
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	fc 01       	movw	r30, r24
    125c:	80 81       	ld	r24, Z

0000125e <.Loc.118>:
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 70       	andi	r24, 0x08	; 8
    1264:	99 27       	eor	r25, r25

00001266 <.Loc.119>:
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	19 f0       	breq	.+6      	; 0x1270 <.L29>

0000126a <.Loc.120>:
        return 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <.L30>

00001270 <.L29>:
    }
    else{
        return 0;
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0

00001274 <.L30>:
    }
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <RedSwitch>:
int RedSwitch(){
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62

00001282 <.Loc.124>:
    if (PINL & (1<<PL5)){//D44
    1282:	89 e0       	ldi	r24, 0x09	; 9
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	fc 01       	movw	r30, r24
    1288:	80 81       	ld	r24, Z

0000128a <.Loc.125>:
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	80 72       	andi	r24, 0x20	; 32
    1290:	99 27       	eor	r25, r25

00001292 <.Loc.126>:
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	19 f0       	breq	.+6      	; 0x129c <.L32>

00001296 <.Loc.127>:
        return 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <.L33>

0000129c <.L32>:
    }
    else{
        return 0;
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0

000012a0 <.L33>:
    }
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <KolomIR>:
int KolomIR(){
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62

000012ae <.Loc.131>:
    if (PINK & (1<<PK0)){//A8
    12ae:	86 e0       	ldi	r24, 0x06	; 6
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	fc 01       	movw	r30, r24
    12b4:	80 81       	ld	r24, Z

000012b6 <.Loc.132>:
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	81 70       	andi	r24, 0x01	; 1
    12bc:	99 27       	eor	r25, r25

000012be <.Loc.133>:
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	19 f0       	breq	.+6      	; 0x12c8 <.L35>

000012c2 <.Loc.134>:
        return 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <.L36>

000012c8 <.L35>:
    }
    else{
        return 0;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0

000012cc <.L36>:
    }
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <BoomDetectie>:

int BoomDetectie(){
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <L0^A>

000012d8 <L0^A>:
    12d8:	00 d0       	rcall	.+0      	; 0x12da <L0^A>

000012da <L0^A>:
    12da:	0f 92       	push	r0
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62

000012e2 <.Loc.138>:
    int afstand_Links = GetDistanceLeft();
    12e2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GetDistanceLeft>
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01

000012ea <.Loc.139>:
    int afstand_Rechts = GetDistanceRight();
    12ea:	0e 94 88 10 	call	0x2110	; 0x2110 <GetDistanceRight>
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    12f0:	8b 83       	std	Y+3, r24	; 0x03

000012f2 <.Loc.140>:
    int LinksDetectie = 0;
    12f2:	1e 82       	std	Y+6, r1	; 0x06
    12f4:	1d 82       	std	Y+5, r1	; 0x05

000012f6 <.Loc.141>:
    int RechtsDetectie = 0;
    12f6:	18 86       	std	Y+8, r1	; 0x08
    12f8:	1f 82       	std	Y+7, r1	; 0x07

000012fa <.Loc.142>:
    if (afstand_Links <= 90 & LinksDetectie == 0){
    12fa:	31 e0       	ldi	r19, 0x01	; 1
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	8a 35       	cpi	r24, 0x5A	; 90
    1302:	91 05       	cpc	r25, r1
    1304:	11 f0       	breq	.+4      	; 0x130a <.L38>
    1306:	0c f0       	brlt	.+2      	; 0x130a <.L38>
    1308:	30 e0       	ldi	r19, 0x00	; 0

0000130a <.L38>:
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	09 f0       	breq	.+2      	; 0x1316 <.L39>
    1314:	20 e0       	ldi	r18, 0x00	; 0

00001316 <.L39>:
    1316:	83 2f       	mov	r24, r19
    1318:	82 23       	and	r24, r18

0000131a <.Loc.143>:
    131a:	88 23       	and	r24, r24
    131c:	39 f0       	breq	.+14     	; 0x132c <.L40>

0000131e <.Loc.144>:
        LinksDetectie = 1;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05

00001326 <.Loc.145>:
        return 1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	2c c0       	rjmp	.+88     	; 0x1384 <.L37>

0000132c <.L40>:
    }
    if(afstand_Links > 120){
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	9a 81       	ldd	r25, Y+2	; 0x02
    1330:	88 37       	cpi	r24, 0x78	; 120
    1332:	91 05       	cpc	r25, r1
    1334:	19 f0       	breq	.+6      	; 0x133c <.L42>
    1336:	14 f0       	brlt	.+4      	; 0x133c <.L42>

00001338 <.Loc.147>:
        LinksDetectie = 0;
    1338:	1e 82       	std	Y+6, r1	; 0x06
    133a:	1d 82       	std	Y+5, r1	; 0x05

0000133c <.L42>:
    }
    if (afstand_Rechts <= 90 & RechtsDetectie == 0){
    133c:	31 e0       	ldi	r19, 0x01	; 1
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	8a 35       	cpi	r24, 0x5A	; 90
    1344:	91 05       	cpc	r25, r1
    1346:	11 f0       	breq	.+4      	; 0x134c <.L43>
    1348:	0c f0       	brlt	.+2      	; 0x134c <.L43>
    134a:	30 e0       	ldi	r19, 0x00	; 0

0000134c <.L43>:
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	8f 81       	ldd	r24, Y+7	; 0x07
    1350:	98 85       	ldd	r25, Y+8	; 0x08
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	09 f0       	breq	.+2      	; 0x1358 <.L44>
    1356:	20 e0       	ldi	r18, 0x00	; 0

00001358 <.L44>:
    1358:	83 2f       	mov	r24, r19
    135a:	82 23       	and	r24, r18

0000135c <.Loc.149>:
    135c:	88 23       	and	r24, r24
    135e:	39 f0       	breq	.+14     	; 0x136e <.L45>

00001360 <.Loc.150>:
        RechtsDetectie = 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	98 87       	std	Y+8, r25	; 0x08
    1366:	8f 83       	std	Y+7, r24	; 0x07

00001368 <.Loc.151>:
        return 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0b c0       	rjmp	.+22     	; 0x1384 <.L37>

0000136e <.L45>:
    }
    if(afstand_Rechts > 120){
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	88 37       	cpi	r24, 0x78	; 120
    1374:	91 05       	cpc	r25, r1
    1376:	21 f0       	breq	.+8      	; 0x1380 <.L46>
    1378:	1c f0       	brlt	.+6      	; 0x1380 <.L46>

0000137a <.Loc.153>:
        RechtsDetectie = 0;
    137a:	18 86       	std	Y+8, r1	; 0x08
    137c:	1f 82       	std	Y+7, r1	; 0x07

0000137e <.Loc.154>:
    }
    else{
        return 0;
    }

}
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <.L37>

00001380 <.L46>:
        return 0;
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0

00001384 <.L37>:
}
    1384:	28 96       	adiw	r28, 0x08	; 8
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <LightSwap>:

void LightSwap(void){
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62

0000139e <.Loc.158>:
    PORTB ^= (1<<PB7);
    139e:	85 e2       	ldi	r24, 0x25	; 37
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	fc 01       	movw	r30, r24
    13a4:	30 81       	ld	r19, Z
    13a6:	85 e2       	ldi	r24, 0x25	; 37
    13a8:	90 e0       	ldi	r25, 0x00	; 0

000013aa <.Loc.159>:
    13aa:	20 e8       	ldi	r18, 0x80	; 128
    13ac:	23 27       	eor	r18, r19
    13ae:	fc 01       	movw	r30, r24
    13b0:	20 83       	st	Z, r18

000013b2 <.Loc.160>:
    PORTB ^= (1<<PB6);
    13b2:	85 e2       	ldi	r24, 0x25	; 37
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	fc 01       	movw	r30, r24
    13b8:	30 81       	ld	r19, Z
    13ba:	85 e2       	ldi	r24, 0x25	; 37
    13bc:	90 e0       	ldi	r25, 0x00	; 0

000013be <.Loc.161>:
    13be:	20 e4       	ldi	r18, 0x40	; 64
    13c0:	23 27       	eor	r18, r19
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18

000013c6 <.Loc.162>:
}
    13c6:	00 00       	nop
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <GeluidSignaal>:
void GeluidSignaal(void){
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62

000013d6 <.Loc.164>:
    PORTE &= ~(1<<PE5);
    13d6:	8e e2       	ldi	r24, 0x2E	; 46
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	fc 01       	movw	r30, r24
    13dc:	20 81       	ld	r18, Z

000013de <.Loc.165>:
    13de:	8e e2       	ldi	r24, 0x2E	; 46
    13e0:	90 e0       	ldi	r25, 0x00	; 0

000013e2 <.Loc.166>:
    13e2:	2f 7d       	andi	r18, 0xDF	; 223
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18

000013e8 <.Loc.167>:
    wait_ms(40);
    13e8:	88 e2       	ldi	r24, 0x28	; 40
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <wait_ms>

000013f0 <.Loc.168>:
    PORTE |= (1<<PE5);
    13f0:	8e e2       	ldi	r24, 0x2E	; 46
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	fc 01       	movw	r30, r24
    13f6:	20 81       	ld	r18, Z
    13f8:	8e e2       	ldi	r24, 0x2E	; 46
    13fa:	90 e0       	ldi	r25, 0x00	; 0

000013fc <.Loc.169>:
    13fc:	20 62       	ori	r18, 0x20	; 32
    13fe:	fc 01       	movw	r30, r24
    1400:	20 83       	st	Z, r18

00001402 <.Loc.170>:
    wait_ms(60);
    1402:	8c e3       	ldi	r24, 0x3C	; 60
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <wait_ms>

0000140a <.Loc.171>:
    PORTE &= ~(1<<PE5);
    140a:	8e e2       	ldi	r24, 0x2E	; 46
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	fc 01       	movw	r30, r24
    1410:	20 81       	ld	r18, Z

00001412 <.Loc.172>:
    1412:	8e e2       	ldi	r24, 0x2E	; 46
    1414:	90 e0       	ldi	r25, 0x00	; 0

00001416 <.Loc.173>:
    1416:	2f 7d       	andi	r18, 0xDF	; 223
    1418:	fc 01       	movw	r30, r24
    141a:	20 83       	st	Z, r18

0000141c <.Loc.174>:
    wait_ms(40);
    141c:	88 e2       	ldi	r24, 0x28	; 40
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <wait_ms>

00001424 <.Loc.175>:
    PORTE |= (1<<PE5);
    1424:	8e e2       	ldi	r24, 0x2E	; 46
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	fc 01       	movw	r30, r24
    142a:	20 81       	ld	r18, Z
    142c:	8e e2       	ldi	r24, 0x2E	; 46
    142e:	90 e0       	ldi	r25, 0x00	; 0

00001430 <.Loc.176>:
    1430:	20 62       	ori	r18, 0x20	; 32
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18

00001436 <.Loc.177>:
    wait_ms(150);
    1436:	86 e9       	ldi	r24, 0x96	; 150
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <wait_ms>

0000143e <.Loc.178>:
    PORTE &= ~(1<<PE5);
    143e:	8e e2       	ldi	r24, 0x2E	; 46
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	fc 01       	movw	r30, r24
    1444:	20 81       	ld	r18, Z

00001446 <.Loc.179>:
    1446:	8e e2       	ldi	r24, 0x2E	; 46
    1448:	90 e0       	ldi	r25, 0x00	; 0

0000144a <.Loc.180>:
    144a:	2f 7d       	andi	r18, 0xDF	; 223
    144c:	fc 01       	movw	r30, r24
    144e:	20 83       	st	Z, r18

00001450 <.Loc.181>:
    wait_ms(70);
    1450:	86 e4       	ldi	r24, 0x46	; 70
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <wait_ms>

00001458 <.Loc.182>:
    PORTE |= (1<<PE5);
    1458:	8e e2       	ldi	r24, 0x2E	; 46
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	fc 01       	movw	r30, r24
    145e:	20 81       	ld	r18, Z
    1460:	8e e2       	ldi	r24, 0x2E	; 46
    1462:	90 e0       	ldi	r25, 0x00	; 0

00001464 <.Loc.183>:
    1464:	20 62       	ori	r18, 0x20	; 32
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18

0000146a <.Loc.184>:
}
    146a:	00 00       	nop
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <TurnTo>:


void TurnTo(int TargetHeading){
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	0f 92       	push	r0
    1478:	0f 92       	push	r0
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01

00001482 <.Loc.186>:
    //Get heading




}
    1482:	00 00       	nop
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <initTimer>:

void initTimer(void)
{
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62

00001496 <.Loc.188>:
    TCCR4A = 0;
    1496:	80 ea       	ldi	r24, 0xA0	; 160
    1498:	90 e0       	ldi	r25, 0x00	; 0

0000149a <.Loc.189>:
    149a:	fc 01       	movw	r30, r24
    149c:	10 82       	st	Z, r1

0000149e <.Loc.190>:
    TCCR4B |=  (1<<CS41);
    149e:	81 ea       	ldi	r24, 0xA1	; 161
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 81       	ld	r18, Z
    14a6:	81 ea       	ldi	r24, 0xA1	; 161
    14a8:	90 e0       	ldi	r25, 0x00	; 0

000014aa <.Loc.191>:
    14aa:	22 60       	ori	r18, 0x02	; 2
    14ac:	fc 01       	movw	r30, r24
    14ae:	20 83       	st	Z, r18

000014b0 <.Loc.192>:
}
    14b0:	00 00       	nop
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <wait_ms>:

void wait_ms(int ms){
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	00 d0       	rcall	.+0      	; 0x14be <L0^A>

000014be <L0^A>:
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <L0^A>

000014c0 <L0^A>:
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 83       	std	Y+5, r24	; 0x05

000014c8 <.Loc.194>:
    int WachtTijd = ms/33;
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	21 e2       	ldi	r18, 0x21	; 33
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	b9 01       	movw	r22, r18
    14d2:	0e 94 8e 12 	call	0x251c	; 0x251c <__divmodhi4>
    14d6:	cb 01       	movw	r24, r22
    14d8:	9c 83       	std	Y+4, r25	; 0x04
    14da:	8b 83       	std	Y+3, r24	; 0x03

000014dc <.Loc.195>:
    int teller =0;
    14dc:	1a 82       	std	Y+2, r1	; 0x02
    14de:	19 82       	std	Y+1, r1	; 0x01

000014e0 <.Loc.196>:
    while(teller < WachtTijd)
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <.L54>

000014e2 <.L55>:
    {
        if (TIFR4 & (1<<TOV4))
    14e2:	89 e3       	ldi	r24, 0x39	; 57
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	fc 01       	movw	r30, r24
    14e8:	80 81       	ld	r24, Z

000014ea <.Loc.198>:
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	81 70       	andi	r24, 0x01	; 1
    14f0:	99 27       	eor	r25, r25

000014f2 <.Loc.199>:
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	51 f0       	breq	.+20     	; 0x150a <.L54>

000014f6 <.Loc.200>:
        {
            TIFR4 = (1<<TOV4);
    14f6:	89 e3       	ldi	r24, 0x39	; 57
    14f8:	90 e0       	ldi	r25, 0x00	; 0

000014fa <.Loc.201>:
    14fa:	21 e0       	ldi	r18, 0x01	; 1
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 83       	st	Z, r18

00001500 <.Loc.202>:
            teller++;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	9a 83       	std	Y+2, r25	; 0x02
    1508:	89 83       	std	Y+1, r24	; 0x01

0000150a <.L54>:
    while(teller < WachtTijd)
    150a:	29 81       	ldd	r18, Y+1	; 0x01
    150c:	3a 81       	ldd	r19, Y+2	; 0x02
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	28 17       	cp	r18, r24
    1514:	39 07       	cpc	r19, r25
    1516:	2c f3       	brlt	.-54     	; 0x14e2 <.L55>

00001518 <.Loc.204>:
        }
    }
}
    1518:	00 00       	nop
    151a:	00 00       	nop
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <init_display_meneer>:
	~0x66, ~0xB6, ~0xBE, ~0xE0,
	~0xFE, ~0xF6, ~0xEE, ~0x3E,
	~0x9C, ~0x7A, ~0x9E, ~0x8E };

void init_display_meneer (void)
{
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62

00001536 <.Loc.206>:
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	fc 01       	movw	r30, r24
    153c:	20 81       	ld	r18, Z
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	91 e0       	ldi	r25, 0x01	; 1

00001542 <.Loc.207>:
    1542:	20 62       	ori	r18, 0x20	; 32
    1544:	fc 01       	movw	r30, r24
    1546:	20 83       	st	Z, r18

00001548 <.Loc.208>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	fc 01       	movw	r30, r24
    154e:	20 81       	ld	r18, Z
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	91 e0       	ldi	r25, 0x01	; 1

00001554 <.Loc.209>:
    1554:	20 61       	ori	r18, 0x10	; 16
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18

0000155a <.Loc.210>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
    155a:	83 e3       	ldi	r24, 0x33	; 51
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	fc 01       	movw	r30, r24
    1560:	20 81       	ld	r18, Z
    1562:	83 e3       	ldi	r24, 0x33	; 51
    1564:	90 e0       	ldi	r25, 0x00	; 0

00001566 <.Loc.211>:
    1566:	20 62       	ori	r18, 0x20	; 32
    1568:	fc 01       	movw	r30, r24
    156a:	20 83       	st	Z, r18

0000156c <.Loc.212>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	fc 01       	movw	r30, r24
    1572:	20 81       	ld	r18, Z

00001574 <.Loc.213>:
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	91 e0       	ldi	r25, 0x01	; 1

00001578 <.Loc.214>:
    1578:	2f 7e       	andi	r18, 0xEF	; 239
    157a:	fc 01       	movw	r30, r24
    157c:	20 83       	st	Z, r18

0000157e <.Loc.215>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
    157e:	84 e3       	ldi	r24, 0x34	; 52
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	fc 01       	movw	r30, r24
    1584:	20 81       	ld	r18, Z

00001586 <.Loc.216>:
    1586:	84 e3       	ldi	r24, 0x34	; 52
    1588:	90 e0       	ldi	r25, 0x00	; 0

0000158a <.Loc.217>:
    158a:	2f 7d       	andi	r18, 0xDF	; 223
    158c:	fc 01       	movw	r30, r24
    158e:	20 83       	st	Z, r18

00001590 <.Loc.218>:
}
    1590:	00 00       	nop
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <send_data>:

void send_data(char data)
{
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	00 d0       	rcall	.+0      	; 0x159e <L0^A>

0000159e <L0^A>:
    159e:	0f 92       	push	r0
    15a0:	0f 92       	push	r0
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	8d 83       	std	Y+5, r24	; 0x05

000015a8 <.LBB17>:
	for (unsigned i = 0; i < 8; i++)
    15a8:	1a 82       	std	Y+2, r1	; 0x02
    15aa:	19 82       	std	Y+1, r1	; 0x01

000015ac <.Loc.221>:
    15ac:	39 c0       	rjmp	.+114    	; 0x1620 <.L58>

000015ae <.L61>:
	// Herhaal voor alle bits in een char
	{
		// Bepaal de waarde van de bit die je naar het schuifregister
		// wil sturen
		int bit = data & 1;
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	08 2e       	mov	r0, r24
    15b2:	00 0c       	add	r0, r0
    15b4:	99 0b       	sbc	r25, r25

000015b6 <.Loc.223>:
    15b6:	81 70       	andi	r24, 0x01	; 1
    15b8:	99 27       	eor	r25, r25
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03

000015be <.Loc.224>:
		data >>= 1;
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	85 95       	asr	r24
    15c2:	8d 83       	std	Y+5, r24	; 0x05

000015c4 <.Loc.225>:

		// Maak de juiste pin hoog of laag op basis van de bepaalde waarde
		// van het bit
		if (bit)
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	51 f0       	breq	.+20     	; 0x15e0 <.L59>

000015cc <.Loc.226>:
		{
			PORT_SDI |= (1 << SDI_BIT);
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 81       	ld	r18, Z
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	91 e0       	ldi	r25, 0x01	; 1

000015d8 <.Loc.227>:
    15d8:	20 62       	ori	r18, 0x20	; 32
    15da:	fc 01       	movw	r30, r24
    15dc:	20 83       	st	Z, r18
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <.L60>

000015e0 <.L59>:
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	fc 01       	movw	r30, r24
    15e6:	20 81       	ld	r18, Z

000015e8 <.Loc.229>:
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	91 e0       	ldi	r25, 0x01	; 1

000015ec <.Loc.230>:
    15ec:	2f 7d       	andi	r18, 0xDF	; 223
    15ee:	fc 01       	movw	r30, r24
    15f0:	20 83       	st	Z, r18

000015f2 <.L60>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	fc 01       	movw	r30, r24
    15f8:	20 81       	ld	r18, Z
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	91 e0       	ldi	r25, 0x01	; 1

000015fe <.Loc.232>:
    15fe:	20 61       	ori	r18, 0x10	; 16
    1600:	fc 01       	movw	r30, r24
    1602:	20 83       	st	Z, r18

00001604 <.Loc.233>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
    1604:	82 e0       	ldi	r24, 0x02	; 2
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	fc 01       	movw	r30, r24
    160a:	20 81       	ld	r18, Z

0000160c <.Loc.234>:
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	91 e0       	ldi	r25, 0x01	; 1

00001610 <.Loc.235>:
    1610:	2f 7e       	andi	r18, 0xEF	; 239
    1612:	fc 01       	movw	r30, r24
    1614:	20 83       	st	Z, r18

00001616 <.LBE18>:
	for (unsigned i = 0; i < 8; i++)
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01

00001620 <.L58>:
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	87 30       	cpi	r24, 0x07	; 7
    1626:	91 05       	cpc	r25, r1
    1628:	11 f2       	breq	.-124    	; 0x15ae <.L61>
    162a:	08 f2       	brcs	.-126    	; 0x15ae <.L61>

0000162c <.LBE17>:
	}
}
    162c:	00 00       	nop
    162e:	00 00       	nop
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	08 95       	ret

00001640 <send_enable>:

void send_enable(int display_nummer)
{
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	0f 92       	push	r0
    1646:	0f 92       	push	r0
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	89 83       	std	Y+1, r24	; 0x01

00001650 <.Loc.240>:
	send_data(0x10 << display_nummer);
    1650:	80 e1       	ldi	r24, 0x10	; 16
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	09 80       	ldd	r0, Y+1	; 0x01
    1656:	02 c0       	rjmp	.+4      	; 0x165c <.L2^B1>

00001658 <.L1^B1>:
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25

0000165c <.L2^B1>:
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <.L1^B1>

00001660 <.Loc.241>:
    1660:	0e 94 cc 0a 	call	0x1598	; 0x1598 <send_data>

00001664 <.Loc.242>:
}
    1664:	00 00       	nop
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <display>:

void display(char data, int display_nummer)
{
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	00 d0       	rcall	.+0      	; 0x1676 <L0^A>

00001676 <L0^A>:
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	7b 83       	std	Y+3, r23	; 0x03
    167e:	6a 83       	std	Y+2, r22	; 0x02

00001680 <.Loc.244>:
	send_data(data);
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	0e 94 cc 0a 	call	0x1598	; 0x1598 <send_data>

00001686 <.Loc.245>:
	send_enable(display_nummer);
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	9b 81       	ldd	r25, Y+3	; 0x03
    168a:	0e 94 20 0b 	call	0x1640	; 0x1640 <send_enable>

0000168e <.Loc.246>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
    168e:	84 e3       	ldi	r24, 0x34	; 52
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	fc 01       	movw	r30, r24
    1694:	20 81       	ld	r18, Z
    1696:	84 e3       	ldi	r24, 0x34	; 52
    1698:	90 e0       	ldi	r25, 0x00	; 0

0000169a <.Loc.247>:
    169a:	20 62       	ori	r18, 0x20	; 32
    169c:	fc 01       	movw	r30, r24
    169e:	20 83       	st	Z, r18

000016a0 <.Loc.248>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
    16a0:	84 e3       	ldi	r24, 0x34	; 52
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	fc 01       	movw	r30, r24
    16a6:	20 81       	ld	r18, Z

000016a8 <.Loc.249>:
    16a8:	84 e3       	ldi	r24, 0x34	; 52
    16aa:	90 e0       	ldi	r25, 0x00	; 0

000016ac <.Loc.250>:
    16ac:	2f 7d       	andi	r18, 0xDF	; 223
    16ae:	fc 01       	movw	r30, r24
    16b0:	20 83       	st	Z, r18

000016b2 <.Loc.251>:
}
    16b2:	00 00       	nop
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <display_getal>:

void display_getal(unsigned int getal)
{
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	a6 97       	sbiw	r28, 0x26	; 38
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	9a 8b       	std	Y+18, r25	; 0x12
    16d6:	89 8b       	std	Y+17, r24	; 0x11

000016d8 <.LBB19>:
	for (int i = 0; i < 4; i++)
    16d8:	1a 82       	std	Y+2, r1	; 0x02
    16da:	19 82       	std	Y+1, r1	; 0x01

000016dc <.Loc.254>:
    16dc:	cc c0       	rjmp	.+408    	; 0x1876 <.L65>

000016de <.L74>:
	{
		display(segmentcodes[getal%10], i);
    16de:	49 89       	ldd	r20, Y+17	; 0x11
    16e0:	5a 89       	ldd	r21, Y+18	; 0x12
    16e2:	9a 01       	movw	r18, r20
    16e4:	ad ec       	ldi	r26, 0xCD	; 205
    16e6:	bc ec       	ldi	r27, 0xCC	; 204
    16e8:	0e 94 c1 12 	call	0x2582	; 0x2582 <__umulhisi3>
    16ec:	9c 01       	movw	r18, r24
    16ee:	36 95       	lsr	r19
    16f0:	27 95       	ror	r18
    16f2:	36 95       	lsr	r19
    16f4:	27 95       	ror	r18
    16f6:	36 95       	lsr	r19
    16f8:	27 95       	ror	r18
    16fa:	c9 01       	movw	r24, r18
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	82 0f       	add	r24, r18
    1706:	93 1f       	adc	r25, r19
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	9a 01       	movw	r18, r20
    170e:	28 1b       	sub	r18, r24
    1710:	39 0b       	sbc	r19, r25

00001712 <.Loc.256>:
    1712:	c9 01       	movw	r24, r18
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	80 50       	subi	r24, 0x00	; 0
    171a:	9e 4f       	sbci	r25, 0xFE	; 254
    171c:	dc 01       	movw	r26, r24
    171e:	8d 91       	ld	r24, X+
    1720:	9c 91       	ld	r25, X

00001722 <.Loc.257>:
    1722:	28 2f       	mov	r18, r24
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	bc 01       	movw	r22, r24
    172a:	82 2f       	mov	r24, r18
    172c:	0e 94 38 0b 	call	0x1670	; 0x1670 <display>

00001730 <.Loc.258>:
		getal /= 10;
    1730:	89 89       	ldd	r24, Y+17	; 0x11
    1732:	9a 89       	ldd	r25, Y+18	; 0x12
    1734:	9c 01       	movw	r18, r24
    1736:	ad ec       	ldi	r26, 0xCD	; 205
    1738:	bc ec       	ldi	r27, 0xCC	; 204
    173a:	0e 94 c1 12 	call	0x2582	; 0x2582 <__umulhisi3>
    173e:	96 95       	lsr	r25
    1740:	87 95       	ror	r24
    1742:	96 95       	lsr	r25
    1744:	87 95       	ror	r24
    1746:	96 95       	lsr	r25
    1748:	87 95       	ror	r24
    174a:	9a 8b       	std	Y+18, r25	; 0x12
    174c:	89 8b       	std	Y+17, r24	; 0x11
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a0 e8       	ldi	r26, 0x80	; 128
    1754:	bf e3       	ldi	r27, 0x3F	; 63
    1756:	8b 83       	std	Y+3, r24	; 0x03
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	ad 83       	std	Y+5, r26	; 0x05
    175c:	be 83       	std	Y+6, r27	; 0x06

0000175e <.LBB20>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a e7       	ldi	r20, 0x7A	; 122
    1764:	55 e4       	ldi	r21, 0x45	; 69
    1766:	6b 81       	ldd	r22, Y+3	; 0x03
    1768:	7c 81       	ldd	r23, Y+4	; 0x04
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1772:	6f 8b       	std	Y+23, r22	; 0x17
    1774:	78 8f       	std	Y+24, r23	; 0x18
    1776:	89 8f       	std	Y+25, r24	; 0x19
    1778:	9a 8f       	std	Y+26, r25	; 0x1a
    177a:	8f 89       	ldd	r24, Y+23	; 0x17
    177c:	98 8d       	ldd	r25, Y+24	; 0x18
    177e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1780:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1782:	8f 83       	std	Y+7, r24	; 0x07
    1784:	98 87       	std	Y+8, r25	; 0x08
    1786:	a9 87       	std	Y+9, r26	; 0x09
    1788:	ba 87       	std	Y+10, r27	; 0x0a

0000178a <.Loc.260>:
	if (__tmp < 1.0)
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__cmpsf2>
    179e:	88 23       	and	r24, r24
    17a0:	2c f4       	brge	.+10     	; 0x17ac <.L77>

000017a2 <.Loc.261>:
		__ticks = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9c 87       	std	Y+12, r25	; 0x0c
    17a8:	8b 87       	std	Y+11, r24	; 0x0b
    17aa:	55 c0       	rjmp	.+170    	; 0x1856 <.L68>

000017ac <.L77>:
	else if (__tmp > 65535)
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    17c0:	88 23       	and	r24, r24
    17c2:	d9 f1       	breq	.+118    	; 0x183a <.L78>
    17c4:	d4 f1       	brlt	.+116    	; 0x183a <.L78>

000017c6 <.Loc.263>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e2       	ldi	r20, 0x20	; 32
    17cc:	51 e4       	ldi	r21, 0x41	; 65
    17ce:	6b 81       	ldd	r22, Y+3	; 0x03
    17d0:	7c 81       	ldd	r23, Y+4	; 0x04
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	9e 81       	ldd	r25, Y+6	; 0x06
    17d6:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    17da:	6b 8f       	std	Y+27, r22	; 0x1b
    17dc:	7c 8f       	std	Y+28, r23	; 0x1c
    17de:	8d 8f       	std	Y+29, r24	; 0x1d
    17e0:	9e 8f       	std	Y+30, r25	; 0x1e
    17e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    17e8:	be 8d       	ldd	r27, Y+30	; 0x1e
    17ea:	8b 8b       	std	Y+19, r24	; 0x13
    17ec:	9c 8b       	std	Y+20, r25	; 0x14
    17ee:	ad 8b       	std	Y+21, r26	; 0x15
    17f0:	be 8b       	std	Y+22, r27	; 0x16

000017f2 <.Loc.264>:
    17f2:	6b 89       	ldd	r22, Y+19	; 0x13
    17f4:	7c 89       	ldd	r23, Y+20	; 0x14
    17f6:	8d 89       	ldd	r24, Y+21	; 0x15
    17f8:	9e 89       	ldd	r25, Y+22	; 0x16
    17fa:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    17fe:	6f 8f       	std	Y+31, r22	; 0x1f
    1800:	78 a3       	std	Y+32, r23	; 0x20
    1802:	89 a3       	std	Y+33, r24	; 0x21
    1804:	9a a3       	std	Y+34, r25	; 0x22
    1806:	af 8d       	ldd	r26, Y+31	; 0x1f
    1808:	b8 a1       	ldd	r27, Y+32	; 0x20
    180a:	bc 87       	std	Y+12, r27	; 0x0c
    180c:	ab 87       	std	Y+11, r26	; 0x0b

0000180e <.Loc.265>:
		while(__ticks)
    180e:	10 c0       	rjmp	.+32     	; 0x1830 <.L71>

00001810 <.L72>:
    1810:	80 e9       	ldi	r24, 0x90	; 144
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	9e 87       	std	Y+14, r25	; 0x0e
    1816:	8d 87       	std	Y+13, r24	; 0x0d

00001818 <.LBB22>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
    1818:	8d 85       	ldd	r24, Y+13	; 0x0d
    181a:	9e 85       	ldd	r25, Y+14	; 0x0e

0000181c <.L1^B2>:
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <.L1^B2>
    1820:	9e 87       	std	Y+14, r25	; 0x0e
    1822:	8d 87       	std	Y+13, r24	; 0x0d

00001824 <.Loc.267>:
	...

00001826 <.LBE22>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8b 85       	ldd	r24, Y+11	; 0x0b
    1828:	9c 85       	ldd	r25, Y+12	; 0x0c
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9c 87       	std	Y+12, r25	; 0x0c
    182e:	8b 87       	std	Y+11, r24	; 0x0b

00001830 <.L71>:
		while(__ticks)
    1830:	8b 85       	ldd	r24, Y+11	; 0x0b
    1832:	9c 85       	ldd	r25, Y+12	; 0x0c
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	61 f7       	brne	.-40     	; 0x1810 <.L72>

00001838 <.Loc.270>:
		}
		return;
    1838:	19 c0       	rjmp	.+50     	; 0x186c <.L73>

0000183a <.L78>:
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	6f 81       	ldd	r22, Y+7	; 0x07
    183c:	78 85       	ldd	r23, Y+8	; 0x08
    183e:	89 85       	ldd	r24, Y+9	; 0x09
    1840:	9a 85       	ldd	r25, Y+10	; 0x0a
    1842:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    1846:	6b a3       	std	Y+35, r22	; 0x23
    1848:	7c a3       	std	Y+36, r23	; 0x24
    184a:	8d a3       	std	Y+37, r24	; 0x25
    184c:	9e a3       	std	Y+38, r25	; 0x26
    184e:	eb a1       	ldd	r30, Y+35	; 0x23
    1850:	fc a1       	ldd	r31, Y+36	; 0x24
    1852:	fc 87       	std	Y+12, r31	; 0x0c
    1854:	eb 87       	std	Y+11, r30	; 0x0b

00001856 <.L68>:
    1856:	8b 85       	ldd	r24, Y+11	; 0x0b
    1858:	9c 85       	ldd	r25, Y+12	; 0x0c
    185a:	98 8b       	std	Y+16, r25	; 0x10
    185c:	8f 87       	std	Y+15, r24	; 0x0f

0000185e <.LBB24>:
    185e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1860:	98 89       	ldd	r25, Y+16	; 0x10

00001862 <.L1^B3>:
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <.L1^B3>
    1866:	98 8b       	std	Y+16, r25	; 0x10
    1868:	8f 87       	std	Y+15, r24	; 0x0f

0000186a <.Loc.273>:
	...

0000186c <.L73>:
	for (int i = 0; i < 4; i++)
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	01 96       	adiw	r24, 0x01	; 1
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01

00001876 <.L65>:
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	09 f0       	breq	.+2      	; 0x1882 <L0^A>

00001880 <L0^A>:
    1880:	0c f4       	brge	.+2      	; 0x1884 <.LBE19>

00001882 <L0^A>:
    1882:	2d cf       	rjmp	.-422    	; 0x16de <.L74>

00001884 <.LBE19>:
		_delay_ms(1);   // 1 kHz
	}
}
    1884:	00 00       	nop
    1886:	00 00       	nop
    1888:	a6 96       	adiw	r28, 0x26	; 38
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret

0000189a <init_SonicSensors>:
#include "Ultra_Sonic_Front.h"
#include <avr/io.h>
#include <avr/interrupt.h>
volatile int count = 0;

void init_SonicSensors(void){
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62

000018a2 <.Loc.1>:
	ddr_ech_F &= ~(1<<pin_ech_F);
    18a2:	87 e0       	ldi	r24, 0x07	; 7
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	fc 01       	movw	r30, r24
    18a8:	20 81       	ld	r18, Z

000018aa <.Loc.2>:
    18aa:	87 e0       	ldi	r24, 0x07	; 7
    18ac:	91 e0       	ldi	r25, 0x01	; 1

000018ae <.Loc.3>:
    18ae:	27 7f       	andi	r18, 0xF7	; 247
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18

000018b4 <.Loc.4>:
	ddr_tri_F |= (1<<pin_tri_F);
    18b4:	81 e2       	ldi	r24, 0x21	; 33
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	fc 01       	movw	r30, r24
    18ba:	20 81       	ld	r18, Z
    18bc:	81 e2       	ldi	r24, 0x21	; 33
    18be:	90 e0       	ldi	r25, 0x00	; 0

000018c0 <.Loc.5>:
    18c0:	21 60       	ori	r18, 0x01	; 1
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18

000018c6 <.Loc.6>:
    port_tri_F &= ~(1<<pin_tri_F);
    18c6:	82 e2       	ldi	r24, 0x22	; 34
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	fc 01       	movw	r30, r24
    18cc:	20 81       	ld	r18, Z

000018ce <.Loc.7>:
    18ce:	82 e2       	ldi	r24, 0x22	; 34
    18d0:	90 e0       	ldi	r25, 0x00	; 0

000018d2 <.Loc.8>:
    18d2:	2e 7f       	andi	r18, 0xFE	; 254
    18d4:	fc 01       	movw	r30, r24
    18d6:	20 83       	st	Z, r18

000018d8 <.Loc.9>:

	ddr_ech_R &= ~(1<<pin_ech_R);
    18d8:	87 e0       	ldi	r24, 0x07	; 7
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	fc 01       	movw	r30, r24
    18de:	20 81       	ld	r18, Z

000018e0 <.Loc.10>:
    18e0:	87 e0       	ldi	r24, 0x07	; 7
    18e2:	91 e0       	ldi	r25, 0x01	; 1

000018e4 <.Loc.11>:
    18e4:	2d 7f       	andi	r18, 0xFD	; 253
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 83       	st	Z, r18

000018ea <.Loc.12>:
	ddr_tri_R |= (1<<pin_tri_R);
    18ea:	81 e2       	ldi	r24, 0x21	; 33
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 81       	ld	r18, Z
    18f2:	81 e2       	ldi	r24, 0x21	; 33
    18f4:	90 e0       	ldi	r25, 0x00	; 0

000018f6 <.Loc.13>:
    18f6:	20 61       	ori	r18, 0x10	; 16
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 83       	st	Z, r18

000018fc <.Loc.14>:
    port_tri_R &= ~(1<<pin_tri_R);
    18fc:	82 e2       	ldi	r24, 0x22	; 34
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	fc 01       	movw	r30, r24
    1902:	20 81       	ld	r18, Z

00001904 <.Loc.15>:
    1904:	82 e2       	ldi	r24, 0x22	; 34
    1906:	90 e0       	ldi	r25, 0x00	; 0

00001908 <.Loc.16>:
    1908:	2f 7e       	andi	r18, 0xEF	; 239
    190a:	fc 01       	movw	r30, r24
    190c:	20 83       	st	Z, r18

0000190e <.Loc.17>:

	ddr_ech_L &= ~(1<<pin_ech_L);
    190e:	87 e0       	ldi	r24, 0x07	; 7
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	fc 01       	movw	r30, r24
    1914:	20 81       	ld	r18, Z

00001916 <.Loc.18>:
    1916:	87 e0       	ldi	r24, 0x07	; 7
    1918:	91 e0       	ldi	r25, 0x01	; 1

0000191a <.Loc.19>:
    191a:	2b 7f       	andi	r18, 0xFB	; 251
    191c:	fc 01       	movw	r30, r24
    191e:	20 83       	st	Z, r18

00001920 <.Loc.20>:
	ddr_tri_L |= (1<<pin_tri_L);
    1920:	81 e2       	ldi	r24, 0x21	; 33
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	fc 01       	movw	r30, r24
    1926:	20 81       	ld	r18, Z
    1928:	81 e2       	ldi	r24, 0x21	; 33
    192a:	90 e0       	ldi	r25, 0x00	; 0

0000192c <.Loc.21>:
    192c:	24 60       	ori	r18, 0x04	; 4
    192e:	fc 01       	movw	r30, r24
    1930:	20 83       	st	Z, r18

00001932 <.Loc.22>:
    port_tri_L &= ~(1<<pin_tri_L);
    1932:	82 e2       	ldi	r24, 0x22	; 34
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	fc 01       	movw	r30, r24
    1938:	20 81       	ld	r18, Z

0000193a <.Loc.23>:
    193a:	82 e2       	ldi	r24, 0x22	; 34
    193c:	90 e0       	ldi	r25, 0x00	; 0

0000193e <.Loc.24>:
    193e:	2b 7f       	andi	r18, 0xFB	; 251
    1940:	fc 01       	movw	r30, r24
    1942:	20 83       	st	Z, r18

00001944 <.Loc.25>:

    TCCR2A = 0;
    1944:	80 eb       	ldi	r24, 0xB0	; 176
    1946:	90 e0       	ldi	r25, 0x00	; 0

00001948 <.Loc.26>:
    1948:	fc 01       	movw	r30, r24
    194a:	10 82       	st	Z, r1

0000194c <.Loc.27>:
    TCCR2B |= (1<<CS20) ;
    194c:	81 eb       	ldi	r24, 0xB1	; 177
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	fc 01       	movw	r30, r24
    1952:	20 81       	ld	r18, Z
    1954:	81 eb       	ldi	r24, 0xB1	; 177
    1956:	90 e0       	ldi	r25, 0x00	; 0

00001958 <.Loc.28>:
    1958:	21 60       	ori	r18, 0x01	; 1
    195a:	fc 01       	movw	r30, r24
    195c:	20 83       	st	Z, r18

0000195e <.Loc.29>:
    //16000000 / 256 = 62,500
    //1 / 62500 = 0.000016s
    //62500x/sec
    TIMSK2 = (1<<TOIE2);
    195e:	80 e7       	ldi	r24, 0x70	; 112
    1960:	90 e0       	ldi	r25, 0x00	; 0

00001962 <.Loc.30>:
    1962:	21 e0       	ldi	r18, 0x01	; 1
    1964:	fc 01       	movw	r30, r24
    1966:	20 83       	st	Z, r18

00001968 <.Loc.31>:
}
    1968:	00 00       	nop
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	08 95       	ret

00001970 <GetDistanceFront>:

int GetDistanceFront(void){
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	6e 97       	sbiw	r28, 0x1e	; 30
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61

00001984 <.Loc.33>:
    int Distance;
    TriggerPulseFront();
    1984:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <TriggerPulseFront>

00001988 <.Loc.34>:
	...

0000198a <.L3>:
    while ((port_ech_F & (1<<pin_ech_F)) == 0){
    198a:	86 e0       	ldi	r24, 0x06	; 6
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	dc 01       	movw	r26, r24
    1990:	8c 91       	ld	r24, X

00001992 <.Loc.36>:
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	88 70       	andi	r24, 0x08	; 8
    1998:	99 27       	eor	r25, r25

0000199a <.Loc.37>:
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	b1 f3       	breq	.-20     	; 0x198a <.L3>

0000199e <.Loc.38>:
    }
    TCNT2 = 0;
    199e:	82 eb       	ldi	r24, 0xB2	; 178
    19a0:	90 e0       	ldi	r25, 0x00	; 0

000019a2 <.Loc.39>:
    19a2:	fc 01       	movw	r30, r24
    19a4:	10 82       	st	Z, r1

000019a6 <.Loc.40>:
    TIFR2 = 1<<TOV2;
    19a6:	87 e3       	ldi	r24, 0x37	; 55
    19a8:	90 e0       	ldi	r25, 0x00	; 0

000019aa <.Loc.41>:
    19aa:	21 e0       	ldi	r18, 0x01	; 1
    19ac:	dc 01       	movw	r26, r24
    19ae:	2c 93       	st	X, r18

000019b0 <.Loc.42>:
    count = 0;
    19b0:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <count+0x1>
    19b4:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <count>

000019b8 <.Loc.43>:
	...

000019ba <.L4>:
    while ((port_ech_F & (1<<pin_ech_F)) != 0){
    19ba:	86 e0       	ldi	r24, 0x06	; 6
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	fc 01       	movw	r30, r24
    19c0:	80 81       	ld	r24, Z

000019c2 <.Loc.45>:
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	88 70       	andi	r24, 0x08	; 8
    19c8:	99 27       	eor	r25, r25

000019ca <.Loc.46>:
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	b1 f7       	brne	.-20     	; 0x19ba <.L4>

000019ce <.Loc.47>:

    }
    Distance = count;
    19ce:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <count>
    19d2:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <count+0x1>
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01

000019da <.Loc.48>:
    Distance = Distance * 0.008 * 343;
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	9c 01       	movw	r18, r24
    19e0:	99 0f       	add	r25, r25
    19e2:	44 0b       	sbc	r20, r20
    19e4:	55 0b       	sbc	r21, r21
    19e6:	2f 87       	std	Y+15, r18	; 0x0f
    19e8:	38 8b       	std	Y+16, r19	; 0x10
    19ea:	49 8b       	std	Y+17, r20	; 0x11
    19ec:	5a 8b       	std	Y+18, r21	; 0x12
    19ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    19f0:	78 89       	ldd	r23, Y+16	; 0x10
    19f2:	89 89       	ldd	r24, Y+17	; 0x11
    19f4:	9a 89       	ldd	r25, Y+18	; 0x12
    19f6:	0e 94 2d 14 	call	0x285a	; 0x285a <__floatsisf>
    19fa:	6b 83       	std	Y+3, r22	; 0x03
    19fc:	7c 83       	std	Y+4, r23	; 0x04
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	2f e6       	ldi	r18, 0x6F	; 111
    1a04:	32 e1       	ldi	r19, 0x12	; 18
    1a06:	43 e0       	ldi	r20, 0x03	; 3
    1a08:	5c e3       	ldi	r21, 0x3C	; 60
    1a0a:	6b 81       	ldd	r22, Y+3	; 0x03
    1a0c:	7c 81       	ldd	r23, Y+4	; 0x04
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1a16:	6b 8b       	std	Y+19, r22	; 0x13
    1a18:	7c 8b       	std	Y+20, r23	; 0x14
    1a1a:	8d 8b       	std	Y+21, r24	; 0x15
    1a1c:	9e 8b       	std	Y+22, r25	; 0x16
    1a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a20:	9c 89       	ldd	r25, Y+20	; 0x14
    1a22:	ad 89       	ldd	r26, Y+21	; 0x15
    1a24:	be 89       	ldd	r27, Y+22	; 0x16
    1a26:	8f 83       	std	Y+7, r24	; 0x07
    1a28:	98 87       	std	Y+8, r25	; 0x08
    1a2a:	a9 87       	std	Y+9, r26	; 0x09
    1a2c:	ba 87       	std	Y+10, r27	; 0x0a

00001a2e <.Loc.49>:
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e8       	ldi	r19, 0x80	; 128
    1a32:	4b ea       	ldi	r20, 0xAB	; 171
    1a34:	53 e4       	ldi	r21, 0x43	; 67
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1a42:	6f 8b       	std	Y+23, r22	; 0x17
    1a44:	78 8f       	std	Y+24, r23	; 0x18
    1a46:	89 8f       	std	Y+25, r24	; 0x19
    1a48:	9a 8f       	std	Y+26, r25	; 0x1a
    1a4a:	2f 89       	ldd	r18, Y+23	; 0x17
    1a4c:	38 8d       	ldd	r19, Y+24	; 0x18
    1a4e:	49 8d       	ldd	r20, Y+25	; 0x19
    1a50:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a52:	2b 87       	std	Y+11, r18	; 0x0b
    1a54:	3c 87       	std	Y+12, r19	; 0x0c
    1a56:	4d 87       	std	Y+13, r20	; 0x0d
    1a58:	5e 87       	std	Y+14, r21	; 0x0e

00001a5a <.Loc.50>:
    1a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a62:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fixsfsi>
    1a66:	6b 8f       	std	Y+27, r22	; 0x1b
    1a68:	7c 8f       	std	Y+28, r23	; 0x1c
    1a6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a6e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1a70:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1a72:	5a 83       	std	Y+2, r21	; 0x02
    1a74:	49 83       	std	Y+1, r20	; 0x01

00001a76 <.Loc.51>:
    //340  m/s
    //34 cm / ms
    //340   mm / ms
    //0.34  mm / us
    //5.44 * count geeft distance in mm
    return Distance;
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02

00001a7a <.Loc.52>:
}
    1a7a:	6e 96       	adiw	r28, 0x1e	; 30
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <TriggerPulseFront>:
void TriggerPulseFront (void){
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	c8 54       	subi	r28, 0x48	; 72
    1a96:	d1 09       	sbc	r29, r1
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61

00001aa2 <.Loc.54>:
    port_tri_F |= (1<<pin_tri_F);
    1aa2:	82 e2       	ldi	r24, 0x22	; 34
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	2c 91       	ld	r18, X
    1aaa:	82 e2       	ldi	r24, 0x22	; 34
    1aac:	90 e0       	ldi	r25, 0x00	; 0

00001aae <.Loc.55>:
    1aae:	21 60       	ori	r18, 0x01	; 1
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	20 83       	st	Z, r18
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a0 e2       	ldi	r26, 0x20	; 32
    1aba:	b1 e4       	ldi	r27, 0x41	; 65
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	9a 83       	std	Y+2, r25	; 0x02
    1ac0:	ab 83       	std	Y+3, r26	; 0x03
    1ac2:	bc 83       	std	Y+4, r27	; 0x04

00001ac4 <.LBB56>:
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1ac4:	2b ea       	ldi	r18, 0xAB	; 171
    1ac6:	3a ea       	ldi	r19, 0xAA	; 170
    1ac8:	4a ea       	ldi	r20, 0xAA	; 170
    1aca:	50 e4       	ldi	r21, 0x40	; 64
    1acc:	69 81       	ldd	r22, Y+1	; 0x01
    1ace:	7a 81       	ldd	r23, Y+2	; 0x02
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1ad8:	6d a3       	std	Y+37, r22	; 0x25
    1ada:	7e a3       	std	Y+38, r23	; 0x26
    1adc:	8f a3       	std	Y+39, r24	; 0x27
    1ade:	98 a7       	std	Y+40, r25	; 0x28
    1ae0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae4:	af a1       	ldd	r26, Y+39	; 0x27
    1ae6:	b8 a5       	ldd	r27, Y+40	; 0x28
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	af 83       	std	Y+7, r26	; 0x07
    1aee:	b8 87       	std	Y+8, r27	; 0x08

00001af0 <.Loc.57>:
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	50 e4       	ldi	r21, 0x40	; 64
    1af8:	69 81       	ldd	r22, Y+1	; 0x01
    1afa:	7a 81       	ldd	r23, Y+2	; 0x02
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1b04:	69 a7       	std	Y+41, r22	; 0x29
    1b06:	7a a7       	std	Y+42, r23	; 0x2a
    1b08:	8b a7       	std	Y+43, r24	; 0x2b
    1b0a:	9c a7       	std	Y+44, r25	; 0x2c
    1b0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b10:	ab a5       	ldd	r26, Y+43	; 0x2b
    1b12:	bc a5       	ldd	r27, Y+44	; 0x2c
    1b14:	89 87       	std	Y+9, r24	; 0x09
    1b16:	9a 87       	std	Y+10, r25	; 0x0a
    1b18:	ab 87       	std	Y+11, r26	; 0x0b
    1b1a:	bc 87       	std	Y+12, r27	; 0x0c

00001b1c <.Loc.58>:
	if (__tmp < 1.0)
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	6d 81       	ldd	r22, Y+5	; 0x05
    1b26:	7e 81       	ldd	r23, Y+6	; 0x06
    1b28:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2a:	98 85       	ldd	r25, Y+8	; 0x08
    1b2c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__cmpsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	1c f4       	brge	.+6      	; 0x1b3a <.L28>

00001b34 <.Loc.59>:
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	8d 87       	std	Y+13, r24	; 0x0d
    1b38:	e8 c0       	rjmp	.+464    	; 0x1d0a <.L9>

00001b3a <.L28>:
	else if (__tmp2 > 65535)
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	69 85       	ldd	r22, Y+9	; 0x09
    1b44:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b46:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b48:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b4a:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	09 f0       	breq	.+2      	; 0x1b54 <L0^A>

00001b52 <L0^A>:
    1b52:	0c f4       	brge	.+2      	; 0x1b56 <.Loc.61>

00001b54 <L0^A>:
    1b54:	9f c0       	rjmp	.+318    	; 0x1c94 <.L29>

00001b56 <.Loc.61>:
	{
		_delay_ms(__us / 1000.0);
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a e7       	ldi	r20, 0x7A	; 122
    1b5c:	54 e4       	ldi	r21, 0x44	; 68
    1b5e:	69 81       	ldd	r22, Y+1	; 0x01
    1b60:	7a 81       	ldd	r23, Y+2	; 0x02
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	0e 94 83 13 	call	0x2706	; 0x2706 <__divsf3>
    1b6a:	6d a7       	std	Y+45, r22	; 0x2d
    1b6c:	7e a7       	std	Y+46, r23	; 0x2e
    1b6e:	8f a7       	std	Y+47, r24	; 0x2f
    1b70:	98 ab       	std	Y+48, r25	; 0x30
    1b72:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b74:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b76:	af a5       	ldd	r26, Y+47	; 0x2f
    1b78:	b8 a9       	ldd	r27, Y+48	; 0x30
    1b7a:	8e 87       	std	Y+14, r24	; 0x0e
    1b7c:	9f 87       	std	Y+15, r25	; 0x0f
    1b7e:	a8 8b       	std	Y+16, r26	; 0x10
    1b80:	b9 8b       	std	Y+17, r27	; 0x11

00001b82 <.LBB58>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	4a e7       	ldi	r20, 0x7A	; 122
    1b88:	55 e4       	ldi	r21, 0x45	; 69
    1b8a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b8c:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b8e:	88 89       	ldd	r24, Y+16	; 0x10
    1b90:	99 89       	ldd	r25, Y+17	; 0x11
    1b92:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1b96:	69 ab       	std	Y+49, r22	; 0x31
    1b98:	7a ab       	std	Y+50, r23	; 0x32
    1b9a:	8b ab       	std	Y+51, r24	; 0x33
    1b9c:	9c ab       	std	Y+52, r25	; 0x34
    1b9e:	89 a9       	ldd	r24, Y+49	; 0x31
    1ba0:	9a a9       	ldd	r25, Y+50	; 0x32
    1ba2:	ab a9       	ldd	r26, Y+51	; 0x33
    1ba4:	bc a9       	ldd	r27, Y+52	; 0x34
    1ba6:	8a 8b       	std	Y+18, r24	; 0x12
    1ba8:	9b 8b       	std	Y+19, r25	; 0x13
    1baa:	ac 8b       	std	Y+20, r26	; 0x14
    1bac:	bd 8b       	std	Y+21, r27	; 0x15

00001bae <.Loc.63>:
	if (__tmp < 1.0)
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	6a 89       	ldd	r22, Y+18	; 0x12
    1bb8:	7b 89       	ldd	r23, Y+19	; 0x13
    1bba:	8c 89       	ldd	r24, Y+20	; 0x14
    1bbc:	9d 89       	ldd	r25, Y+21	; 0x15
    1bbe:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__cmpsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <.L30>

00001bc6 <.Loc.64>:
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9f 8b       	std	Y+23, r25	; 0x17
    1bcc:	8e 8b       	std	Y+22, r24	; 0x16
    1bce:	57 c0       	rjmp	.+174    	; 0x1c7e <.L14>

00001bd0 <.L30>:
	else if (__tmp > 65535)
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	4f e7       	ldi	r20, 0x7F	; 127
    1bd6:	57 e4       	ldi	r21, 0x47	; 71
    1bd8:	6a 89       	ldd	r22, Y+18	; 0x12
    1bda:	7b 89       	ldd	r23, Y+19	; 0x13
    1bdc:	8c 89       	ldd	r24, Y+20	; 0x14
    1bde:	9d 89       	ldd	r25, Y+21	; 0x15
    1be0:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    1be4:	88 23       	and	r24, r24
    1be6:	d9 f1       	breq	.+118    	; 0x1c5e <.L31>
    1be8:	d4 f1       	brlt	.+116    	; 0x1c5e <.L31>

00001bea <.Loc.66>:
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bf4:	7f 85       	ldd	r23, Y+15	; 0x0f
    1bf6:	88 89       	ldd	r24, Y+16	; 0x10
    1bf8:	99 89       	ldd	r25, Y+17	; 0x11
    1bfa:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1bfe:	6d ab       	std	Y+53, r22	; 0x35
    1c00:	7e ab       	std	Y+54, r23	; 0x36
    1c02:	8f ab       	std	Y+55, r24	; 0x37
    1c04:	98 af       	std	Y+56, r25	; 0x38
    1c06:	8d a9       	ldd	r24, Y+53	; 0x35
    1c08:	9e a9       	ldd	r25, Y+54	; 0x36
    1c0a:	af a9       	ldd	r26, Y+55	; 0x37
    1c0c:	b8 ad       	ldd	r27, Y+56	; 0x38
    1c0e:	89 a3       	std	Y+33, r24	; 0x21
    1c10:	9a a3       	std	Y+34, r25	; 0x22
    1c12:	ab a3       	std	Y+35, r26	; 0x23
    1c14:	bc a3       	std	Y+36, r27	; 0x24

00001c16 <.Loc.67>:
    1c16:	69 a1       	ldd	r22, Y+33	; 0x21
    1c18:	7a a1       	ldd	r23, Y+34	; 0x22
    1c1a:	8b a1       	ldd	r24, Y+35	; 0x23
    1c1c:	9c a1       	ldd	r25, Y+36	; 0x24
    1c1e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    1c22:	69 af       	std	Y+57, r22	; 0x39
    1c24:	7a af       	std	Y+58, r23	; 0x3a
    1c26:	8b af       	std	Y+59, r24	; 0x3b
    1c28:	9c af       	std	Y+60, r25	; 0x3c
    1c2a:	a9 ad       	ldd	r26, Y+57	; 0x39
    1c2c:	ba ad       	ldd	r27, Y+58	; 0x3a
    1c2e:	bf 8b       	std	Y+23, r27	; 0x17
    1c30:	ae 8b       	std	Y+22, r26	; 0x16

00001c32 <.Loc.68>:
		while(__ticks)
    1c32:	10 c0       	rjmp	.+32     	; 0x1c54 <.L17>

00001c34 <.L18>:
    1c34:	80 e9       	ldi	r24, 0x90	; 144
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	99 8f       	std	Y+25, r25	; 0x19
    1c3a:	88 8f       	std	Y+24, r24	; 0x18

00001c3c <.LBB60>:
    1c3c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c3e:	99 8d       	ldd	r25, Y+25	; 0x19

00001c40 <.L1^B1>:
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <.L1^B1>
    1c44:	99 8f       	std	Y+25, r25	; 0x19
    1c46:	88 8f       	std	Y+24, r24	; 0x18

00001c48 <.Loc.70>:
	...

00001c4a <.LBE60>:
			__ticks --;
    1c4a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c4c:	9f 89       	ldd	r25, Y+23	; 0x17
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	9f 8b       	std	Y+23, r25	; 0x17
    1c52:	8e 8b       	std	Y+22, r24	; 0x16

00001c54 <.L17>:
		while(__ticks)
    1c54:	8e 89       	ldd	r24, Y+22	; 0x16
    1c56:	9f 89       	ldd	r25, Y+23	; 0x17
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	61 f7       	brne	.-40     	; 0x1c34 <.L18>

00001c5c <.Loc.73>:
		return;
    1c5c:	56 c0       	rjmp	.+172    	; 0x1d0a <.L9>

00001c5e <.L31>:
		__ticks = (uint16_t)__tmp;
    1c5e:	6a 89       	ldd	r22, Y+18	; 0x12
    1c60:	7b 89       	ldd	r23, Y+19	; 0x13
    1c62:	8c 89       	ldd	r24, Y+20	; 0x14
    1c64:	9d 89       	ldd	r25, Y+21	; 0x15
    1c66:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    1c6a:	21 96       	adiw	r28, 0x01	; 1
    1c6c:	6c af       	std	Y+60, r22	; 0x3c
    1c6e:	7d af       	std	Y+61, r23	; 0x3d
    1c70:	8e af       	std	Y+62, r24	; 0x3e
    1c72:	9f af       	std	Y+63, r25	; 0x3f
    1c74:	21 97       	sbiw	r28, 0x01	; 1
    1c76:	ed ad       	ldd	r30, Y+61	; 0x3d
    1c78:	fe ad       	ldd	r31, Y+62	; 0x3e
    1c7a:	ff 8b       	std	Y+23, r31	; 0x17
    1c7c:	ee 8b       	std	Y+22, r30	; 0x16

00001c7e <.L14>:
    1c7e:	8e 89       	ldd	r24, Y+22	; 0x16
    1c80:	9f 89       	ldd	r25, Y+23	; 0x17
    1c82:	9b 8f       	std	Y+27, r25	; 0x1b
    1c84:	8a 8f       	std	Y+26, r24	; 0x1a

00001c86 <.LBB62>:
    1c86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c88:	9b 8d       	ldd	r25, Y+27	; 0x1b

00001c8a <.L1^B2>:
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <.L1^B2>
    1c8e:	9b 8f       	std	Y+27, r25	; 0x1b
    1c90:	8a 8f       	std	Y+26, r24	; 0x1a

00001c92 <.Loc.76>:
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
    1c92:	3b c0       	rjmp	.+118    	; 0x1d0a <.L9>

00001c94 <.L29>:
	}
	else if (__tmp > 255)
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	53 e4       	ldi	r21, 0x43	; 67
    1c9c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c9e:	7e 81       	ldd	r23, Y+6	; 0x06
    1ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca2:	98 85       	ldd	r25, Y+8	; 0x08
    1ca4:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	f9 f0       	breq	.+62     	; 0x1cea <.L32>
    1cac:	f4 f0       	brlt	.+60     	; 0x1cea <.L32>

00001cae <.LBB64>:
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1cae:	69 85       	ldd	r22, Y+9	; 0x09
    1cb0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cb6:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    1cba:	25 96       	adiw	r28, 0x05	; 5
    1cbc:	6c af       	std	Y+60, r22	; 0x3c
    1cbe:	7d af       	std	Y+61, r23	; 0x3d
    1cc0:	8e af       	std	Y+62, r24	; 0x3e
    1cc2:	9f af       	std	Y+63, r25	; 0x3f
    1cc4:	25 97       	sbiw	r28, 0x05	; 5
    1cc6:	23 96       	adiw	r28, 0x03	; 3
    1cc8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cca:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ccc:	23 97       	sbiw	r28, 0x03	; 3
    1cce:	9d 8f       	std	Y+29, r25	; 0x1d
    1cd0:	8c 8f       	std	Y+28, r24	; 0x1c
    1cd2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cd4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cd6:	9f 8f       	std	Y+31, r25	; 0x1f
    1cd8:	8e 8f       	std	Y+30, r24	; 0x1e

00001cda <.LBB65>:
	__asm__ volatile (
    1cda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cdc:	9f 8d       	ldd	r25, Y+31	; 0x1f

00001cde <.L1^B3>:
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <.L1^B3>
    1ce2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ce4:	8e 8f       	std	Y+30, r24	; 0x1e

00001ce6 <.Loc.80>:
	...

00001ce8 <.LBE65>:
		_delay_loop_2(__ticks);
		return;
    1ce8:	17 c0       	rjmp	.+46     	; 0x1d18 <.L22>

00001cea <.L32>:
	}
	else
		__ticks = (uint8_t)__tmp;
    1cea:	6d 81       	ldd	r22, Y+5	; 0x05
    1cec:	7e 81       	ldd	r23, Y+6	; 0x06
    1cee:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf0:	98 85       	ldd	r25, Y+8	; 0x08
    1cf2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    1cf6:	29 96       	adiw	r28, 0x09	; 9
    1cf8:	6c af       	std	Y+60, r22	; 0x3c
    1cfa:	7d af       	std	Y+61, r23	; 0x3d
    1cfc:	8e af       	std	Y+62, r24	; 0x3e
    1cfe:	9f af       	std	Y+63, r25	; 0x3f
    1d00:	29 97       	sbiw	r28, 0x09	; 9
    1d02:	26 96       	adiw	r28, 0x06	; 6
    1d04:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d06:	26 97       	sbiw	r28, 0x06	; 6
    1d08:	9d 87       	std	Y+13, r25	; 0x0d

00001d0a <.L9>:
    1d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0c:	88 a3       	std	Y+32, r24	; 0x20

00001d0e <.LBB67>:
	__asm__ volatile (
    1d0e:	88 a1       	ldd	r24, Y+32	; 0x20

00001d10 <.L1^B4>:
    1d10:	8a 95       	dec	r24
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <.L1^B4>
    1d14:	88 a3       	std	Y+32, r24	; 0x20

00001d16 <.Loc.84>:
	...

00001d18 <.L22>:
    _delay_us(10);
    port_tri_F &= (~(1<<pin_tri_F));
    1d18:	82 e2       	ldi	r24, 0x22	; 34
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	2c 91       	ld	r18, X

00001d20 <.Loc.86>:
    1d20:	82 e2       	ldi	r24, 0x22	; 34
    1d22:	90 e0       	ldi	r25, 0x00	; 0

00001d24 <.Loc.87>:
    1d24:	2e 7f       	andi	r18, 0xFE	; 254
    1d26:	fc 01       	movw	r30, r24
    1d28:	20 83       	st	Z, r18

00001d2a <.Loc.88>:
}
    1d2a:	00 00       	nop
    1d2c:	c8 5b       	subi	r28, 0xB8	; 184
    1d2e:	df 4f       	sbci	r29, 0xFF	; 255
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	08 95       	ret

00001d40 <GetDistanceLeft>:

int GetDistanceLeft(void){
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	6e 97       	sbiw	r28, 0x1e	; 30
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61

00001d54 <.Loc.90>:
    int Distance;
    TriggerPulseLeft();
    1d54:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <TriggerPulseLeft>

00001d58 <.Loc.91>:
	...

00001d5a <.L34>:
    while ((port_ech_L & (1<<pin_ech_L)) == 0){
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	dc 01       	movw	r26, r24
    1d60:	8c 91       	ld	r24, X

00001d62 <.Loc.93>:
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	84 70       	andi	r24, 0x04	; 4
    1d68:	99 27       	eor	r25, r25

00001d6a <.Loc.94>:
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	b1 f3       	breq	.-20     	; 0x1d5a <.L34>

00001d6e <.Loc.95>:
    }
    TCNT2 = 0;
    1d6e:	82 eb       	ldi	r24, 0xB2	; 178
    1d70:	90 e0       	ldi	r25, 0x00	; 0

00001d72 <.Loc.96>:
    1d72:	fc 01       	movw	r30, r24
    1d74:	10 82       	st	Z, r1

00001d76 <.Loc.97>:
    TIFR2 = 1<<TOV2;
    1d76:	87 e3       	ldi	r24, 0x37	; 55
    1d78:	90 e0       	ldi	r25, 0x00	; 0

00001d7a <.Loc.98>:
    1d7a:	21 e0       	ldi	r18, 0x01	; 1
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	2c 93       	st	X, r18

00001d80 <.Loc.99>:
    count = 0;
    1d80:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <count+0x1>
    1d84:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <count>

00001d88 <.Loc.100>:
	...

00001d8a <.L35>:
    while ((port_ech_L & (1<<pin_ech_L)) != 0){
    1d8a:	86 e0       	ldi	r24, 0x06	; 6
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	fc 01       	movw	r30, r24
    1d90:	80 81       	ld	r24, Z

00001d92 <.Loc.102>:
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	84 70       	andi	r24, 0x04	; 4
    1d98:	99 27       	eor	r25, r25

00001d9a <.Loc.103>:
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	b1 f7       	brne	.-20     	; 0x1d8a <.L35>

00001d9e <.Loc.104>:

    }
    Distance = count;
    1d9e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <count>
    1da2:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <count+0x1>
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01

00001daa <.Loc.105>:
    Distance = Distance * 0.008 * 343;
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
    1dae:	9c 01       	movw	r18, r24
    1db0:	99 0f       	add	r25, r25
    1db2:	44 0b       	sbc	r20, r20
    1db4:	55 0b       	sbc	r21, r21
    1db6:	2f 87       	std	Y+15, r18	; 0x0f
    1db8:	38 8b       	std	Y+16, r19	; 0x10
    1dba:	49 8b       	std	Y+17, r20	; 0x11
    1dbc:	5a 8b       	std	Y+18, r21	; 0x12
    1dbe:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dc0:	78 89       	ldd	r23, Y+16	; 0x10
    1dc2:	89 89       	ldd	r24, Y+17	; 0x11
    1dc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc6:	0e 94 2d 14 	call	0x285a	; 0x285a <__floatsisf>
    1dca:	6b 83       	std	Y+3, r22	; 0x03
    1dcc:	7c 83       	std	Y+4, r23	; 0x04
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	2f e6       	ldi	r18, 0x6F	; 111
    1dd4:	32 e1       	ldi	r19, 0x12	; 18
    1dd6:	43 e0       	ldi	r20, 0x03	; 3
    1dd8:	5c e3       	ldi	r21, 0x3C	; 60
    1dda:	6b 81       	ldd	r22, Y+3	; 0x03
    1ddc:	7c 81       	ldd	r23, Y+4	; 0x04
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1de6:	6b 8b       	std	Y+19, r22	; 0x13
    1de8:	7c 8b       	std	Y+20, r23	; 0x14
    1dea:	8d 8b       	std	Y+21, r24	; 0x15
    1dec:	9e 8b       	std	Y+22, r25	; 0x16
    1dee:	8b 89       	ldd	r24, Y+19	; 0x13
    1df0:	9c 89       	ldd	r25, Y+20	; 0x14
    1df2:	ad 89       	ldd	r26, Y+21	; 0x15
    1df4:	be 89       	ldd	r27, Y+22	; 0x16
    1df6:	8f 83       	std	Y+7, r24	; 0x07
    1df8:	98 87       	std	Y+8, r25	; 0x08
    1dfa:	a9 87       	std	Y+9, r26	; 0x09
    1dfc:	ba 87       	std	Y+10, r27	; 0x0a

00001dfe <.Loc.106>:
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e8       	ldi	r19, 0x80	; 128
    1e02:	4b ea       	ldi	r20, 0xAB	; 171
    1e04:	53 e4       	ldi	r21, 0x43	; 67
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1e12:	6f 8b       	std	Y+23, r22	; 0x17
    1e14:	78 8f       	std	Y+24, r23	; 0x18
    1e16:	89 8f       	std	Y+25, r24	; 0x19
    1e18:	9a 8f       	std	Y+26, r25	; 0x1a
    1e1a:	2f 89       	ldd	r18, Y+23	; 0x17
    1e1c:	38 8d       	ldd	r19, Y+24	; 0x18
    1e1e:	49 8d       	ldd	r20, Y+25	; 0x19
    1e20:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1e22:	2b 87       	std	Y+11, r18	; 0x0b
    1e24:	3c 87       	std	Y+12, r19	; 0x0c
    1e26:	4d 87       	std	Y+13, r20	; 0x0d
    1e28:	5e 87       	std	Y+14, r21	; 0x0e

00001e2a <.Loc.107>:
    1e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e32:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fixsfsi>
    1e36:	6b 8f       	std	Y+27, r22	; 0x1b
    1e38:	7c 8f       	std	Y+28, r23	; 0x1c
    1e3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e3e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1e40:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1e42:	5a 83       	std	Y+2, r21	; 0x02
    1e44:	49 83       	std	Y+1, r20	; 0x01

00001e46 <.Loc.108>:
    //340  m/s
    //34 cm / ms
    //340   mm / ms
    //0.34  mm / us
    //5.44 * count geeft distance in mm
    return Distance;
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02

00001e4a <.Loc.109>:
}
    1e4a:	6e 96       	adiw	r28, 0x1e	; 30
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <TriggerPulseLeft>:
void TriggerPulseLeft (void){
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	c8 54       	subi	r28, 0x48	; 72
    1e66:	d1 09       	sbc	r29, r1
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61

00001e72 <.Loc.111>:
    port_tri_L |= (1<<pin_tri_L);
    1e72:	82 e2       	ldi	r24, 0x22	; 34
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	dc 01       	movw	r26, r24
    1e78:	2c 91       	ld	r18, X
    1e7a:	82 e2       	ldi	r24, 0x22	; 34
    1e7c:	90 e0       	ldi	r25, 0x00	; 0

00001e7e <.Loc.112>:
    1e7e:	24 60       	ori	r18, 0x04	; 4
    1e80:	fc 01       	movw	r30, r24
    1e82:	20 83       	st	Z, r18
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a0 e2       	ldi	r26, 0x20	; 32
    1e8a:	b1 e4       	ldi	r27, 0x41	; 65
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	ab 83       	std	Y+3, r26	; 0x03
    1e92:	bc 83       	std	Y+4, r27	; 0x04

00001e94 <.LBB69>:
	__tmp = ((F_CPU) / 3e6) * __us;
    1e94:	2b ea       	ldi	r18, 0xAB	; 171
    1e96:	3a ea       	ldi	r19, 0xAA	; 170
    1e98:	4a ea       	ldi	r20, 0xAA	; 170
    1e9a:	50 e4       	ldi	r21, 0x40	; 64
    1e9c:	69 81       	ldd	r22, Y+1	; 0x01
    1e9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1ea8:	6d a3       	std	Y+37, r22	; 0x25
    1eaa:	7e a3       	std	Y+38, r23	; 0x26
    1eac:	8f a3       	std	Y+39, r24	; 0x27
    1eae:	98 a7       	std	Y+40, r25	; 0x28
    1eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1eb4:	af a1       	ldd	r26, Y+39	; 0x27
    1eb6:	b8 a5       	ldd	r27, Y+40	; 0x28
    1eb8:	8d 83       	std	Y+5, r24	; 0x05
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	af 83       	std	Y+7, r26	; 0x07
    1ebe:	b8 87       	std	Y+8, r27	; 0x08

00001ec0 <.Loc.114>:
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e8       	ldi	r20, 0x80	; 128
    1ec6:	50 e4       	ldi	r21, 0x40	; 64
    1ec8:	69 81       	ldd	r22, Y+1	; 0x01
    1eca:	7a 81       	ldd	r23, Y+2	; 0x02
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1ed4:	69 a7       	std	Y+41, r22	; 0x29
    1ed6:	7a a7       	std	Y+42, r23	; 0x2a
    1ed8:	8b a7       	std	Y+43, r24	; 0x2b
    1eda:	9c a7       	std	Y+44, r25	; 0x2c
    1edc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ede:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee0:	ab a5       	ldd	r26, Y+43	; 0x2b
    1ee2:	bc a5       	ldd	r27, Y+44	; 0x2c
    1ee4:	89 87       	std	Y+9, r24	; 0x09
    1ee6:	9a 87       	std	Y+10, r25	; 0x0a
    1ee8:	ab 87       	std	Y+11, r26	; 0x0b
    1eea:	bc 87       	std	Y+12, r27	; 0x0c

00001eec <.Loc.115>:
	if (__tmp < 1.0)
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ef6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ef8:	8f 81       	ldd	r24, Y+7	; 0x07
    1efa:	98 85       	ldd	r25, Y+8	; 0x08
    1efc:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__cmpsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	1c f4       	brge	.+6      	; 0x1f0a <.L59>

00001f04 <.Loc.116>:
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	8d 87       	std	Y+13, r24	; 0x0d
    1f08:	e8 c0       	rjmp	.+464    	; 0x20da <.L40>

00001f0a <.L59>:
	else if (__tmp2 > 65535)
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	69 85       	ldd	r22, Y+9	; 0x09
    1f14:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f18:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1a:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    1f1e:	88 23       	and	r24, r24
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <L0^A>

00001f22 <L0^A>:
    1f22:	0c f4       	brge	.+2      	; 0x1f26 <.Loc.118>

00001f24 <L0^A>:
    1f24:	9f c0       	rjmp	.+318    	; 0x2064 <.L60>

00001f26 <.Loc.118>:
		_delay_ms(__us / 1000.0);
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a e7       	ldi	r20, 0x7A	; 122
    1f2c:	54 e4       	ldi	r21, 0x44	; 68
    1f2e:	69 81       	ldd	r22, Y+1	; 0x01
    1f30:	7a 81       	ldd	r23, Y+2	; 0x02
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	0e 94 83 13 	call	0x2706	; 0x2706 <__divsf3>
    1f3a:	6d a7       	std	Y+45, r22	; 0x2d
    1f3c:	7e a7       	std	Y+46, r23	; 0x2e
    1f3e:	8f a7       	std	Y+47, r24	; 0x2f
    1f40:	98 ab       	std	Y+48, r25	; 0x30
    1f42:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f44:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f46:	af a5       	ldd	r26, Y+47	; 0x2f
    1f48:	b8 a9       	ldd	r27, Y+48	; 0x30
    1f4a:	8e 87       	std	Y+14, r24	; 0x0e
    1f4c:	9f 87       	std	Y+15, r25	; 0x0f
    1f4e:	a8 8b       	std	Y+16, r26	; 0x10
    1f50:	b9 8b       	std	Y+17, r27	; 0x11

00001f52 <.LBB71>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a e7       	ldi	r20, 0x7A	; 122
    1f58:	55 e4       	ldi	r21, 0x45	; 69
    1f5a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f5c:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f5e:	88 89       	ldd	r24, Y+16	; 0x10
    1f60:	99 89       	ldd	r25, Y+17	; 0x11
    1f62:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1f66:	69 ab       	std	Y+49, r22	; 0x31
    1f68:	7a ab       	std	Y+50, r23	; 0x32
    1f6a:	8b ab       	std	Y+51, r24	; 0x33
    1f6c:	9c ab       	std	Y+52, r25	; 0x34
    1f6e:	89 a9       	ldd	r24, Y+49	; 0x31
    1f70:	9a a9       	ldd	r25, Y+50	; 0x32
    1f72:	ab a9       	ldd	r26, Y+51	; 0x33
    1f74:	bc a9       	ldd	r27, Y+52	; 0x34
    1f76:	8a 8b       	std	Y+18, r24	; 0x12
    1f78:	9b 8b       	std	Y+19, r25	; 0x13
    1f7a:	ac 8b       	std	Y+20, r26	; 0x14
    1f7c:	bd 8b       	std	Y+21, r27	; 0x15

00001f7e <.Loc.120>:
	if (__tmp < 1.0)
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e8       	ldi	r20, 0x80	; 128
    1f84:	5f e3       	ldi	r21, 0x3F	; 63
    1f86:	6a 89       	ldd	r22, Y+18	; 0x12
    1f88:	7b 89       	ldd	r23, Y+19	; 0x13
    1f8a:	8c 89       	ldd	r24, Y+20	; 0x14
    1f8c:	9d 89       	ldd	r25, Y+21	; 0x15
    1f8e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__cmpsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <.L61>

00001f96 <.Loc.121>:
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9f 8b       	std	Y+23, r25	; 0x17
    1f9c:	8e 8b       	std	Y+22, r24	; 0x16
    1f9e:	57 c0       	rjmp	.+174    	; 0x204e <.L45>

00001fa0 <.L61>:
	else if (__tmp > 65535)
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	3f ef       	ldi	r19, 0xFF	; 255
    1fa4:	4f e7       	ldi	r20, 0x7F	; 127
    1fa6:	57 e4       	ldi	r21, 0x47	; 71
    1fa8:	6a 89       	ldd	r22, Y+18	; 0x12
    1faa:	7b 89       	ldd	r23, Y+19	; 0x13
    1fac:	8c 89       	ldd	r24, Y+20	; 0x14
    1fae:	9d 89       	ldd	r25, Y+21	; 0x15
    1fb0:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	d9 f1       	breq	.+118    	; 0x202e <.L62>
    1fb8:	d4 f1       	brlt	.+116    	; 0x202e <.L62>

00001fba <.Loc.123>:
		__ticks = (uint16_t) (__ms * 10.0);
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	6e 85       	ldd	r22, Y+14	; 0x0e
    1fc4:	7f 85       	ldd	r23, Y+15	; 0x0f
    1fc6:	88 89       	ldd	r24, Y+16	; 0x10
    1fc8:	99 89       	ldd	r25, Y+17	; 0x11
    1fca:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    1fce:	6d ab       	std	Y+53, r22	; 0x35
    1fd0:	7e ab       	std	Y+54, r23	; 0x36
    1fd2:	8f ab       	std	Y+55, r24	; 0x37
    1fd4:	98 af       	std	Y+56, r25	; 0x38
    1fd6:	8d a9       	ldd	r24, Y+53	; 0x35
    1fd8:	9e a9       	ldd	r25, Y+54	; 0x36
    1fda:	af a9       	ldd	r26, Y+55	; 0x37
    1fdc:	b8 ad       	ldd	r27, Y+56	; 0x38
    1fde:	89 a3       	std	Y+33, r24	; 0x21
    1fe0:	9a a3       	std	Y+34, r25	; 0x22
    1fe2:	ab a3       	std	Y+35, r26	; 0x23
    1fe4:	bc a3       	std	Y+36, r27	; 0x24

00001fe6 <.Loc.124>:
    1fe6:	69 a1       	ldd	r22, Y+33	; 0x21
    1fe8:	7a a1       	ldd	r23, Y+34	; 0x22
    1fea:	8b a1       	ldd	r24, Y+35	; 0x23
    1fec:	9c a1       	ldd	r25, Y+36	; 0x24
    1fee:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    1ff2:	69 af       	std	Y+57, r22	; 0x39
    1ff4:	7a af       	std	Y+58, r23	; 0x3a
    1ff6:	8b af       	std	Y+59, r24	; 0x3b
    1ff8:	9c af       	std	Y+60, r25	; 0x3c
    1ffa:	a9 ad       	ldd	r26, Y+57	; 0x39
    1ffc:	ba ad       	ldd	r27, Y+58	; 0x3a
    1ffe:	bf 8b       	std	Y+23, r27	; 0x17
    2000:	ae 8b       	std	Y+22, r26	; 0x16

00002002 <.Loc.125>:
		while(__ticks)
    2002:	10 c0       	rjmp	.+32     	; 0x2024 <.L48>

00002004 <.L49>:
    2004:	80 e9       	ldi	r24, 0x90	; 144
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	99 8f       	std	Y+25, r25	; 0x19
    200a:	88 8f       	std	Y+24, r24	; 0x18

0000200c <.LBB73>:
	__asm__ volatile (
    200c:	88 8d       	ldd	r24, Y+24	; 0x18
    200e:	99 8d       	ldd	r25, Y+25	; 0x19

00002010 <.L1^B5>:
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <.L1^B5>
    2014:	99 8f       	std	Y+25, r25	; 0x19
    2016:	88 8f       	std	Y+24, r24	; 0x18

00002018 <.Loc.127>:
	...

0000201a <.LBE73>:
			__ticks --;
    201a:	8e 89       	ldd	r24, Y+22	; 0x16
    201c:	9f 89       	ldd	r25, Y+23	; 0x17
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	9f 8b       	std	Y+23, r25	; 0x17
    2022:	8e 8b       	std	Y+22, r24	; 0x16

00002024 <.L48>:
		while(__ticks)
    2024:	8e 89       	ldd	r24, Y+22	; 0x16
    2026:	9f 89       	ldd	r25, Y+23	; 0x17
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	61 f7       	brne	.-40     	; 0x2004 <.L49>

0000202c <.Loc.130>:
		return;
    202c:	56 c0       	rjmp	.+172    	; 0x20da <.L40>

0000202e <.L62>:
		__ticks = (uint16_t)__tmp;
    202e:	6a 89       	ldd	r22, Y+18	; 0x12
    2030:	7b 89       	ldd	r23, Y+19	; 0x13
    2032:	8c 89       	ldd	r24, Y+20	; 0x14
    2034:	9d 89       	ldd	r25, Y+21	; 0x15
    2036:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    203a:	21 96       	adiw	r28, 0x01	; 1
    203c:	6c af       	std	Y+60, r22	; 0x3c
    203e:	7d af       	std	Y+61, r23	; 0x3d
    2040:	8e af       	std	Y+62, r24	; 0x3e
    2042:	9f af       	std	Y+63, r25	; 0x3f
    2044:	21 97       	sbiw	r28, 0x01	; 1
    2046:	ed ad       	ldd	r30, Y+61	; 0x3d
    2048:	fe ad       	ldd	r31, Y+62	; 0x3e
    204a:	ff 8b       	std	Y+23, r31	; 0x17
    204c:	ee 8b       	std	Y+22, r30	; 0x16

0000204e <.L45>:
    204e:	8e 89       	ldd	r24, Y+22	; 0x16
    2050:	9f 89       	ldd	r25, Y+23	; 0x17
    2052:	9b 8f       	std	Y+27, r25	; 0x1b
    2054:	8a 8f       	std	Y+26, r24	; 0x1a

00002056 <.LBB75>:
    2056:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2058:	9b 8d       	ldd	r25, Y+27	; 0x1b

0000205a <.L1^B6>:
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <.L1^B6>
    205e:	9b 8f       	std	Y+27, r25	; 0x1b
    2060:	8a 8f       	std	Y+26, r24	; 0x1a

00002062 <.Loc.133>:
}
    2062:	3b c0       	rjmp	.+118    	; 0x20da <.L40>

00002064 <.L60>:
	else if (__tmp > 255)
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4f e7       	ldi	r20, 0x7F	; 127
    206a:	53 e4       	ldi	r21, 0x43	; 67
    206c:	6d 81       	ldd	r22, Y+5	; 0x05
    206e:	7e 81       	ldd	r23, Y+6	; 0x06
    2070:	8f 81       	ldd	r24, Y+7	; 0x07
    2072:	98 85       	ldd	r25, Y+8	; 0x08
    2074:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    2078:	88 23       	and	r24, r24
    207a:	f9 f0       	breq	.+62     	; 0x20ba <.L63>
    207c:	f4 f0       	brlt	.+60     	; 0x20ba <.L63>

0000207e <.LBB77>:
		uint16_t __ticks=(uint16_t)__tmp2;
    207e:	69 85       	ldd	r22, Y+9	; 0x09
    2080:	7a 85       	ldd	r23, Y+10	; 0x0a
    2082:	8b 85       	ldd	r24, Y+11	; 0x0b
    2084:	9c 85       	ldd	r25, Y+12	; 0x0c
    2086:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    208a:	25 96       	adiw	r28, 0x05	; 5
    208c:	6c af       	std	Y+60, r22	; 0x3c
    208e:	7d af       	std	Y+61, r23	; 0x3d
    2090:	8e af       	std	Y+62, r24	; 0x3e
    2092:	9f af       	std	Y+63, r25	; 0x3f
    2094:	25 97       	sbiw	r28, 0x05	; 5
    2096:	23 96       	adiw	r28, 0x03	; 3
    2098:	8e ad       	ldd	r24, Y+62	; 0x3e
    209a:	9f ad       	ldd	r25, Y+63	; 0x3f
    209c:	23 97       	sbiw	r28, 0x03	; 3
    209e:	9d 8f       	std	Y+29, r25	; 0x1d
    20a0:	8c 8f       	std	Y+28, r24	; 0x1c
    20a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20a6:	9f 8f       	std	Y+31, r25	; 0x1f
    20a8:	8e 8f       	std	Y+30, r24	; 0x1e

000020aa <.LBB78>:
	__asm__ volatile (
    20aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ac:	9f 8d       	ldd	r25, Y+31	; 0x1f

000020ae <.L1^B7>:
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <.L1^B7>
    20b2:	9f 8f       	std	Y+31, r25	; 0x1f
    20b4:	8e 8f       	std	Y+30, r24	; 0x1e

000020b6 <.Loc.137>:
	...

000020b8 <.LBE78>:
		return;
    20b8:	17 c0       	rjmp	.+46     	; 0x20e8 <.L53>

000020ba <.L63>:
		__ticks = (uint8_t)__tmp;
    20ba:	6d 81       	ldd	r22, Y+5	; 0x05
    20bc:	7e 81       	ldd	r23, Y+6	; 0x06
    20be:	8f 81       	ldd	r24, Y+7	; 0x07
    20c0:	98 85       	ldd	r25, Y+8	; 0x08
    20c2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    20c6:	29 96       	adiw	r28, 0x09	; 9
    20c8:	6c af       	std	Y+60, r22	; 0x3c
    20ca:	7d af       	std	Y+61, r23	; 0x3d
    20cc:	8e af       	std	Y+62, r24	; 0x3e
    20ce:	9f af       	std	Y+63, r25	; 0x3f
    20d0:	29 97       	sbiw	r28, 0x09	; 9
    20d2:	26 96       	adiw	r28, 0x06	; 6
    20d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    20d6:	26 97       	sbiw	r28, 0x06	; 6
    20d8:	9d 87       	std	Y+13, r25	; 0x0d

000020da <.L40>:
    20da:	8d 85       	ldd	r24, Y+13	; 0x0d
    20dc:	88 a3       	std	Y+32, r24	; 0x20

000020de <.LBB80>:
	__asm__ volatile (
    20de:	88 a1       	ldd	r24, Y+32	; 0x20

000020e0 <.L1^B8>:
    20e0:	8a 95       	dec	r24
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <.L1^B8>
    20e4:	88 a3       	std	Y+32, r24	; 0x20

000020e6 <.Loc.141>:
	...

000020e8 <.L53>:
    _delay_us(10);
    port_tri_L &= (~(1<<pin_tri_L));
    20e8:	82 e2       	ldi	r24, 0x22	; 34
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	dc 01       	movw	r26, r24
    20ee:	2c 91       	ld	r18, X

000020f0 <.Loc.143>:
    20f0:	82 e2       	ldi	r24, 0x22	; 34
    20f2:	90 e0       	ldi	r25, 0x00	; 0

000020f4 <.Loc.144>:
    20f4:	2b 7f       	andi	r18, 0xFB	; 251
    20f6:	fc 01       	movw	r30, r24
    20f8:	20 83       	st	Z, r18

000020fa <.Loc.145>:
}
    20fa:	00 00       	nop
    20fc:	c8 5b       	subi	r28, 0xB8	; 184
    20fe:	df 4f       	sbci	r29, 0xFF	; 255
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	08 95       	ret

00002110 <GetDistanceRight>:

int GetDistanceRight(void){
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	6e 97       	sbiw	r28, 0x1e	; 30
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61

00002124 <.Loc.147>:
    int Distance;
    TriggerPulseRight();
    2124:	0e 94 16 11 	call	0x222c	; 0x222c <TriggerPulseRight>

00002128 <.Loc.148>:
	...

0000212a <.L65>:
    while ((port_ech_R & (1<<pin_ech_R)) == 0){
    212a:	86 e0       	ldi	r24, 0x06	; 6
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	dc 01       	movw	r26, r24
    2130:	8c 91       	ld	r24, X

00002132 <.Loc.150>:
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	82 70       	andi	r24, 0x02	; 2
    2138:	99 27       	eor	r25, r25

0000213a <.Loc.151>:
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	b1 f3       	breq	.-20     	; 0x212a <.L65>

0000213e <.Loc.152>:
    }
    TCNT2 = 0;
    213e:	82 eb       	ldi	r24, 0xB2	; 178
    2140:	90 e0       	ldi	r25, 0x00	; 0

00002142 <.Loc.153>:
    2142:	fc 01       	movw	r30, r24
    2144:	10 82       	st	Z, r1

00002146 <.Loc.154>:
    TIFR2 = 1<<TOV2;
    2146:	87 e3       	ldi	r24, 0x37	; 55
    2148:	90 e0       	ldi	r25, 0x00	; 0

0000214a <.Loc.155>:
    214a:	21 e0       	ldi	r18, 0x01	; 1
    214c:	dc 01       	movw	r26, r24
    214e:	2c 93       	st	X, r18

00002150 <.Loc.156>:
    count = 0;
    2150:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <count+0x1>
    2154:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <count>

00002158 <.Loc.157>:
	...

0000215a <.L66>:
    while ((port_ech_R & (1<<pin_ech_R)) != 0){
    215a:	86 e0       	ldi	r24, 0x06	; 6
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	fc 01       	movw	r30, r24
    2160:	80 81       	ld	r24, Z

00002162 <.Loc.159>:
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	82 70       	andi	r24, 0x02	; 2
    2168:	99 27       	eor	r25, r25

0000216a <.Loc.160>:
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	b1 f7       	brne	.-20     	; 0x215a <.L66>

0000216e <.Loc.161>:

    }
    Distance = count;
    216e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <count>
    2172:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <count+0x1>
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01

0000217a <.Loc.162>:
    Distance = Distance * 0.008 * 343;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	9c 01       	movw	r18, r24
    2180:	99 0f       	add	r25, r25
    2182:	44 0b       	sbc	r20, r20
    2184:	55 0b       	sbc	r21, r21
    2186:	2f 87       	std	Y+15, r18	; 0x0f
    2188:	38 8b       	std	Y+16, r19	; 0x10
    218a:	49 8b       	std	Y+17, r20	; 0x11
    218c:	5a 8b       	std	Y+18, r21	; 0x12
    218e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2190:	78 89       	ldd	r23, Y+16	; 0x10
    2192:	89 89       	ldd	r24, Y+17	; 0x11
    2194:	9a 89       	ldd	r25, Y+18	; 0x12
    2196:	0e 94 2d 14 	call	0x285a	; 0x285a <__floatsisf>
    219a:	6b 83       	std	Y+3, r22	; 0x03
    219c:	7c 83       	std	Y+4, r23	; 0x04
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	2f e6       	ldi	r18, 0x6F	; 111
    21a4:	32 e1       	ldi	r19, 0x12	; 18
    21a6:	43 e0       	ldi	r20, 0x03	; 3
    21a8:	5c e3       	ldi	r21, 0x3C	; 60
    21aa:	6b 81       	ldd	r22, Y+3	; 0x03
    21ac:	7c 81       	ldd	r23, Y+4	; 0x04
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    21b6:	6b 8b       	std	Y+19, r22	; 0x13
    21b8:	7c 8b       	std	Y+20, r23	; 0x14
    21ba:	8d 8b       	std	Y+21, r24	; 0x15
    21bc:	9e 8b       	std	Y+22, r25	; 0x16
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	ad 89       	ldd	r26, Y+21	; 0x15
    21c4:	be 89       	ldd	r27, Y+22	; 0x16
    21c6:	8f 83       	std	Y+7, r24	; 0x07
    21c8:	98 87       	std	Y+8, r25	; 0x08
    21ca:	a9 87       	std	Y+9, r26	; 0x09
    21cc:	ba 87       	std	Y+10, r27	; 0x0a

000021ce <.Loc.163>:
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e8       	ldi	r19, 0x80	; 128
    21d2:	4b ea       	ldi	r20, 0xAB	; 171
    21d4:	53 e4       	ldi	r21, 0x43	; 67
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    21e2:	6f 8b       	std	Y+23, r22	; 0x17
    21e4:	78 8f       	std	Y+24, r23	; 0x18
    21e6:	89 8f       	std	Y+25, r24	; 0x19
    21e8:	9a 8f       	std	Y+26, r25	; 0x1a
    21ea:	2f 89       	ldd	r18, Y+23	; 0x17
    21ec:	38 8d       	ldd	r19, Y+24	; 0x18
    21ee:	49 8d       	ldd	r20, Y+25	; 0x19
    21f0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    21f2:	2b 87       	std	Y+11, r18	; 0x0b
    21f4:	3c 87       	std	Y+12, r19	; 0x0c
    21f6:	4d 87       	std	Y+13, r20	; 0x0d
    21f8:	5e 87       	std	Y+14, r21	; 0x0e

000021fa <.Loc.164>:
    21fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2200:	9e 85       	ldd	r25, Y+14	; 0x0e
    2202:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__fixsfsi>
    2206:	6b 8f       	std	Y+27, r22	; 0x1b
    2208:	7c 8f       	std	Y+28, r23	; 0x1c
    220a:	8d 8f       	std	Y+29, r24	; 0x1d
    220c:	9e 8f       	std	Y+30, r25	; 0x1e
    220e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2210:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2212:	5a 83       	std	Y+2, r21	; 0x02
    2214:	49 83       	std	Y+1, r20	; 0x01

00002216 <.Loc.165>:
    //340  m/s
    //34 cm / ms
    //340   mm / ms
    //0.34  mm / us
    //5.44 * count geeft distance in mm
    return Distance;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
    2218:	9a 81       	ldd	r25, Y+2	; 0x02

0000221a <.Loc.166>:
}
    221a:	6e 96       	adiw	r28, 0x1e	; 30
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <TriggerPulseRight>:
void TriggerPulseRight (void){
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	c8 54       	subi	r28, 0x48	; 72
    2236:	d1 09       	sbc	r29, r1
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61

00002242 <.Loc.168>:
    port_tri_R |= (1<<pin_tri_R);
    2242:	82 e2       	ldi	r24, 0x22	; 34
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	dc 01       	movw	r26, r24
    2248:	2c 91       	ld	r18, X
    224a:	82 e2       	ldi	r24, 0x22	; 34
    224c:	90 e0       	ldi	r25, 0x00	; 0

0000224e <.Loc.169>:
    224e:	20 61       	ori	r18, 0x10	; 16
    2250:	fc 01       	movw	r30, r24
    2252:	20 83       	st	Z, r18
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e2       	ldi	r26, 0x20	; 32
    225a:	b1 e4       	ldi	r27, 0x41	; 65
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	ab 83       	std	Y+3, r26	; 0x03
    2262:	bc 83       	std	Y+4, r27	; 0x04

00002264 <.LBB82>:
	__tmp = ((F_CPU) / 3e6) * __us;
    2264:	2b ea       	ldi	r18, 0xAB	; 171
    2266:	3a ea       	ldi	r19, 0xAA	; 170
    2268:	4a ea       	ldi	r20, 0xAA	; 170
    226a:	50 e4       	ldi	r21, 0x40	; 64
    226c:	69 81       	ldd	r22, Y+1	; 0x01
    226e:	7a 81       	ldd	r23, Y+2	; 0x02
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    2278:	6d a3       	std	Y+37, r22	; 0x25
    227a:	7e a3       	std	Y+38, r23	; 0x26
    227c:	8f a3       	std	Y+39, r24	; 0x27
    227e:	98 a7       	std	Y+40, r25	; 0x28
    2280:	8d a1       	ldd	r24, Y+37	; 0x25
    2282:	9e a1       	ldd	r25, Y+38	; 0x26
    2284:	af a1       	ldd	r26, Y+39	; 0x27
    2286:	b8 a5       	ldd	r27, Y+40	; 0x28
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	af 83       	std	Y+7, r26	; 0x07
    228e:	b8 87       	std	Y+8, r27	; 0x08

00002290 <.Loc.171>:
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e8       	ldi	r20, 0x80	; 128
    2296:	50 e4       	ldi	r21, 0x40	; 64
    2298:	69 81       	ldd	r22, Y+1	; 0x01
    229a:	7a 81       	ldd	r23, Y+2	; 0x02
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    22a4:	69 a7       	std	Y+41, r22	; 0x29
    22a6:	7a a7       	std	Y+42, r23	; 0x2a
    22a8:	8b a7       	std	Y+43, r24	; 0x2b
    22aa:	9c a7       	std	Y+44, r25	; 0x2c
    22ac:	89 a5       	ldd	r24, Y+41	; 0x29
    22ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    22b0:	ab a5       	ldd	r26, Y+43	; 0x2b
    22b2:	bc a5       	ldd	r27, Y+44	; 0x2c
    22b4:	89 87       	std	Y+9, r24	; 0x09
    22b6:	9a 87       	std	Y+10, r25	; 0x0a
    22b8:	ab 87       	std	Y+11, r26	; 0x0b
    22ba:	bc 87       	std	Y+12, r27	; 0x0c

000022bc <.Loc.172>:
	if (__tmp < 1.0)
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e8       	ldi	r20, 0x80	; 128
    22c2:	5f e3       	ldi	r21, 0x3F	; 63
    22c4:	6d 81       	ldd	r22, Y+5	; 0x05
    22c6:	7e 81       	ldd	r23, Y+6	; 0x06
    22c8:	8f 81       	ldd	r24, Y+7	; 0x07
    22ca:	98 85       	ldd	r25, Y+8	; 0x08
    22cc:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__cmpsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	1c f4       	brge	.+6      	; 0x22da <.L90>

000022d4 <.Loc.173>:
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	8d 87       	std	Y+13, r24	; 0x0d
    22d8:	e8 c0       	rjmp	.+464    	; 0x24aa <.L71>

000022da <.L90>:
	else if (__tmp2 > 65535)
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	69 85       	ldd	r22, Y+9	; 0x09
    22e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    22e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    22e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ea:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    22ee:	88 23       	and	r24, r24
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <L0^A>

000022f2 <L0^A>:
    22f2:	0c f4       	brge	.+2      	; 0x22f6 <.Loc.175>

000022f4 <L0^A>:
    22f4:	9f c0       	rjmp	.+318    	; 0x2434 <.L91>

000022f6 <.Loc.175>:
		_delay_ms(__us / 1000.0);
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a e7       	ldi	r20, 0x7A	; 122
    22fc:	54 e4       	ldi	r21, 0x44	; 68
    22fe:	69 81       	ldd	r22, Y+1	; 0x01
    2300:	7a 81       	ldd	r23, Y+2	; 0x02
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	0e 94 83 13 	call	0x2706	; 0x2706 <__divsf3>
    230a:	6d a7       	std	Y+45, r22	; 0x2d
    230c:	7e a7       	std	Y+46, r23	; 0x2e
    230e:	8f a7       	std	Y+47, r24	; 0x2f
    2310:	98 ab       	std	Y+48, r25	; 0x30
    2312:	8d a5       	ldd	r24, Y+45	; 0x2d
    2314:	9e a5       	ldd	r25, Y+46	; 0x2e
    2316:	af a5       	ldd	r26, Y+47	; 0x2f
    2318:	b8 a9       	ldd	r27, Y+48	; 0x30
    231a:	8e 87       	std	Y+14, r24	; 0x0e
    231c:	9f 87       	std	Y+15, r25	; 0x0f
    231e:	a8 8b       	std	Y+16, r26	; 0x10
    2320:	b9 8b       	std	Y+17, r27	; 0x11

00002322 <.LBB84>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a e7       	ldi	r20, 0x7A	; 122
    2328:	55 e4       	ldi	r21, 0x45	; 69
    232a:	6e 85       	ldd	r22, Y+14	; 0x0e
    232c:	7f 85       	ldd	r23, Y+15	; 0x0f
    232e:	88 89       	ldd	r24, Y+16	; 0x10
    2330:	99 89       	ldd	r25, Y+17	; 0x11
    2332:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    2336:	69 ab       	std	Y+49, r22	; 0x31
    2338:	7a ab       	std	Y+50, r23	; 0x32
    233a:	8b ab       	std	Y+51, r24	; 0x33
    233c:	9c ab       	std	Y+52, r25	; 0x34
    233e:	89 a9       	ldd	r24, Y+49	; 0x31
    2340:	9a a9       	ldd	r25, Y+50	; 0x32
    2342:	ab a9       	ldd	r26, Y+51	; 0x33
    2344:	bc a9       	ldd	r27, Y+52	; 0x34
    2346:	8a 8b       	std	Y+18, r24	; 0x12
    2348:	9b 8b       	std	Y+19, r25	; 0x13
    234a:	ac 8b       	std	Y+20, r26	; 0x14
    234c:	bd 8b       	std	Y+21, r27	; 0x15

0000234e <.Loc.177>:
	if (__tmp < 1.0)
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	6a 89       	ldd	r22, Y+18	; 0x12
    2358:	7b 89       	ldd	r23, Y+19	; 0x13
    235a:	8c 89       	ldd	r24, Y+20	; 0x14
    235c:	9d 89       	ldd	r25, Y+21	; 0x15
    235e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__cmpsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <.L92>

00002366 <.Loc.178>:
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9f 8b       	std	Y+23, r25	; 0x17
    236c:	8e 8b       	std	Y+22, r24	; 0x16
    236e:	57 c0       	rjmp	.+174    	; 0x241e <.L76>

00002370 <.L92>:
	else if (__tmp > 65535)
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	6a 89       	ldd	r22, Y+18	; 0x12
    237a:	7b 89       	ldd	r23, Y+19	; 0x13
    237c:	8c 89       	ldd	r24, Y+20	; 0x14
    237e:	9d 89       	ldd	r25, Y+21	; 0x15
    2380:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    2384:	88 23       	and	r24, r24
    2386:	d9 f1       	breq	.+118    	; 0x23fe <.L93>
    2388:	d4 f1       	brlt	.+116    	; 0x23fe <.L93>

0000238a <.Loc.180>:
		__ticks = (uint16_t) (__ms * 10.0);
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	6e 85       	ldd	r22, Y+14	; 0x0e
    2394:	7f 85       	ldd	r23, Y+15	; 0x0f
    2396:	88 89       	ldd	r24, Y+16	; 0x10
    2398:	99 89       	ldd	r25, Y+17	; 0x11
    239a:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__mulsf3>
    239e:	6d ab       	std	Y+53, r22	; 0x35
    23a0:	7e ab       	std	Y+54, r23	; 0x36
    23a2:	8f ab       	std	Y+55, r24	; 0x37
    23a4:	98 af       	std	Y+56, r25	; 0x38
    23a6:	8d a9       	ldd	r24, Y+53	; 0x35
    23a8:	9e a9       	ldd	r25, Y+54	; 0x36
    23aa:	af a9       	ldd	r26, Y+55	; 0x37
    23ac:	b8 ad       	ldd	r27, Y+56	; 0x38
    23ae:	89 a3       	std	Y+33, r24	; 0x21
    23b0:	9a a3       	std	Y+34, r25	; 0x22
    23b2:	ab a3       	std	Y+35, r26	; 0x23
    23b4:	bc a3       	std	Y+36, r27	; 0x24

000023b6 <.Loc.181>:
    23b6:	69 a1       	ldd	r22, Y+33	; 0x21
    23b8:	7a a1       	ldd	r23, Y+34	; 0x22
    23ba:	8b a1       	ldd	r24, Y+35	; 0x23
    23bc:	9c a1       	ldd	r25, Y+36	; 0x24
    23be:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    23c2:	69 af       	std	Y+57, r22	; 0x39
    23c4:	7a af       	std	Y+58, r23	; 0x3a
    23c6:	8b af       	std	Y+59, r24	; 0x3b
    23c8:	9c af       	std	Y+60, r25	; 0x3c
    23ca:	a9 ad       	ldd	r26, Y+57	; 0x39
    23cc:	ba ad       	ldd	r27, Y+58	; 0x3a
    23ce:	bf 8b       	std	Y+23, r27	; 0x17
    23d0:	ae 8b       	std	Y+22, r26	; 0x16

000023d2 <.Loc.182>:
		while(__ticks)
    23d2:	10 c0       	rjmp	.+32     	; 0x23f4 <.L79>

000023d4 <.L80>:
    23d4:	80 e9       	ldi	r24, 0x90	; 144
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	99 8f       	std	Y+25, r25	; 0x19
    23da:	88 8f       	std	Y+24, r24	; 0x18

000023dc <.LBB86>:
	__asm__ volatile (
    23dc:	88 8d       	ldd	r24, Y+24	; 0x18
    23de:	99 8d       	ldd	r25, Y+25	; 0x19

000023e0 <.L1^B9>:
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <.L1^B9>
    23e4:	99 8f       	std	Y+25, r25	; 0x19
    23e6:	88 8f       	std	Y+24, r24	; 0x18

000023e8 <.Loc.184>:
	...

000023ea <.LBE86>:
			__ticks --;
    23ea:	8e 89       	ldd	r24, Y+22	; 0x16
    23ec:	9f 89       	ldd	r25, Y+23	; 0x17
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	9f 8b       	std	Y+23, r25	; 0x17
    23f2:	8e 8b       	std	Y+22, r24	; 0x16

000023f4 <.L79>:
		while(__ticks)
    23f4:	8e 89       	ldd	r24, Y+22	; 0x16
    23f6:	9f 89       	ldd	r25, Y+23	; 0x17
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	61 f7       	brne	.-40     	; 0x23d4 <.L80>

000023fc <.Loc.187>:
		return;
    23fc:	56 c0       	rjmp	.+172    	; 0x24aa <.L71>

000023fe <.L93>:
		__ticks = (uint16_t)__tmp;
    23fe:	6a 89       	ldd	r22, Y+18	; 0x12
    2400:	7b 89       	ldd	r23, Y+19	; 0x13
    2402:	8c 89       	ldd	r24, Y+20	; 0x14
    2404:	9d 89       	ldd	r25, Y+21	; 0x15
    2406:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    240a:	21 96       	adiw	r28, 0x01	; 1
    240c:	6c af       	std	Y+60, r22	; 0x3c
    240e:	7d af       	std	Y+61, r23	; 0x3d
    2410:	8e af       	std	Y+62, r24	; 0x3e
    2412:	9f af       	std	Y+63, r25	; 0x3f
    2414:	21 97       	sbiw	r28, 0x01	; 1
    2416:	ed ad       	ldd	r30, Y+61	; 0x3d
    2418:	fe ad       	ldd	r31, Y+62	; 0x3e
    241a:	ff 8b       	std	Y+23, r31	; 0x17
    241c:	ee 8b       	std	Y+22, r30	; 0x16

0000241e <.L76>:
    241e:	8e 89       	ldd	r24, Y+22	; 0x16
    2420:	9f 89       	ldd	r25, Y+23	; 0x17
    2422:	9b 8f       	std	Y+27, r25	; 0x1b
    2424:	8a 8f       	std	Y+26, r24	; 0x1a

00002426 <.LBB88>:
    2426:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2428:	9b 8d       	ldd	r25, Y+27	; 0x1b

0000242a <.L1^B10>:
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <.L1^B10>
    242e:	9b 8f       	std	Y+27, r25	; 0x1b
    2430:	8a 8f       	std	Y+26, r24	; 0x1a

00002432 <.Loc.190>:
}
    2432:	3b c0       	rjmp	.+118    	; 0x24aa <.L71>

00002434 <.L91>:
	else if (__tmp > 255)
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	53 e4       	ldi	r21, 0x43	; 67
    243c:	6d 81       	ldd	r22, Y+5	; 0x05
    243e:	7e 81       	ldd	r23, Y+6	; 0x06
    2440:	8f 81       	ldd	r24, Y+7	; 0x07
    2442:	98 85       	ldd	r25, Y+8	; 0x08
    2444:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__gesf2>
    2448:	88 23       	and	r24, r24
    244a:	f9 f0       	breq	.+62     	; 0x248a <.L94>
    244c:	f4 f0       	brlt	.+60     	; 0x248a <.L94>

0000244e <.LBB90>:
		uint16_t __ticks=(uint16_t)__tmp2;
    244e:	69 85       	ldd	r22, Y+9	; 0x09
    2450:	7a 85       	ldd	r23, Y+10	; 0x0a
    2452:	8b 85       	ldd	r24, Y+11	; 0x0b
    2454:	9c 85       	ldd	r25, Y+12	; 0x0c
    2456:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    245a:	25 96       	adiw	r28, 0x05	; 5
    245c:	6c af       	std	Y+60, r22	; 0x3c
    245e:	7d af       	std	Y+61, r23	; 0x3d
    2460:	8e af       	std	Y+62, r24	; 0x3e
    2462:	9f af       	std	Y+63, r25	; 0x3f
    2464:	25 97       	sbiw	r28, 0x05	; 5
    2466:	23 96       	adiw	r28, 0x03	; 3
    2468:	8e ad       	ldd	r24, Y+62	; 0x3e
    246a:	9f ad       	ldd	r25, Y+63	; 0x3f
    246c:	23 97       	sbiw	r28, 0x03	; 3
    246e:	9d 8f       	std	Y+29, r25	; 0x1d
    2470:	8c 8f       	std	Y+28, r24	; 0x1c
    2472:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2474:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2476:	9f 8f       	std	Y+31, r25	; 0x1f
    2478:	8e 8f       	std	Y+30, r24	; 0x1e

0000247a <.LBB91>:
	__asm__ volatile (
    247a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    247c:	9f 8d       	ldd	r25, Y+31	; 0x1f

0000247e <.L1^B11>:
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <.L1^B11>
    2482:	9f 8f       	std	Y+31, r25	; 0x1f
    2484:	8e 8f       	std	Y+30, r24	; 0x1e

00002486 <.Loc.194>:
	...

00002488 <.LBE91>:
		return;
    2488:	17 c0       	rjmp	.+46     	; 0x24b8 <.L84>

0000248a <.L94>:
		__ticks = (uint8_t)__tmp;
    248a:	6d 81       	ldd	r22, Y+5	; 0x05
    248c:	7e 81       	ldd	r23, Y+6	; 0x06
    248e:	8f 81       	ldd	r24, Y+7	; 0x07
    2490:	98 85       	ldd	r25, Y+8	; 0x08
    2492:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    2496:	29 96       	adiw	r28, 0x09	; 9
    2498:	6c af       	std	Y+60, r22	; 0x3c
    249a:	7d af       	std	Y+61, r23	; 0x3d
    249c:	8e af       	std	Y+62, r24	; 0x3e
    249e:	9f af       	std	Y+63, r25	; 0x3f
    24a0:	29 97       	sbiw	r28, 0x09	; 9
    24a2:	26 96       	adiw	r28, 0x06	; 6
    24a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    24a6:	26 97       	sbiw	r28, 0x06	; 6
    24a8:	9d 87       	std	Y+13, r25	; 0x0d

000024aa <.L71>:
    24aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ac:	88 a3       	std	Y+32, r24	; 0x20

000024ae <.LBB93>:
	__asm__ volatile (
    24ae:	88 a1       	ldd	r24, Y+32	; 0x20

000024b0 <.L1^B12>:
    24b0:	8a 95       	dec	r24
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <.L1^B12>
    24b4:	88 a3       	std	Y+32, r24	; 0x20

000024b6 <.Loc.198>:
	...

000024b8 <.L84>:
    _delay_us(10);
    port_tri_R &= (~(1<<pin_tri_R));
    24b8:	82 e2       	ldi	r24, 0x22	; 34
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	dc 01       	movw	r26, r24
    24be:	2c 91       	ld	r18, X

000024c0 <.Loc.200>:
    24c0:	82 e2       	ldi	r24, 0x22	; 34
    24c2:	90 e0       	ldi	r25, 0x00	; 0

000024c4 <.Loc.201>:
    24c4:	2f 7e       	andi	r18, 0xEF	; 239
    24c6:	fc 01       	movw	r30, r24
    24c8:	20 83       	st	Z, r18

000024ca <.Loc.202>:
}
    24ca:	00 00       	nop
    24cc:	c8 5b       	subi	r28, 0xB8	; 184
    24ce:	df 4f       	sbci	r29, 0xFF	; 255
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	08 95       	ret

000024e0 <__vector_15>:

ISR(TIMER2_OVF_vect){
    24e0:	1f 92       	push	r1
    24e2:	0f 92       	push	r0
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	0f 92       	push	r0
    24e8:	11 24       	eor	r1, r1
    24ea:	8f 93       	push	r24
    24ec:	9f 93       	push	r25
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62

000024f6 <.Loc.204>:
    count++;
    24f6:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <count>
    24fa:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <count+0x1>
    24fe:	01 96       	adiw	r24, 0x01	; 1
    2500:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <count+0x1>
    2504:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <count>

00002508 <.Loc.205>:
}
    2508:	00 00       	nop
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	9f 91       	pop	r25
    2510:	8f 91       	pop	r24
    2512:	0f 90       	pop	r0
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	0f 90       	pop	r0
    2518:	1f 90       	pop	r1
    251a:	18 95       	reti

0000251c <__divmodhi4>:
    251c:	97 fb       	bst	r25, 7

0000251e <.Loc.1>:
    251e:	07 2e       	mov	r0, r23

00002520 <.Loc.2>:
    2520:	16 f4       	brtc	.+4      	; 0x2526 <.L^B1>

00002522 <.Loc.3>:
    2522:	00 94       	com	r0

00002524 <.Loc.4>:
    2524:	07 d0       	rcall	.+14     	; 0x2534 <__divmodhi4_neg1>

00002526 <.L^B1>:
    2526:	77 fd       	sbrc	r23, 7

00002528 <.Loc.6>:
    2528:	09 d0       	rcall	.+18     	; 0x253c <__divmodhi4_neg2>

0000252a <.Loc.7>:
    252a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__udivmodhi4>

0000252e <.Loc.8>:
    252e:	07 fc       	sbrc	r0, 7

00002530 <.Loc.9>:
    2530:	05 d0       	rcall	.+10     	; 0x253c <__divmodhi4_neg2>

00002532 <.Loc.10>:
    2532:	3e f4       	brtc	.+14     	; 0x2542 <__divmodhi4_exit>

00002534 <__divmodhi4_neg1>:
    2534:	90 95       	com	r25

00002536 <.Loc.12>:
    2536:	81 95       	neg	r24

00002538 <.Loc.13>:
    2538:	9f 4f       	sbci	r25, 0xFF	; 255

0000253a <.Loc.14>:
    253a:	08 95       	ret

0000253c <__divmodhi4_neg2>:
    253c:	70 95       	com	r23

0000253e <.Loc.16>:
    253e:	61 95       	neg	r22

00002540 <.Loc.17>:
    2540:	7f 4f       	sbci	r23, 0xFF	; 255

00002542 <__divmodhi4_exit>:
    2542:	08 95       	ret

00002544 <__divmodsi4>:
    2544:	05 2e       	mov	r0, r21

00002546 <.Loc.1>:
    2546:	97 fb       	bst	r25, 7

00002548 <.Loc.2>:
    2548:	1e f4       	brtc	.+6      	; 0x2550 <.L^B1>

0000254a <.Loc.3>:
    254a:	00 94       	com	r0

0000254c <.Loc.4>:
    254c:	0e 94 b9 12 	call	0x2572	; 0x2572 <__negsi2>

00002550 <.L^B1>:
    2550:	57 fd       	sbrc	r21, 7

00002552 <.Loc.6>:
    2552:	07 d0       	rcall	.+14     	; 0x2562 <__divmodsi4_neg2>

00002554 <.Loc.7>:
    2554:	0e 94 ef 12 	call	0x25de	; 0x25de <__udivmodsi4>

00002558 <.Loc.8>:
    2558:	07 fc       	sbrc	r0, 7

0000255a <.Loc.9>:
    255a:	03 d0       	rcall	.+6      	; 0x2562 <__divmodsi4_neg2>

0000255c <.Loc.10>:
    255c:	4e f4       	brtc	.+18     	; 0x2570 <__divmodsi4_exit>

0000255e <.Loc.11>:
    255e:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__negsi2>

00002562 <__divmodsi4_neg2>:
    2562:	50 95       	com	r21

00002564 <.Loc.13>:
    2564:	40 95       	com	r20

00002566 <.Loc.14>:
    2566:	30 95       	com	r19

00002568 <.Loc.15>:
    2568:	21 95       	neg	r18

0000256a <.Loc.16>:
    256a:	3f 4f       	sbci	r19, 0xFF	; 255

0000256c <.Loc.17>:
    256c:	4f 4f       	sbci	r20, 0xFF	; 255

0000256e <.Loc.18>:
    256e:	5f 4f       	sbci	r21, 0xFF	; 255

00002570 <__divmodsi4_exit>:
    2570:	08 95       	ret

00002572 <__negsi2>:
    2572:	90 95       	com	r25
    2574:	80 95       	com	r24
    2576:	70 95       	com	r23
    2578:	61 95       	neg	r22
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	8f 4f       	sbci	r24, 0xFF	; 255
    257e:	9f 4f       	sbci	r25, 0xFF	; 255

00002580 <.Loc.1>:
    2580:	08 95       	ret

00002582 <__umulhisi3>:
    2582:	a2 9f       	mul	r26, r18

00002584 <.Loc.1>:
    2584:	b0 01       	movw	r22, r0

00002586 <.Loc.2>:
    2586:	b3 9f       	mul	r27, r19

00002588 <.Loc.3>:
    2588:	c0 01       	movw	r24, r0

0000258a <.Loc.4>:
    258a:	a3 9f       	mul	r26, r19

0000258c <.Loc.5>:
    258c:	70 0d       	add	r23, r0

0000258e <.Loc.6>:
    258e:	81 1d       	adc	r24, r1

00002590 <.Loc.7>:
    2590:	11 24       	eor	r1, r1

00002592 <.Loc.8>:
    2592:	91 1d       	adc	r25, r1

00002594 <.Loc.9>:
    2594:	b2 9f       	mul	r27, r18

00002596 <.Loc.10>:
    2596:	70 0d       	add	r23, r0

00002598 <.Loc.11>:
    2598:	81 1d       	adc	r24, r1

0000259a <.Loc.12>:
    259a:	11 24       	eor	r1, r1

0000259c <.Loc.13>:
    259c:	91 1d       	adc	r25, r1

0000259e <.Loc.14>:
    259e:	08 95       	ret

000025a0 <__muluhisi3>:
    25a0:	0e 94 c1 12 	call	0x2582	; 0x2582 <__umulhisi3>

000025a4 <.Loc.1>:
    25a4:	a5 9f       	mul	r26, r21

000025a6 <.Loc.2>:
    25a6:	90 0d       	add	r25, r0

000025a8 <.Loc.3>:
    25a8:	b4 9f       	mul	r27, r20

000025aa <.Loc.4>:
    25aa:	90 0d       	add	r25, r0

000025ac <.Loc.5>:
    25ac:	a4 9f       	mul	r26, r20

000025ae <.Loc.6>:
    25ae:	80 0d       	add	r24, r0

000025b0 <.Loc.7>:
    25b0:	91 1d       	adc	r25, r1

000025b2 <.Loc.8>:
    25b2:	11 24       	eor	r1, r1

000025b4 <.Loc.9>:
    25b4:	08 95       	ret

000025b6 <__udivmodhi4>:
    25b6:	aa 1b       	sub	r26, r26

000025b8 <.Loc.1>:
    25b8:	bb 1b       	sub	r27, r27

000025ba <.Loc.2>:
    25ba:	51 e1       	ldi	r21, 0x11	; 17

000025bc <.Loc.3>:
    25bc:	07 c0       	rjmp	.+14     	; 0x25cc <__udivmodhi4_ep>

000025be <__udivmodhi4_loop>:
    25be:	aa 1f       	adc	r26, r26

000025c0 <.Loc.5>:
    25c0:	bb 1f       	adc	r27, r27

000025c2 <.Loc.6>:
    25c2:	a6 17       	cp	r26, r22

000025c4 <.Loc.7>:
    25c4:	b7 07       	cpc	r27, r23

000025c6 <.Loc.8>:
    25c6:	10 f0       	brcs	.+4      	; 0x25cc <__udivmodhi4_ep>

000025c8 <.Loc.9>:
    25c8:	a6 1b       	sub	r26, r22

000025ca <.Loc.10>:
    25ca:	b7 0b       	sbc	r27, r23

000025cc <__udivmodhi4_ep>:
    25cc:	88 1f       	adc	r24, r24

000025ce <.Loc.12>:
    25ce:	99 1f       	adc	r25, r25

000025d0 <.Loc.13>:
    25d0:	5a 95       	dec	r21

000025d2 <.Loc.14>:
    25d2:	a9 f7       	brne	.-22     	; 0x25be <__udivmodhi4_loop>

000025d4 <.Loc.15>:
    25d4:	80 95       	com	r24

000025d6 <.Loc.16>:
    25d6:	90 95       	com	r25

000025d8 <.Loc.17>:
    25d8:	bc 01       	movw	r22, r24

000025da <.Loc.18>:
    25da:	cd 01       	movw	r24, r26

000025dc <.Loc.19>:
    25dc:	08 95       	ret

000025de <__udivmodsi4>:
    25de:	a1 e2       	ldi	r26, 0x21	; 33

000025e0 <.Loc.1>:
    25e0:	1a 2e       	mov	r1, r26

000025e2 <.Loc.2>:
    25e2:	aa 1b       	sub	r26, r26

000025e4 <.Loc.3>:
    25e4:	bb 1b       	sub	r27, r27

000025e6 <.Loc.4>:
    25e6:	fd 01       	movw	r30, r26

000025e8 <.Loc.5>:
    25e8:	0d c0       	rjmp	.+26     	; 0x2604 <__udivmodsi4_ep>

000025ea <__udivmodsi4_loop>:
    25ea:	aa 1f       	adc	r26, r26

000025ec <.Loc.7>:
    25ec:	bb 1f       	adc	r27, r27

000025ee <.Loc.8>:
    25ee:	ee 1f       	adc	r30, r30

000025f0 <.Loc.9>:
    25f0:	ff 1f       	adc	r31, r31

000025f2 <.Loc.10>:
    25f2:	a2 17       	cp	r26, r18

000025f4 <.Loc.11>:
    25f4:	b3 07       	cpc	r27, r19

000025f6 <.Loc.12>:
    25f6:	e4 07       	cpc	r30, r20

000025f8 <.Loc.13>:
    25f8:	f5 07       	cpc	r31, r21

000025fa <.Loc.14>:
    25fa:	20 f0       	brcs	.+8      	; 0x2604 <__udivmodsi4_ep>

000025fc <.Loc.15>:
    25fc:	a2 1b       	sub	r26, r18

000025fe <.Loc.16>:
    25fe:	b3 0b       	sbc	r27, r19

00002600 <.Loc.17>:
    2600:	e4 0b       	sbc	r30, r20

00002602 <.Loc.18>:
    2602:	f5 0b       	sbc	r31, r21

00002604 <__udivmodsi4_ep>:
    2604:	66 1f       	adc	r22, r22

00002606 <.Loc.20>:
    2606:	77 1f       	adc	r23, r23

00002608 <.Loc.21>:
    2608:	88 1f       	adc	r24, r24

0000260a <.Loc.22>:
    260a:	99 1f       	adc	r25, r25

0000260c <.Loc.23>:
    260c:	1a 94       	dec	r1

0000260e <.Loc.24>:
    260e:	69 f7       	brne	.-38     	; 0x25ea <__udivmodsi4_loop>

00002610 <.Loc.25>:
    2610:	60 95       	com	r22

00002612 <.Loc.26>:
    2612:	70 95       	com	r23

00002614 <.Loc.27>:
    2614:	80 95       	com	r24

00002616 <.Loc.28>:
    2616:	90 95       	com	r25

00002618 <.Loc.29>:
    2618:	9b 01       	movw	r18, r22

0000261a <.Loc.30>:
    261a:	ac 01       	movw	r20, r24

0000261c <.Loc.31>:
    261c:	bd 01       	movw	r22, r26

0000261e <.Loc.32>:
    261e:	cf 01       	movw	r24, r30

00002620 <.Loc.33>:
    2620:	08 95       	ret

00002622 <__subsf3>:
    2622:	50 58       	subi	r21, 0x80	; 128

00002624 <__addsf3>:
    2624:	bb 27       	eor	r27, r27
    2626:	aa 27       	eor	r26, r26
    2628:	0e 94 29 13 	call	0x2652	; 0x2652 <__addsf3x>
    262c:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_round>

00002630 <.L^B1>:
    2630:	0e 94 95 14 	call	0x292a	; 0x292a <__fp_pscA>
    2634:	38 f0       	brcs	.+14     	; 0x2644 <.L_nan>
    2636:	0e 94 9c 14 	call	0x2938	; 0x2938 <__fp_pscB>
    263a:	20 f0       	brcs	.+8      	; 0x2644 <.L_nan>
    263c:	39 f4       	brne	.+14     	; 0x264c <.L_inf>
    263e:	9f 3f       	cpi	r25, 0xFF	; 255
    2640:	19 f4       	brne	.+6      	; 0x2648 <.L_infB>
    2642:	26 f4       	brtc	.+8      	; 0x264c <.L_inf>

00002644 <.L_nan>:
    2644:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__fp_nan>

00002648 <.L_infB>:
    2648:	0e f4       	brtc	.+2      	; 0x264c <.L_inf>
    264a:	e0 95       	com	r30

0000264c <.L_inf>:
    264c:	e7 fb       	bst	r30, 7
    264e:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__fp_inf>

00002652 <__addsf3x>:
    2652:	e9 2f       	mov	r30, r25
    2654:	0e 94 b4 14 	call	0x2968	; 0x2968 <__fp_split3>
    2658:	58 f3       	brcs	.-42     	; 0x2630 <.L^B1>
    265a:	ba 17       	cp	r27, r26
    265c:	62 07       	cpc	r22, r18
    265e:	73 07       	cpc	r23, r19
    2660:	84 07       	cpc	r24, r20
    2662:	95 07       	cpc	r25, r21
    2664:	20 f0       	brcs	.+8      	; 0x266e <.L2^B1>
    2666:	79 f4       	brne	.+30     	; 0x2686 <.L4^B1>
    2668:	a6 f5       	brtc	.+104    	; 0x26d2 <.L_add>
    266a:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__fp_zero>

0000266e <.L2^B1>:
    266e:	0e f4       	brtc	.+2      	; 0x2672 <.L3^B1>
    2670:	e0 95       	com	r30

00002672 <.L3^B1>:
    2672:	0b 2e       	mov	r0, r27
    2674:	ba 2f       	mov	r27, r26
    2676:	a0 2d       	mov	r26, r0
    2678:	0b 01       	movw	r0, r22
    267a:	b9 01       	movw	r22, r18
    267c:	90 01       	movw	r18, r0
    267e:	0c 01       	movw	r0, r24
    2680:	ca 01       	movw	r24, r20
    2682:	a0 01       	movw	r20, r0
    2684:	11 24       	eor	r1, r1

00002686 <.L4^B1>:
    2686:	ff 27       	eor	r31, r31
    2688:	59 1b       	sub	r21, r25

0000268a <.L5^B1>:
    268a:	99 f0       	breq	.+38     	; 0x26b2 <.L7^B1>
    268c:	59 3f       	cpi	r21, 0xF9	; 249
    268e:	50 f4       	brcc	.+20     	; 0x26a4 <.L6^B1>
    2690:	50 3e       	cpi	r21, 0xE0	; 224
    2692:	68 f1       	brcs	.+90     	; 0x26ee <.L_ret>
    2694:	1a 16       	cp	r1, r26
    2696:	f0 40       	sbci	r31, 0x00	; 0
    2698:	a2 2f       	mov	r26, r18
    269a:	23 2f       	mov	r18, r19
    269c:	34 2f       	mov	r19, r20
    269e:	44 27       	eor	r20, r20
    26a0:	58 5f       	subi	r21, 0xF8	; 248
    26a2:	f3 cf       	rjmp	.-26     	; 0x268a <.L5^B1>

000026a4 <.L6^B1>:
    26a4:	46 95       	lsr	r20
    26a6:	37 95       	ror	r19
    26a8:	27 95       	ror	r18
    26aa:	a7 95       	ror	r26
    26ac:	f0 40       	sbci	r31, 0x00	; 0
    26ae:	53 95       	inc	r21
    26b0:	c9 f7       	brne	.-14     	; 0x26a4 <.L6^B1>

000026b2 <.L7^B1>:
    26b2:	7e f4       	brtc	.+30     	; 0x26d2 <.L_add>
    26b4:	1f 16       	cp	r1, r31
    26b6:	ba 0b       	sbc	r27, r26
    26b8:	62 0b       	sbc	r22, r18
    26ba:	73 0b       	sbc	r23, r19
    26bc:	84 0b       	sbc	r24, r20
    26be:	ba f0       	brmi	.+46     	; 0x26ee <.L_ret>

000026c0 <.L8^B1>:
    26c0:	91 50       	subi	r25, 0x01	; 1
    26c2:	a1 f0       	breq	.+40     	; 0x26ec <.L9^B1>
    26c4:	ff 0f       	add	r31, r31
    26c6:	bb 1f       	adc	r27, r27
    26c8:	66 1f       	adc	r22, r22
    26ca:	77 1f       	adc	r23, r23
    26cc:	88 1f       	adc	r24, r24
    26ce:	c2 f7       	brpl	.-16     	; 0x26c0 <.L8^B1>
    26d0:	0e c0       	rjmp	.+28     	; 0x26ee <.L_ret>

000026d2 <.L_add>:
    26d2:	ba 0f       	add	r27, r26
    26d4:	62 1f       	adc	r22, r18
    26d6:	73 1f       	adc	r23, r19
    26d8:	84 1f       	adc	r24, r20
    26da:	48 f4       	brcc	.+18     	; 0x26ee <.L_ret>
    26dc:	87 95       	ror	r24
    26de:	77 95       	ror	r23
    26e0:	67 95       	ror	r22
    26e2:	b7 95       	ror	r27
    26e4:	f7 95       	ror	r31
    26e6:	9e 3f       	cpi	r25, 0xFE	; 254
    26e8:	08 f0       	brcs	.+2      	; 0x26ec <.L9^B1>
    26ea:	b0 cf       	rjmp	.-160    	; 0x264c <.L_inf>

000026ec <.L9^B1>:
    26ec:	93 95       	inc	r25

000026ee <.L_ret>:
    26ee:	88 0f       	add	r24, r24
    26f0:	08 f0       	brcs	.+2      	; 0x26f4 <.L1^B1>
    26f2:	99 27       	eor	r25, r25

000026f4 <.L1^B1>:
    26f4:	ee 0f       	add	r30, r30
    26f6:	97 95       	ror	r25
    26f8:	87 95       	ror	r24
    26fa:	08 95       	ret

000026fc <__cmpsf2>:
    26fc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__fp_cmp>
    2700:	08 f4       	brcc	.+2      	; 0x2704 <.L1^B1>
    2702:	81 e0       	ldi	r24, 0x01	; 1

00002704 <.L1^B1>:
    2704:	08 95       	ret

00002706 <__divsf3>:
    2706:	0e 94 97 13 	call	0x272e	; 0x272e <__divsf3x>
    270a:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_round>

0000270e <.L^B1>:
    270e:	0e 94 9c 14 	call	0x2938	; 0x2938 <__fp_pscB>
    2712:	58 f0       	brcs	.+22     	; 0x272a <.L_nan>
    2714:	0e 94 95 14 	call	0x292a	; 0x292a <__fp_pscA>
    2718:	40 f0       	brcs	.+16     	; 0x272a <.L_nan>
    271a:	29 f4       	brne	.+10     	; 0x2726 <.L_zr>
    271c:	5f 3f       	cpi	r21, 0xFF	; 255
    271e:	29 f0       	breq	.+10     	; 0x272a <.L_nan>

00002720 <.L_inf>:
    2720:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__fp_inf>

00002724 <.L1^B1>:
    2724:	51 11       	cpse	r21, r1

00002726 <.L_zr>:
    2726:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__fp_szero>

0000272a <.L_nan>:
    272a:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__fp_nan>

0000272e <__divsf3x>:
    272e:	0e 94 b4 14 	call	0x2968	; 0x2968 <__fp_split3>
    2732:	68 f3       	brcs	.-38     	; 0x270e <.L^B1>

00002734 <__divsf3_pse>:
    2734:	99 23       	and	r25, r25
    2736:	b1 f3       	breq	.-20     	; 0x2724 <.L1^B1>
    2738:	55 23       	and	r21, r21
    273a:	91 f3       	breq	.-28     	; 0x2720 <.L_inf>
    273c:	95 1b       	sub	r25, r21
    273e:	55 0b       	sbc	r21, r21
    2740:	bb 27       	eor	r27, r27
    2742:	aa 27       	eor	r26, r26

00002744 <.L2^B1>:
    2744:	62 17       	cp	r22, r18
    2746:	73 07       	cpc	r23, r19
    2748:	84 07       	cpc	r24, r20
    274a:	38 f0       	brcs	.+14     	; 0x275a <.L3^B1>
    274c:	9f 5f       	subi	r25, 0xFF	; 255
    274e:	5f 4f       	sbci	r21, 0xFF	; 255
    2750:	22 0f       	add	r18, r18
    2752:	33 1f       	adc	r19, r19
    2754:	44 1f       	adc	r20, r20
    2756:	aa 1f       	adc	r26, r26
    2758:	a9 f3       	breq	.-22     	; 0x2744 <.L2^B1>

0000275a <.L3^B1>:
    275a:	35 d0       	rcall	.+106    	; 0x27c6 <.L_div>
    275c:	0e 2e       	mov	r0, r30
    275e:	3a f0       	brmi	.+14     	; 0x276e <.L5^B1>

00002760 <.L4^B1>:
    2760:	e0 e8       	ldi	r30, 0x80	; 128
    2762:	32 d0       	rcall	.+100    	; 0x27c8 <.L_div1>
    2764:	91 50       	subi	r25, 0x01	; 1
    2766:	50 40       	sbci	r21, 0x00	; 0
    2768:	e6 95       	lsr	r30
    276a:	00 1c       	adc	r0, r0
    276c:	ca f7       	brpl	.-14     	; 0x2760 <.L4^B1>

0000276e <.L5^B1>:
    276e:	2b d0       	rcall	.+86     	; 0x27c6 <.L_div>
    2770:	fe 2f       	mov	r31, r30
    2772:	29 d0       	rcall	.+82     	; 0x27c6 <.L_div>
    2774:	66 0f       	add	r22, r22
    2776:	77 1f       	adc	r23, r23
    2778:	88 1f       	adc	r24, r24
    277a:	bb 1f       	adc	r27, r27
    277c:	26 17       	cp	r18, r22
    277e:	37 07       	cpc	r19, r23
    2780:	48 07       	cpc	r20, r24
    2782:	ab 07       	cpc	r26, r27
    2784:	b0 e8       	ldi	r27, 0x80	; 128
    2786:	09 f0       	breq	.+2      	; 0x278a <.L4^B2>
    2788:	bb 0b       	sbc	r27, r27

0000278a <.L4^B2>:
    278a:	80 2d       	mov	r24, r0
    278c:	bf 01       	movw	r22, r30
    278e:	ff 27       	eor	r31, r31
    2790:	93 58       	subi	r25, 0x83	; 131
    2792:	5f 4f       	sbci	r21, 0xFF	; 255
    2794:	3a f0       	brmi	.+14     	; 0x27a4 <.L13^B1>
    2796:	9e 3f       	cpi	r25, 0xFE	; 254
    2798:	51 05       	cpc	r21, r1
    279a:	78 f0       	brcs	.+30     	; 0x27ba <.L15^B1>
    279c:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__fp_inf>

000027a0 <.L12^B1>:
    27a0:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__fp_szero>

000027a4 <.L13^B1>:
    27a4:	5f 3f       	cpi	r21, 0xFF	; 255
    27a6:	e4 f3       	brlt	.-8      	; 0x27a0 <.L12^B1>
    27a8:	98 3e       	cpi	r25, 0xE8	; 232
    27aa:	d4 f3       	brlt	.-12     	; 0x27a0 <.L12^B1>

000027ac <.L14^B1>:
    27ac:	86 95       	lsr	r24
    27ae:	77 95       	ror	r23
    27b0:	67 95       	ror	r22
    27b2:	b7 95       	ror	r27
    27b4:	f7 95       	ror	r31
    27b6:	9f 5f       	subi	r25, 0xFF	; 255
    27b8:	c9 f7       	brne	.-14     	; 0x27ac <.L14^B1>

000027ba <.L15^B1>:
    27ba:	88 0f       	add	r24, r24
    27bc:	91 1d       	adc	r25, r1
    27be:	96 95       	lsr	r25
    27c0:	87 95       	ror	r24
    27c2:	97 f9       	bld	r25, 7
    27c4:	08 95       	ret

000027c6 <.L_div>:
    27c6:	e1 e0       	ldi	r30, 0x01	; 1

000027c8 <.L_div1>:
    27c8:	66 0f       	add	r22, r22
    27ca:	77 1f       	adc	r23, r23
    27cc:	88 1f       	adc	r24, r24
    27ce:	bb 1f       	adc	r27, r27
    27d0:	62 17       	cp	r22, r18
    27d2:	73 07       	cpc	r23, r19
    27d4:	84 07       	cpc	r24, r20
    27d6:	ba 07       	cpc	r27, r26
    27d8:	20 f0       	brcs	.+8      	; 0x27e2 <.L2^B2>
    27da:	62 1b       	sub	r22, r18
    27dc:	73 0b       	sbc	r23, r19
    27de:	84 0b       	sbc	r24, r20
    27e0:	ba 0b       	sbc	r27, r26

000027e2 <.L2^B2>:
    27e2:	ee 1f       	adc	r30, r30
    27e4:	88 f7       	brcc	.-30     	; 0x27c8 <.L_div1>
    27e6:	e0 95       	com	r30
    27e8:	08 95       	ret

000027ea <__fixsfsi>:
    27ea:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fixunssfsi>
    27ee:	68 94       	set
    27f0:	b1 11       	cpse	r27, r1
    27f2:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__fp_szero>
    27f6:	08 95       	ret

000027f8 <__fixunssfsi>:
    27f8:	0e 94 bc 14 	call	0x2978	; 0x2978 <__fp_splitA>
    27fc:	88 f0       	brcs	.+34     	; 0x2820 <.L_err>
    27fe:	9f 57       	subi	r25, 0x7F	; 127
    2800:	98 f0       	brcs	.+38     	; 0x2828 <.L_zr>
    2802:	b9 2f       	mov	r27, r25
    2804:	99 27       	eor	r25, r25
    2806:	b7 51       	subi	r27, 0x17	; 23
    2808:	b0 f0       	brcs	.+44     	; 0x2836 <.L4^B1>
    280a:	e1 f0       	breq	.+56     	; 0x2844 <.L_sign>

0000280c <.L1^B1>:
    280c:	66 0f       	add	r22, r22
    280e:	77 1f       	adc	r23, r23
    2810:	88 1f       	adc	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	1a f0       	brmi	.+6      	; 0x281c <.L2^B1>
    2816:	ba 95       	dec	r27
    2818:	c9 f7       	brne	.-14     	; 0x280c <.L1^B1>
    281a:	14 c0       	rjmp	.+40     	; 0x2844 <.L_sign>

0000281c <.L2^B1>:
    281c:	b1 30       	cpi	r27, 0x01	; 1
    281e:	91 f0       	breq	.+36     	; 0x2844 <.L_sign>

00002820 <.L_err>:
    2820:	0e 94 d6 14 	call	0x29ac	; 0x29ac <__fp_zero>
    2824:	b1 e0       	ldi	r27, 0x01	; 1
    2826:	08 95       	ret

00002828 <.L_zr>:
    2828:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__fp_zero>

0000282c <.L3^B1>:
    282c:	67 2f       	mov	r22, r23
    282e:	78 2f       	mov	r23, r24
    2830:	88 27       	eor	r24, r24
    2832:	b8 5f       	subi	r27, 0xF8	; 248
    2834:	39 f0       	breq	.+14     	; 0x2844 <.L_sign>

00002836 <.L4^B1>:
    2836:	b9 3f       	cpi	r27, 0xF9	; 249
    2838:	cc f3       	brlt	.-14     	; 0x282c <.L3^B1>

0000283a <.L5^B1>:
    283a:	86 95       	lsr	r24
    283c:	77 95       	ror	r23
    283e:	67 95       	ror	r22
    2840:	b3 95       	inc	r27
    2842:	d9 f7       	brne	.-10     	; 0x283a <.L5^B1>

00002844 <.L_sign>:
    2844:	3e f4       	brtc	.+14     	; 0x2854 <.L6^B1>
    2846:	90 95       	com	r25
    2848:	80 95       	com	r24
    284a:	70 95       	com	r23
    284c:	61 95       	neg	r22
    284e:	7f 4f       	sbci	r23, 0xFF	; 255
    2850:	8f 4f       	sbci	r24, 0xFF	; 255
    2852:	9f 4f       	sbci	r25, 0xFF	; 255

00002854 <.L6^B1>:
    2854:	08 95       	ret

00002856 <__floatunsisf>:
    2856:	e8 94       	clt
    2858:	09 c0       	rjmp	.+18     	; 0x286c <.L1^B1>

0000285a <__floatsisf>:
    285a:	97 fb       	bst	r25, 7
    285c:	3e f4       	brtc	.+14     	; 0x286c <.L1^B1>
    285e:	90 95       	com	r25
    2860:	80 95       	com	r24
    2862:	70 95       	com	r23
    2864:	61 95       	neg	r22
    2866:	7f 4f       	sbci	r23, 0xFF	; 255
    2868:	8f 4f       	sbci	r24, 0xFF	; 255
    286a:	9f 4f       	sbci	r25, 0xFF	; 255

0000286c <.L1^B1>:
    286c:	99 23       	and	r25, r25
    286e:	a9 f0       	breq	.+42     	; 0x289a <.L4^B1>
    2870:	f9 2f       	mov	r31, r25
    2872:	96 e9       	ldi	r25, 0x96	; 150
    2874:	bb 27       	eor	r27, r27

00002876 <.L2^B1>:
    2876:	93 95       	inc	r25
    2878:	f6 95       	lsr	r31
    287a:	87 95       	ror	r24
    287c:	77 95       	ror	r23
    287e:	67 95       	ror	r22
    2880:	b7 95       	ror	r27
    2882:	f1 11       	cpse	r31, r1
    2884:	f8 cf       	rjmp	.-16     	; 0x2876 <.L2^B1>
    2886:	fa f4       	brpl	.+62     	; 0x28c6 <.L_pack>
    2888:	bb 0f       	add	r27, r27
    288a:	11 f4       	brne	.+4      	; 0x2890 <.L3^B1>
    288c:	60 ff       	sbrs	r22, 0
    288e:	1b c0       	rjmp	.+54     	; 0x28c6 <.L_pack>

00002890 <.L3^B1>:
    2890:	6f 5f       	subi	r22, 0xFF	; 255
    2892:	7f 4f       	sbci	r23, 0xFF	; 255
    2894:	8f 4f       	sbci	r24, 0xFF	; 255
    2896:	9f 4f       	sbci	r25, 0xFF	; 255
    2898:	16 c0       	rjmp	.+44     	; 0x28c6 <.L_pack>

0000289a <.L4^B1>:
    289a:	88 23       	and	r24, r24
    289c:	11 f0       	breq	.+4      	; 0x28a2 <.L5^B1>
    289e:	96 e9       	ldi	r25, 0x96	; 150
    28a0:	11 c0       	rjmp	.+34     	; 0x28c4 <.L8^B1>

000028a2 <.L5^B1>:
    28a2:	77 23       	and	r23, r23
    28a4:	21 f0       	breq	.+8      	; 0x28ae <.L6^B1>
    28a6:	9e e8       	ldi	r25, 0x8E	; 142
    28a8:	87 2f       	mov	r24, r23
    28aa:	76 2f       	mov	r23, r22
    28ac:	05 c0       	rjmp	.+10     	; 0x28b8 <.L7^B1>

000028ae <.L6^B1>:
    28ae:	66 23       	and	r22, r22
    28b0:	71 f0       	breq	.+28     	; 0x28ce <.L9^B1>
    28b2:	96 e8       	ldi	r25, 0x86	; 134
    28b4:	86 2f       	mov	r24, r22
    28b6:	70 e0       	ldi	r23, 0x00	; 0

000028b8 <.L7^B1>:
    28b8:	60 e0       	ldi	r22, 0x00	; 0
    28ba:	2a f0       	brmi	.+10     	; 0x28c6 <.L_pack>

000028bc <.L10^B1>:
    28bc:	9a 95       	dec	r25
    28be:	66 0f       	add	r22, r22
    28c0:	77 1f       	adc	r23, r23
    28c2:	88 1f       	adc	r24, r24

000028c4 <.L8^B1>:
    28c4:	da f7       	brpl	.-10     	; 0x28bc <.L10^B1>

000028c6 <.L_pack>:
    28c6:	88 0f       	add	r24, r24
    28c8:	96 95       	lsr	r25
    28ca:	87 95       	ror	r24
    28cc:	97 f9       	bld	r25, 7

000028ce <.L9^B1>:
    28ce:	08 95       	ret

000028d0 <__fp_cmp>:
    28d0:	99 0f       	add	r25, r25
    28d2:	00 08       	sbc	r0, r0
    28d4:	55 0f       	add	r21, r21
    28d6:	aa 0b       	sbc	r26, r26
    28d8:	e0 e8       	ldi	r30, 0x80	; 128
    28da:	fe ef       	ldi	r31, 0xFE	; 254
    28dc:	16 16       	cp	r1, r22
    28de:	17 06       	cpc	r1, r23
    28e0:	e8 07       	cpc	r30, r24
    28e2:	f9 07       	cpc	r31, r25
    28e4:	c0 f0       	brcs	.+48     	; 0x2916 <.L9^B1>
    28e6:	12 16       	cp	r1, r18
    28e8:	13 06       	cpc	r1, r19
    28ea:	e4 07       	cpc	r30, r20
    28ec:	f5 07       	cpc	r31, r21
    28ee:	98 f0       	brcs	.+38     	; 0x2916 <.L9^B1>
    28f0:	62 1b       	sub	r22, r18
    28f2:	73 0b       	sbc	r23, r19
    28f4:	84 0b       	sbc	r24, r20
    28f6:	95 0b       	sbc	r25, r21
    28f8:	39 f4       	brne	.+14     	; 0x2908 <.L1^B1>
    28fa:	0a 26       	eor	r0, r26
    28fc:	61 f0       	breq	.+24     	; 0x2916 <.L9^B1>
    28fe:	23 2b       	or	r18, r19
    2900:	24 2b       	or	r18, r20
    2902:	25 2b       	or	r18, r21
    2904:	21 f4       	brne	.+8      	; 0x290e <.L2^B1>
    2906:	08 95       	ret

00002908 <.L1^B1>:
    2908:	0a 26       	eor	r0, r26
    290a:	09 f4       	brne	.+2      	; 0x290e <.L2^B1>
    290c:	a1 40       	sbci	r26, 0x01	; 1

0000290e <.L2^B1>:
    290e:	a6 95       	lsr	r26
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	81 1d       	adc	r24, r1
    2914:	81 1d       	adc	r24, r1

00002916 <.L9^B1>:
    2916:	08 95       	ret

00002918 <__fp_inf>:
    2918:	97 f9       	bld	r25, 7
    291a:	9f 67       	ori	r25, 0x7F	; 127
    291c:	80 e8       	ldi	r24, 0x80	; 128
    291e:	70 e0       	ldi	r23, 0x00	; 0
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	08 95       	ret

00002924 <__fp_nan>:
    2924:	9f ef       	ldi	r25, 0xFF	; 255
    2926:	80 ec       	ldi	r24, 0xC0	; 192
    2928:	08 95       	ret

0000292a <__fp_pscA>:
    292a:	00 24       	eor	r0, r0
    292c:	0a 94       	dec	r0
    292e:	16 16       	cp	r1, r22
    2930:	17 06       	cpc	r1, r23
    2932:	18 06       	cpc	r1, r24
    2934:	09 06       	cpc	r0, r25
    2936:	08 95       	ret

00002938 <__fp_pscB>:
    2938:	00 24       	eor	r0, r0
    293a:	0a 94       	dec	r0
    293c:	12 16       	cp	r1, r18
    293e:	13 06       	cpc	r1, r19
    2940:	14 06       	cpc	r1, r20
    2942:	05 06       	cpc	r0, r21
    2944:	08 95       	ret

00002946 <__fp_round>:
    2946:	09 2e       	mov	r0, r25
    2948:	03 94       	inc	r0
    294a:	00 0c       	add	r0, r0
    294c:	11 f4       	brne	.+4      	; 0x2952 <.L1^B1>
    294e:	88 23       	and	r24, r24
    2950:	52 f0       	brmi	.+20     	; 0x2966 <.L3^B1>

00002952 <.L1^B1>:
    2952:	bb 0f       	add	r27, r27
    2954:	40 f4       	brcc	.+16     	; 0x2966 <.L3^B1>
    2956:	bf 2b       	or	r27, r31
    2958:	11 f4       	brne	.+4      	; 0x295e <.L2^B1>
    295a:	60 ff       	sbrs	r22, 0
    295c:	04 c0       	rjmp	.+8      	; 0x2966 <.L3^B1>

0000295e <.L2^B1>:
    295e:	6f 5f       	subi	r22, 0xFF	; 255
    2960:	7f 4f       	sbci	r23, 0xFF	; 255
    2962:	8f 4f       	sbci	r24, 0xFF	; 255
    2964:	9f 4f       	sbci	r25, 0xFF	; 255

00002966 <.L3^B1>:
    2966:	08 95       	ret

00002968 <__fp_split3>:
    2968:	57 fd       	sbrc	r21, 7
    296a:	90 58       	subi	r25, 0x80	; 128
    296c:	44 0f       	add	r20, r20
    296e:	55 1f       	adc	r21, r21
    2970:	59 f0       	breq	.+22     	; 0x2988 <.L4^B1>
    2972:	5f 3f       	cpi	r21, 0xFF	; 255
    2974:	71 f0       	breq	.+28     	; 0x2992 <.L5^B1>

00002976 <.L1^B1>:
    2976:	47 95       	ror	r20

00002978 <__fp_splitA>:
    2978:	88 0f       	add	r24, r24
    297a:	97 fb       	bst	r25, 7
    297c:	99 1f       	adc	r25, r25
    297e:	61 f0       	breq	.+24     	; 0x2998 <.L6^B1>
    2980:	9f 3f       	cpi	r25, 0xFF	; 255
    2982:	79 f0       	breq	.+30     	; 0x29a2 <.L7^B1>

00002984 <.L3^B1>:
    2984:	87 95       	ror	r24
    2986:	08 95       	ret

00002988 <.L4^B1>:
    2988:	12 16       	cp	r1, r18
    298a:	13 06       	cpc	r1, r19
    298c:	14 06       	cpc	r1, r20
    298e:	55 1f       	adc	r21, r21
    2990:	f2 cf       	rjmp	.-28     	; 0x2976 <.L1^B1>

00002992 <.L5^B1>:
    2992:	46 95       	lsr	r20
    2994:	f1 df       	rcall	.-30     	; 0x2978 <__fp_splitA>
    2996:	08 c0       	rjmp	.+16     	; 0x29a8 <.L8^B1>

00002998 <.L6^B1>:
    2998:	16 16       	cp	r1, r22
    299a:	17 06       	cpc	r1, r23
    299c:	18 06       	cpc	r1, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	f1 cf       	rjmp	.-30     	; 0x2984 <.L3^B1>

000029a2 <.L7^B1>:
    29a2:	86 95       	lsr	r24
    29a4:	71 05       	cpc	r23, r1
    29a6:	61 05       	cpc	r22, r1

000029a8 <.L8^B1>:
    29a8:	08 94       	sec
    29aa:	08 95       	ret

000029ac <__fp_zero>:
    29ac:	e8 94       	clt

000029ae <__fp_szero>:
    29ae:	bb 27       	eor	r27, r27
    29b0:	66 27       	eor	r22, r22
    29b2:	77 27       	eor	r23, r23
    29b4:	cb 01       	movw	r24, r22
    29b6:	97 f9       	bld	r25, 7
    29b8:	08 95       	ret

000029ba <__gesf2>:
    29ba:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__fp_cmp>
    29be:	08 f4       	brcc	.+2      	; 0x29c2 <.L1^B1>
    29c0:	8f ef       	ldi	r24, 0xFF	; 255

000029c2 <.L1^B1>:
    29c2:	08 95       	ret

000029c4 <__mulsf3>:
    29c4:	0e 94 f5 14 	call	0x29ea	; 0x29ea <__mulsf3x>
    29c8:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__fp_round>

000029cc <.L^B1>:
    29cc:	0e 94 95 14 	call	0x292a	; 0x292a <__fp_pscA>
    29d0:	38 f0       	brcs	.+14     	; 0x29e0 <.L1^B1>
    29d2:	0e 94 9c 14 	call	0x2938	; 0x2938 <__fp_pscB>
    29d6:	20 f0       	brcs	.+8      	; 0x29e0 <.L1^B1>
    29d8:	95 23       	and	r25, r21
    29da:	11 f0       	breq	.+4      	; 0x29e0 <.L1^B1>
    29dc:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__fp_inf>

000029e0 <.L1^B1>:
    29e0:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__fp_nan>

000029e4 <.L2^B1>:
    29e4:	11 24       	eor	r1, r1
    29e6:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__fp_szero>

000029ea <__mulsf3x>:
    29ea:	0e 94 b4 14 	call	0x2968	; 0x2968 <__fp_split3>
    29ee:	70 f3       	brcs	.-36     	; 0x29cc <.L^B1>

000029f0 <__mulsf3_pse>:
    29f0:	95 9f       	mul	r25, r21
    29f2:	c1 f3       	breq	.-16     	; 0x29e4 <.L2^B1>
    29f4:	95 0f       	add	r25, r21
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	55 1f       	adc	r21, r21
    29fa:	62 9f       	mul	r22, r18
    29fc:	f0 01       	movw	r30, r0
    29fe:	72 9f       	mul	r23, r18
    2a00:	bb 27       	eor	r27, r27
    2a02:	f0 0d       	add	r31, r0
    2a04:	b1 1d       	adc	r27, r1
    2a06:	63 9f       	mul	r22, r19
    2a08:	aa 27       	eor	r26, r26
    2a0a:	f0 0d       	add	r31, r0
    2a0c:	b1 1d       	adc	r27, r1
    2a0e:	aa 1f       	adc	r26, r26
    2a10:	64 9f       	mul	r22, r20
    2a12:	66 27       	eor	r22, r22
    2a14:	b0 0d       	add	r27, r0
    2a16:	a1 1d       	adc	r26, r1
    2a18:	66 1f       	adc	r22, r22
    2a1a:	82 9f       	mul	r24, r18
    2a1c:	22 27       	eor	r18, r18
    2a1e:	b0 0d       	add	r27, r0
    2a20:	a1 1d       	adc	r26, r1
    2a22:	62 1f       	adc	r22, r18
    2a24:	73 9f       	mul	r23, r19
    2a26:	b0 0d       	add	r27, r0
    2a28:	a1 1d       	adc	r26, r1
    2a2a:	62 1f       	adc	r22, r18
    2a2c:	83 9f       	mul	r24, r19
    2a2e:	a0 0d       	add	r26, r0
    2a30:	61 1d       	adc	r22, r1
    2a32:	22 1f       	adc	r18, r18
    2a34:	74 9f       	mul	r23, r20
    2a36:	33 27       	eor	r19, r19
    2a38:	a0 0d       	add	r26, r0
    2a3a:	61 1d       	adc	r22, r1
    2a3c:	23 1f       	adc	r18, r19
    2a3e:	84 9f       	mul	r24, r20
    2a40:	60 0d       	add	r22, r0
    2a42:	21 1d       	adc	r18, r1
    2a44:	82 2f       	mov	r24, r18
    2a46:	76 2f       	mov	r23, r22
    2a48:	6a 2f       	mov	r22, r26
    2a4a:	11 24       	eor	r1, r1
    2a4c:	9f 57       	subi	r25, 0x7F	; 127
    2a4e:	50 40       	sbci	r21, 0x00	; 0
    2a50:	9a f0       	brmi	.+38     	; 0x2a78 <.L13^B1>
    2a52:	f1 f0       	breq	.+60     	; 0x2a90 <.L15^B1>

00002a54 <.L10^B1>:
    2a54:	88 23       	and	r24, r24
    2a56:	4a f0       	brmi	.+18     	; 0x2a6a <.L11^B1>
    2a58:	ee 0f       	add	r30, r30
    2a5a:	ff 1f       	adc	r31, r31
    2a5c:	bb 1f       	adc	r27, r27
    2a5e:	66 1f       	adc	r22, r22
    2a60:	77 1f       	adc	r23, r23
    2a62:	88 1f       	adc	r24, r24
    2a64:	91 50       	subi	r25, 0x01	; 1
    2a66:	50 40       	sbci	r21, 0x00	; 0
    2a68:	a9 f7       	brne	.-22     	; 0x2a54 <.L10^B1>

00002a6a <.L11^B1>:
    2a6a:	9e 3f       	cpi	r25, 0xFE	; 254
    2a6c:	51 05       	cpc	r21, r1
    2a6e:	80 f0       	brcs	.+32     	; 0x2a90 <.L15^B1>
    2a70:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__fp_inf>

00002a74 <.L12^B1>:
    2a74:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__fp_szero>

00002a78 <.L13^B1>:
    2a78:	5f 3f       	cpi	r21, 0xFF	; 255
    2a7a:	e4 f3       	brlt	.-8      	; 0x2a74 <.L12^B1>
    2a7c:	98 3e       	cpi	r25, 0xE8	; 232
    2a7e:	d4 f3       	brlt	.-12     	; 0x2a74 <.L12^B1>

00002a80 <.L14^B1>:
    2a80:	86 95       	lsr	r24
    2a82:	77 95       	ror	r23
    2a84:	67 95       	ror	r22
    2a86:	b7 95       	ror	r27
    2a88:	f7 95       	ror	r31
    2a8a:	e7 95       	ror	r30
    2a8c:	9f 5f       	subi	r25, 0xFF	; 255
    2a8e:	c1 f7       	brne	.-16     	; 0x2a80 <.L14^B1>

00002a90 <.L15^B1>:
    2a90:	fe 2b       	or	r31, r30
    2a92:	88 0f       	add	r24, r24
    2a94:	91 1d       	adc	r25, r1
    2a96:	96 95       	lsr	r25
    2a98:	87 95       	ror	r24
    2a9a:	97 f9       	bld	r25, 7
    2a9c:	08 95       	ret

00002a9e <_exit>:
    2a9e:	f8 94       	cli

00002aa0 <__stop_program>:
    2aa0:	ff cf       	rjmp	.-2      	; 0x2aa0 <__stop_program>
