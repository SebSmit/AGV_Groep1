
bin\Debug\AVGcode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00002838  000028ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002838  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800220  00800220  0000290c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000290c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  0000290f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002924  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000001f8  00000000  00000000  00002968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00001bd1  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000134e  00000000  00000000  00004731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001ed0  00000000  00000000  00005a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000007d0  00000000  00000000  00007950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    00000919  00000000  00000000  00008120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001c3  00000000  00000000  00008a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 03 04 	jmp	0x806	; 0x806 <__vector_17>
      48:	0c 94 33 04 	jmp	0x866	; 0x866 <__vector_18>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_20>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__vector_32>
      84:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__vector_33>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__vector_35>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	e8 e3       	ldi	r30, 0x38	; 56

000000fc <.Loc.4>:
      fc:	f8 e2       	ldi	r31, 0x28	; 40

000000fe <.Loc.5>:
      fe:	00 e0       	ldi	r16, 0x00	; 0

00000100 <.Loc.6>:
     100:	0b bf       	out	0x3b, r16	; 59

00000102 <.Loc.7>:
     102:	02 c0       	rjmp	.+4      	; 0x108 <.L__do_copy_data_start>

00000104 <.L__do_copy_data_loop>:
     104:	07 90       	elpm	r0, Z+

00000106 <.Loc.9>:
     106:	0d 92       	st	X+, r0

00000108 <.L__do_copy_data_start>:
     108:	a0 32       	cpi	r26, 0x20	; 32

0000010a <.Loc.11>:
     10a:	b1 07       	cpc	r27, r17

0000010c <.Loc.12>:
     10c:	d9 f7       	brne	.-10     	; 0x104 <.L__do_copy_data_loop>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2

00000110 <.Loc.1>:
     110:	a0 e2       	ldi	r26, 0x20	; 32

00000112 <.Loc.2>:
     112:	b2 e0       	ldi	r27, 0x02	; 2

00000114 <.Loc.3>:
     114:	01 c0       	rjmp	.+2      	; 0x118 <.Loc.5>

00000116 <.Loc.4>:
     116:	1d 92       	st	X+, r1

00000118 <.Loc.5>:
     118:	ac 32       	cpi	r26, 0x2C	; 44

0000011a <.Loc.6>:
     11a:	b2 07       	cpc	r27, r18

0000011c <.Loc.7>:
     11c:	e1 f7       	brne	.-8      	; 0x116 <.Loc.4>

0000011e <L0^A>:
     11e:	0e 94 ba 06 	call	0xd74	; 0xd74 <main>
     122:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <I2C_Init>:

volatile int Gyro_count = 0;
volatile float DS_1 = 0;
volatile float DS_2 = 0;

void I2C_Init() {
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62

00000132 <.Loc.1>:
    // Set SCL frequency to 100kHz
    TWBR = 72;
     132:	88 eb       	ldi	r24, 0xB8	; 184
     134:	90 e0       	ldi	r25, 0x00	; 0

00000136 <.Loc.2>:
     136:	28 e4       	ldi	r18, 0x48	; 72
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18

0000013c <.Loc.3>:
}
     13c:	00 00       	nop
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	08 95       	ret

00000144 <I2C_Start>:

void I2C_Start() {
     144:	cf 93       	push	r28
     146:	df 93       	push	r29
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62

0000014c <.Loc.5>:
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     14c:	8c eb       	ldi	r24, 0xBC	; 188
     14e:	90 e0       	ldi	r25, 0x00	; 0

00000150 <.Loc.6>:
     150:	24 ea       	ldi	r18, 0xA4	; 164
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18

00000156 <.Loc.7>:
	...

00000158 <.L3>:
    while (!(TWCR & (1 << TWINT)));
     158:	8c eb       	ldi	r24, 0xBC	; 188
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	80 81       	ld	r24, Z

00000160 <.Loc.9>:
     160:	88 23       	and	r24, r24
     162:	d4 f7       	brge	.-12     	; 0x158 <.L3>

00000164 <.Loc.10>:
}
     164:	00 00       	nop
     166:	00 00       	nop
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <I2C_Stop>:

void I2C_Stop() {
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62

00000176 <.Loc.12>:
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     176:	8c eb       	ldi	r24, 0xBC	; 188
     178:	90 e0       	ldi	r25, 0x00	; 0

0000017a <.Loc.13>:
     17a:	24 e9       	ldi	r18, 0x94	; 148
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18

00000180 <.Loc.14>:
}
     180:	00 00       	nop
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <I2C_Write>:

void I2C_Write(uint8_t data) {
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	0f 92       	push	r0
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	89 83       	std	Y+1, r24	; 0x01

00000194 <.Loc.16>:
    TWDR = data;
     194:	8b eb       	ldi	r24, 0xBB	; 187
     196:	90 e0       	ldi	r25, 0x00	; 0

00000198 <.Loc.17>:
     198:	29 81       	ldd	r18, Y+1	; 0x01
     19a:	fc 01       	movw	r30, r24
     19c:	20 83       	st	Z, r18

0000019e <.Loc.18>:
    TWCR = (1 << TWINT) | (1 << TWEN);
     19e:	8c eb       	ldi	r24, 0xBC	; 188
     1a0:	90 e0       	ldi	r25, 0x00	; 0

000001a2 <.Loc.19>:
     1a2:	24 e8       	ldi	r18, 0x84	; 132
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 83       	st	Z, r18

000001a8 <.Loc.20>:
	...

000001aa <.L6>:
    while (!(TWCR & (1 << TWINT)));
     1aa:	8c eb       	ldi	r24, 0xBC	; 188
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	fc 01       	movw	r30, r24
     1b0:	80 81       	ld	r24, Z

000001b2 <.Loc.22>:
     1b2:	88 23       	and	r24, r24
     1b4:	d4 f7       	brge	.-12     	; 0x1aa <.L6>

000001b6 <.Loc.23>:
}
     1b6:	00 00       	nop
     1b8:	00 00       	nop
     1ba:	0f 90       	pop	r0
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <I2C_ReadACK>:

uint8_t I2C_ReadACK() {
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62

000001ca <.Loc.25>:
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     1ca:	8c eb       	ldi	r24, 0xBC	; 188
     1cc:	90 e0       	ldi	r25, 0x00	; 0

000001ce <.Loc.26>:
     1ce:	24 ec       	ldi	r18, 0xC4	; 196
     1d0:	fc 01       	movw	r30, r24
     1d2:	20 83       	st	Z, r18

000001d4 <.Loc.27>:
	...

000001d6 <.L8>:
    while (!(TWCR & (1 << TWINT)));
     1d6:	8c eb       	ldi	r24, 0xBC	; 188
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	fc 01       	movw	r30, r24
     1dc:	80 81       	ld	r24, Z

000001de <.Loc.29>:
     1de:	88 23       	and	r24, r24
     1e0:	d4 f7       	brge	.-12     	; 0x1d6 <.L8>

000001e2 <.Loc.30>:
    return TWDR;
     1e2:	8b eb       	ldi	r24, 0xBB	; 187
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z

000001ea <.Loc.31>:
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <I2C_ReadNACK>:

uint8_t I2C_ReadNACK() {
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62

000001f8 <.Loc.33>:
    TWCR = (1 << TWINT) | (1 << TWEN);
     1f8:	8c eb       	ldi	r24, 0xBC	; 188
     1fa:	90 e0       	ldi	r25, 0x00	; 0

000001fc <.Loc.34>:
     1fc:	24 e8       	ldi	r18, 0x84	; 132
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18

00000202 <.Loc.35>:
	...

00000204 <.L11>:
    while (!(TWCR & (1 << TWINT)));
     204:	8c eb       	ldi	r24, 0xBC	; 188
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	fc 01       	movw	r30, r24
     20a:	80 81       	ld	r24, Z

0000020c <.Loc.37>:
     20c:	88 23       	and	r24, r24
     20e:	d4 f7       	brge	.-12     	; 0x204 <.L11>

00000210 <.Loc.38>:
    return TWDR;
     210:	8b eb       	ldi	r24, 0xBB	; 187
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	fc 01       	movw	r30, r24
     216:	80 81       	ld	r24, Z

00000218 <.Loc.39>:
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <MPU6050_WriteReg>:

void MPU6050_WriteReg(uint8_t reg, uint8_t data) {
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	0f 92       	push	r0
     224:	0f 92       	push	r0
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	89 83       	std	Y+1, r24	; 0x01
     22c:	6a 83       	std	Y+2, r22	; 0x02

0000022e <.Loc.41>:
    I2C_Start();
     22e:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>

00000232 <.Loc.42>:
    I2C_Write(MPU6050_ADDR << 1);
     232:	80 ed       	ldi	r24, 0xD0	; 208
     234:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

00000238 <.Loc.43>:
    I2C_Write(reg);
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

0000023e <.Loc.44>:
    I2C_Write(data);
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

00000244 <.Loc.45>:
    I2C_Stop();
     244:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Stop>

00000248 <.Loc.46>:
}
     248:	00 00       	nop
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <MPU6050_ReadGyro>:

int16_t MPU6050_ReadGyro(uint8_t reg) {
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	00 d0       	rcall	.+0      	; 0x25e <L0^A>

0000025e <L0^A>:
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	8b 83       	std	Y+3, r24	; 0x03

00000264 <.Loc.48>:
    int16_t value;
    I2C_Start();
     264:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>

00000268 <.Loc.49>:
    I2C_Write(MPU6050_ADDR << 1);
     268:	80 ed       	ldi	r24, 0xD0	; 208
     26a:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

0000026e <.Loc.50>:
    I2C_Write(reg);
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

00000274 <.Loc.51>:
    I2C_Start();
     274:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Start>

00000278 <.Loc.52>:
    I2C_Write((MPU6050_ADDR << 1) | 0x01);
     278:	81 ed       	ldi	r24, 0xD1	; 209
     27a:	0e 94 c4 00 	call	0x188	; 0x188 <I2C_Write>

0000027e <.Loc.53>:
    value = (I2C_ReadACK() << 8) | I2C_ReadNACK();
     27e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <I2C_ReadACK>
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0

00000286 <.Loc.54>:
     286:	18 2f       	mov	r17, r24
     288:	00 27       	eor	r16, r16

0000028a <.Loc.55>:
     28a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_ReadNACK>
     28e:	88 2f       	mov	r24, r24
     290:	90 e0       	ldi	r25, 0x00	; 0

00000292 <.Loc.56>:
     292:	80 2b       	or	r24, r16
     294:	91 2b       	or	r25, r17
     296:	9a 83       	std	Y+2, r25	; 0x02
     298:	89 83       	std	Y+1, r24	; 0x01

0000029a <.Loc.57>:
    I2C_Stop();
     29a:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Stop>

0000029e <.Loc.58>:
    return value;
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	9a 81       	ldd	r25, Y+2	; 0x02

000002a2 <.Loc.59>:
}
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <Read_Gyro_X>:

float Read_Gyro_X(void){
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	66 97       	sbiw	r28, 0x16	; 22
     2bc:	0f b6       	in	r0, 0x3f	; 63
     2be:	f8 94       	cli
     2c0:	de bf       	out	0x3e, r29	; 62
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	cd bf       	out	0x3d, r28	; 61

000002c6 <.Loc.61>:
    int16_t GyroX = MPU6050_ReadGyro(0x43);
     2c6:	83 e4       	ldi	r24, 0x43	; 67
     2c8:	0e 94 2a 01 	call	0x254	; 0x254 <MPU6050_ReadGyro>
     2cc:	9a 83       	std	Y+2, r25	; 0x02
     2ce:	89 83       	std	Y+1, r24	; 0x01

000002d0 <.Loc.62>:
    GyroX += 197;
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	8b 53       	subi	r24, 0x3B	; 59
     2d6:	9f 4f       	sbci	r25, 0xFF	; 255
     2d8:	9a 83       	std	Y+2, r25	; 0x02
     2da:	89 83       	std	Y+1, r24	; 0x01

000002dc <.Loc.63>:
    float GyroX_degPerSec = (float)GyroX / 131.0;
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	9a 81       	ldd	r25, Y+2	; 0x02
     2e0:	9c 01       	movw	r18, r24
     2e2:	99 0f       	add	r25, r25
     2e4:	44 0b       	sbc	r20, r20
     2e6:	55 0b       	sbc	r21, r21
     2e8:	2f 87       	std	Y+15, r18	; 0x0f
     2ea:	38 8b       	std	Y+16, r19	; 0x10
     2ec:	49 8b       	std	Y+17, r20	; 0x11
     2ee:	5a 8b       	std	Y+18, r21	; 0x12
     2f0:	6f 85       	ldd	r22, Y+15	; 0x0f
     2f2:	78 89       	ldd	r23, Y+16	; 0x10
     2f4:	89 89       	ldd	r24, Y+17	; 0x11
     2f6:	9a 89       	ldd	r25, Y+18	; 0x12
     2f8:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__floatsisf>
     2fc:	6f 83       	std	Y+7, r22	; 0x07
     2fe:	78 87       	std	Y+8, r23	; 0x08
     300:	89 87       	std	Y+9, r24	; 0x09
     302:	9a 87       	std	Y+10, r25	; 0x0a

00000304 <.Loc.64>:
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	43 e0       	ldi	r20, 0x03	; 3
     30a:	53 e4       	ldi	r21, 0x43	; 67
     30c:	6f 81       	ldd	r22, Y+7	; 0x07
     30e:	78 85       	ldd	r23, Y+8	; 0x08
     310:	89 85       	ldd	r24, Y+9	; 0x09
     312:	9a 85       	ldd	r25, Y+10	; 0x0a
     314:	0e 94 4e 12 	call	0x249c	; 0x249c <__divsf3>
     318:	6b 8b       	std	Y+19, r22	; 0x13
     31a:	7c 8b       	std	Y+20, r23	; 0x14
     31c:	8d 8b       	std	Y+21, r24	; 0x15
     31e:	9e 8b       	std	Y+22, r25	; 0x16
     320:	8b 89       	ldd	r24, Y+19	; 0x13
     322:	9c 89       	ldd	r25, Y+20	; 0x14
     324:	ad 89       	ldd	r26, Y+21	; 0x15
     326:	be 89       	ldd	r27, Y+22	; 0x16
     328:	8b 83       	std	Y+3, r24	; 0x03
     32a:	9c 83       	std	Y+4, r25	; 0x04
     32c:	ad 83       	std	Y+5, r26	; 0x05
     32e:	be 83       	std	Y+6, r27	; 0x06

00000330 <.Loc.65>:
    return GyroX_degPerSec;
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	ad 81       	ldd	r26, Y+5	; 0x05
     336:	be 81       	ldd	r27, Y+6	; 0x06
     338:	8b 87       	std	Y+11, r24	; 0x0b
     33a:	9c 87       	std	Y+12, r25	; 0x0c
     33c:	ad 87       	std	Y+13, r26	; 0x0d
     33e:	be 87       	std	Y+14, r27	; 0x0e

00000340 <.Loc.66>:
}
     340:	6b 85       	ldd	r22, Y+11	; 0x0b
     342:	7c 85       	ldd	r23, Y+12	; 0x0c
     344:	8d 85       	ldd	r24, Y+13	; 0x0d
     346:	9e 85       	ldd	r25, Y+14	; 0x0e
     348:	66 96       	adiw	r28, 0x16	; 22
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <Read_Gyro_Y>:
float Read_Gyro_Y(void){
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	66 97       	sbiw	r28, 0x16	; 22
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61

0000036e <.Loc.68>:
    int16_t GyroY = MPU6050_ReadGyro(0x45);
     36e:	85 e4       	ldi	r24, 0x45	; 69
     370:	0e 94 2a 01 	call	0x254	; 0x254 <MPU6050_ReadGyro>
     374:	9a 83       	std	Y+2, r25	; 0x02
     376:	89 83       	std	Y+1, r24	; 0x01

00000378 <.Loc.69>:
    float GyroY_degPerSec = (float)GyroY / 131.0;
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	9a 81       	ldd	r25, Y+2	; 0x02
     37c:	9c 01       	movw	r18, r24
     37e:	99 0f       	add	r25, r25
     380:	44 0b       	sbc	r20, r20
     382:	55 0b       	sbc	r21, r21
     384:	2f 87       	std	Y+15, r18	; 0x0f
     386:	38 8b       	std	Y+16, r19	; 0x10
     388:	49 8b       	std	Y+17, r20	; 0x11
     38a:	5a 8b       	std	Y+18, r21	; 0x12
     38c:	6f 85       	ldd	r22, Y+15	; 0x0f
     38e:	78 89       	ldd	r23, Y+16	; 0x10
     390:	89 89       	ldd	r24, Y+17	; 0x11
     392:	9a 89       	ldd	r25, Y+18	; 0x12
     394:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__floatsisf>
     398:	6f 83       	std	Y+7, r22	; 0x07
     39a:	78 87       	std	Y+8, r23	; 0x08
     39c:	89 87       	std	Y+9, r24	; 0x09
     39e:	9a 87       	std	Y+10, r25	; 0x0a

000003a0 <.Loc.70>:
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	43 e0       	ldi	r20, 0x03	; 3
     3a6:	53 e4       	ldi	r21, 0x43	; 67
     3a8:	6f 81       	ldd	r22, Y+7	; 0x07
     3aa:	78 85       	ldd	r23, Y+8	; 0x08
     3ac:	89 85       	ldd	r24, Y+9	; 0x09
     3ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b0:	0e 94 4e 12 	call	0x249c	; 0x249c <__divsf3>
     3b4:	6b 8b       	std	Y+19, r22	; 0x13
     3b6:	7c 8b       	std	Y+20, r23	; 0x14
     3b8:	8d 8b       	std	Y+21, r24	; 0x15
     3ba:	9e 8b       	std	Y+22, r25	; 0x16
     3bc:	8b 89       	ldd	r24, Y+19	; 0x13
     3be:	9c 89       	ldd	r25, Y+20	; 0x14
     3c0:	ad 89       	ldd	r26, Y+21	; 0x15
     3c2:	be 89       	ldd	r27, Y+22	; 0x16
     3c4:	8b 83       	std	Y+3, r24	; 0x03
     3c6:	9c 83       	std	Y+4, r25	; 0x04
     3c8:	ad 83       	std	Y+5, r26	; 0x05
     3ca:	be 83       	std	Y+6, r27	; 0x06

000003cc <.Loc.71>:
    return GyroY_degPerSec;
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	9c 81       	ldd	r25, Y+4	; 0x04
     3d0:	ad 81       	ldd	r26, Y+5	; 0x05
     3d2:	be 81       	ldd	r27, Y+6	; 0x06
     3d4:	8b 87       	std	Y+11, r24	; 0x0b
     3d6:	9c 87       	std	Y+12, r25	; 0x0c
     3d8:	ad 87       	std	Y+13, r26	; 0x0d
     3da:	be 87       	std	Y+14, r27	; 0x0e

000003dc <.Loc.72>:
}
     3dc:	6b 85       	ldd	r22, Y+11	; 0x0b
     3de:	7c 85       	ldd	r23, Y+12	; 0x0c
     3e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     3e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     3e4:	66 96       	adiw	r28, 0x16	; 22
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <Read_Gyro_Z>:
float Read_Gyro_Z(void){
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	66 97       	sbiw	r28, 0x16	; 22
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61

0000040a <.Loc.74>:
    int16_t GyroZ = MPU6050_ReadGyro(0x47);
     40a:	87 e4       	ldi	r24, 0x47	; 71
     40c:	0e 94 2a 01 	call	0x254	; 0x254 <MPU6050_ReadGyro>
     410:	9a 83       	std	Y+2, r25	; 0x02
     412:	89 83       	std	Y+1, r24	; 0x01

00000414 <.Loc.75>:
    float GyroZ_degPerSec = (float)GyroZ / 131.0;
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	9c 01       	movw	r18, r24
     41a:	99 0f       	add	r25, r25
     41c:	44 0b       	sbc	r20, r20
     41e:	55 0b       	sbc	r21, r21
     420:	2f 87       	std	Y+15, r18	; 0x0f
     422:	38 8b       	std	Y+16, r19	; 0x10
     424:	49 8b       	std	Y+17, r20	; 0x11
     426:	5a 8b       	std	Y+18, r21	; 0x12
     428:	6f 85       	ldd	r22, Y+15	; 0x0f
     42a:	78 89       	ldd	r23, Y+16	; 0x10
     42c:	89 89       	ldd	r24, Y+17	; 0x11
     42e:	9a 89       	ldd	r25, Y+18	; 0x12
     430:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__floatsisf>
     434:	6f 83       	std	Y+7, r22	; 0x07
     436:	78 87       	std	Y+8, r23	; 0x08
     438:	89 87       	std	Y+9, r24	; 0x09
     43a:	9a 87       	std	Y+10, r25	; 0x0a

0000043c <.Loc.76>:
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	43 e0       	ldi	r20, 0x03	; 3
     442:	53 e4       	ldi	r21, 0x43	; 67
     444:	6f 81       	ldd	r22, Y+7	; 0x07
     446:	78 85       	ldd	r23, Y+8	; 0x08
     448:	89 85       	ldd	r24, Y+9	; 0x09
     44a:	9a 85       	ldd	r25, Y+10	; 0x0a
     44c:	0e 94 4e 12 	call	0x249c	; 0x249c <__divsf3>
     450:	6b 8b       	std	Y+19, r22	; 0x13
     452:	7c 8b       	std	Y+20, r23	; 0x14
     454:	8d 8b       	std	Y+21, r24	; 0x15
     456:	9e 8b       	std	Y+22, r25	; 0x16
     458:	8b 89       	ldd	r24, Y+19	; 0x13
     45a:	9c 89       	ldd	r25, Y+20	; 0x14
     45c:	ad 89       	ldd	r26, Y+21	; 0x15
     45e:	be 89       	ldd	r27, Y+22	; 0x16
     460:	8b 83       	std	Y+3, r24	; 0x03
     462:	9c 83       	std	Y+4, r25	; 0x04
     464:	ad 83       	std	Y+5, r26	; 0x05
     466:	be 83       	std	Y+6, r27	; 0x06

00000468 <.Loc.77>:
    return GyroZ_degPerSec;
     468:	8b 81       	ldd	r24, Y+3	; 0x03
     46a:	9c 81       	ldd	r25, Y+4	; 0x04
     46c:	ad 81       	ldd	r26, Y+5	; 0x05
     46e:	be 81       	ldd	r27, Y+6	; 0x06
     470:	8b 87       	std	Y+11, r24	; 0x0b
     472:	9c 87       	std	Y+12, r25	; 0x0c
     474:	ad 87       	std	Y+13, r26	; 0x0d
     476:	be 87       	std	Y+14, r27	; 0x0e

00000478 <.Loc.78>:
}
     478:	6b 85       	ldd	r22, Y+11	; 0x0b
     47a:	7c 85       	ldd	r23, Y+12	; 0x0c
     47c:	8d 85       	ldd	r24, Y+13	; 0x0d
     47e:	9e 85       	ldd	r25, Y+14	; 0x0e
     480:	66 96       	adiw	r28, 0x16	; 22
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	f8 94       	cli
     486:	de bf       	out	0x3e, r29	; 62
     488:	0f be       	out	0x3f, r0	; 63
     48a:	cd bf       	out	0x3d, r28	; 61
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <MPU6050_Init>:


void MPU6050_Init() {
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62

0000049a <.Loc.80>:
    MPU6050_WriteReg(0x6B, 0x00); // Power on the MPU6050
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	8b e6       	ldi	r24, 0x6B	; 107
     49e:	0e 94 0f 01 	call	0x21e	; 0x21e <MPU6050_WriteReg>

000004a2 <.Loc.81>:
}
     4a2:	00 00       	nop
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <initTimerGyro>:

void initTimerGyro(void){
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62

000004b2 <.Loc.83>:
    TCCR0A = 0;
     4b2:	84 e4       	ldi	r24, 0x44	; 68
     4b4:	90 e0       	ldi	r25, 0x00	; 0

000004b6 <.Loc.84>:
     4b6:	fc 01       	movw	r30, r24
     4b8:	10 82       	st	Z, r1

000004ba <.Loc.85>:
    TCCR0B |= (1<<CS00);
     4ba:	85 e4       	ldi	r24, 0x45	; 69
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	fc 01       	movw	r30, r24
     4c0:	20 81       	ld	r18, Z
     4c2:	85 e4       	ldi	r24, 0x45	; 69
     4c4:	90 e0       	ldi	r25, 0x00	; 0

000004c6 <.Loc.86>:
     4c6:	21 60       	ori	r18, 0x01	; 1
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18

000004cc <.Loc.87>:
    //16000000 / 256 = 62,500
    //1 / 62500 = 0.000016s = 0.016ms = 16us
    //62500x/sec
    TIMSK0 = (1<<TOIE0);
     4cc:	8e e6       	ldi	r24, 0x6E	; 110
     4ce:	90 e0       	ldi	r25, 0x00	; 0

000004d0 <.Loc.88>:
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	fc 01       	movw	r30, r24
     4d4:	20 83       	st	Z, r18

000004d6 <.Loc.89>:
    sei();
     4d6:	78 94       	sei

000004d8 <.Loc.90>:
}
     4d8:	00 00       	nop
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <__vector_23>:
ISR(TIMER0_OVF_vect){
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62

000004f6 <.Loc.92>:
    Gyro_count++;
     4f6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Gyro_count>
     4fa:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Gyro_count+0x1>
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <Gyro_count+0x1>
     504:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <Gyro_count>

00000508 <.Loc.93>:
}
     508:	00 00       	nop
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	9f 91       	pop	r25
     510:	8f 91       	pop	r24
     512:	0f 90       	pop	r0
     514:	0f be       	out	0x3f, r0	; 63
     516:	0f 90       	pop	r0
     518:	1f 90       	pop	r1
     51a:	18 95       	reti

0000051c <UpdateHeading>:

float UpdateHeading(float CurrentHeading){
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	ec 97       	sbiw	r28, 0x3c	; 60
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	69 87       	std	Y+9, r22	; 0x09
     532:	7a 87       	std	Y+10, r23	; 0x0a
     534:	8b 87       	std	Y+11, r24	; 0x0b
     536:	9c 87       	std	Y+12, r25	; 0x0c

00000538 <.Loc.95>:

    float DeltaTijd = 0;
     538:	19 82       	std	Y+1, r1	; 0x01
     53a:	1a 82       	std	Y+2, r1	; 0x02
     53c:	1b 82       	std	Y+3, r1	; 0x03
     53e:	1c 82       	std	Y+4, r1	; 0x04

00000540 <.Loc.96>:
    float DeltaHeading;

    // Read gyroscopic rotation data
    DS_2 = Read_Gyro_X();
     540:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Read_Gyro_X>
     544:	6d 87       	std	Y+13, r22	; 0x0d
     546:	7e 87       	std	Y+14, r23	; 0x0e
     548:	8f 87       	std	Y+15, r24	; 0x0f
     54a:	98 8b       	std	Y+16, r25	; 0x10

0000054c <.Loc.97>:
     54c:	2d 85       	ldd	r18, Y+13	; 0x0d
     54e:	3e 85       	ldd	r19, Y+14	; 0x0e
     550:	4f 85       	ldd	r20, Y+15	; 0x0f
     552:	58 89       	ldd	r21, Y+16	; 0x10
     554:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <DS_2>
     558:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <DS_2+0x1>
     55c:	40 93 28 02 	sts	0x0228, r20	; 0x800228 <DS_2+0x2>
     560:	50 93 29 02 	sts	0x0229, r21	; 0x800229 <DS_2+0x3>

00000564 <.Loc.98>:
    //Timer uitlezen
    //16us * count is aantal s
    DeltaTijd = Gyro_count;
     564:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <Gyro_count>
     568:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Gyro_count+0x1>
     56c:	9c 01       	movw	r18, r24
     56e:	99 0f       	add	r25, r25
     570:	44 0b       	sbc	r20, r20
     572:	55 0b       	sbc	r21, r21
     574:	29 a3       	std	Y+33, r18	; 0x21
     576:	3a a3       	std	Y+34, r19	; 0x22
     578:	4b a3       	std	Y+35, r20	; 0x23
     57a:	5c a3       	std	Y+36, r21	; 0x24
     57c:	69 a1       	ldd	r22, Y+33	; 0x21
     57e:	7a a1       	ldd	r23, Y+34	; 0x22
     580:	8b a1       	ldd	r24, Y+35	; 0x23
     582:	9c a1       	ldd	r25, Y+36	; 0x24
     584:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__floatsisf>
     588:	6d a3       	std	Y+37, r22	; 0x25
     58a:	7e a3       	std	Y+38, r23	; 0x26
     58c:	8f a3       	std	Y+39, r24	; 0x27
     58e:	98 a7       	std	Y+40, r25	; 0x28
     590:	8d a1       	ldd	r24, Y+37	; 0x25
     592:	9e a1       	ldd	r25, Y+38	; 0x26
     594:	af a1       	ldd	r26, Y+39	; 0x27
     596:	b8 a5       	ldd	r27, Y+40	; 0x28
     598:	89 83       	std	Y+1, r24	; 0x01
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	ab 83       	std	Y+3, r26	; 0x03
     59e:	bc 83       	std	Y+4, r27	; 0x04

000005a0 <.Loc.99>:

    //reset timer
    TCNT0 = 0;
     5a0:	86 e4       	ldi	r24, 0x46	; 70
     5a2:	90 e0       	ldi	r25, 0x00	; 0

000005a4 <.Loc.100>:
     5a4:	dc 01       	movw	r26, r24
     5a6:	1c 92       	st	X, r1

000005a8 <.Loc.101>:
    TIFR0 = 1<<TOV0;
     5a8:	85 e3       	ldi	r24, 0x35	; 53
     5aa:	90 e0       	ldi	r25, 0x00	; 0

000005ac <.Loc.102>:
     5ac:	21 e0       	ldi	r18, 0x01	; 1
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18

000005b2 <.Loc.103>:
    Gyro_count = 0;
     5b2:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <Gyro_count+0x1>
     5b6:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <Gyro_count>

000005ba <.Loc.104>:
    DeltaTijd = DeltaTijd * 0.000016; //DT nu in s
     5ba:	2d eb       	ldi	r18, 0xBD	; 189
     5bc:	37 e3       	ldi	r19, 0x37	; 55
     5be:	46 e8       	ldi	r20, 0x86	; 134
     5c0:	57 e3       	ldi	r21, 0x37	; 55
     5c2:	69 81       	ldd	r22, Y+1	; 0x01
     5c4:	7a 81       	ldd	r23, Y+2	; 0x02
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ca:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
     5ce:	69 a7       	std	Y+41, r22	; 0x29
     5d0:	7a a7       	std	Y+42, r23	; 0x2a
     5d2:	8b a7       	std	Y+43, r24	; 0x2b
     5d4:	9c a7       	std	Y+44, r25	; 0x2c
     5d6:	29 a5       	ldd	r18, Y+41	; 0x29
     5d8:	3a a5       	ldd	r19, Y+42	; 0x2a
     5da:	4b a5       	ldd	r20, Y+43	; 0x2b
     5dc:	5c a5       	ldd	r21, Y+44	; 0x2c
     5de:	29 83       	std	Y+1, r18	; 0x01
     5e0:	3a 83       	std	Y+2, r19	; 0x02
     5e2:	4b 83       	std	Y+3, r20	; 0x03
     5e4:	5c 83       	std	Y+4, r21	; 0x04

000005e6 <.Loc.105>:
    DeltaHeading = ((DS_1 + DS_2)*(DeltaTijd))/2.0;
     5e6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <DS_1>
     5ea:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <DS_1+0x1>
     5ee:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <DS_1+0x2>
     5f2:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <DS_1+0x3>
     5f6:	89 8b       	std	Y+17, r24	; 0x11
     5f8:	9a 8b       	std	Y+18, r25	; 0x12
     5fa:	ab 8b       	std	Y+19, r26	; 0x13
     5fc:	bc 8b       	std	Y+20, r27	; 0x14
     5fe:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DS_2>
     602:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DS_2+0x1>
     606:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <DS_2+0x2>
     60a:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <DS_2+0x3>
     60e:	9c 01       	movw	r18, r24
     610:	ad 01       	movw	r20, r26
     612:	69 89       	ldd	r22, Y+17	; 0x11
     614:	7a 89       	ldd	r23, Y+18	; 0x12
     616:	8b 89       	ldd	r24, Y+19	; 0x13
     618:	9c 89       	ldd	r25, Y+20	; 0x14
     61a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__addsf3>
     61e:	6d a7       	std	Y+45, r22	; 0x2d
     620:	7e a7       	std	Y+46, r23	; 0x2e
     622:	8f a7       	std	Y+47, r24	; 0x2f
     624:	98 ab       	std	Y+48, r25	; 0x30
     626:	2d a5       	ldd	r18, Y+45	; 0x2d
     628:	3e a5       	ldd	r19, Y+46	; 0x2e
     62a:	4f a5       	ldd	r20, Y+47	; 0x2f
     62c:	58 a9       	ldd	r21, Y+48	; 0x30
     62e:	2d 8b       	std	Y+21, r18	; 0x15
     630:	3e 8b       	std	Y+22, r19	; 0x16
     632:	4f 8b       	std	Y+23, r20	; 0x17
     634:	58 8f       	std	Y+24, r21	; 0x18

00000636 <.Loc.106>:
     636:	29 81       	ldd	r18, Y+1	; 0x01
     638:	3a 81       	ldd	r19, Y+2	; 0x02
     63a:	4b 81       	ldd	r20, Y+3	; 0x03
     63c:	5c 81       	ldd	r21, Y+4	; 0x04
     63e:	6d 89       	ldd	r22, Y+21	; 0x15
     640:	7e 89       	ldd	r23, Y+22	; 0x16
     642:	8f 89       	ldd	r24, Y+23	; 0x17
     644:	98 8d       	ldd	r25, Y+24	; 0x18
     646:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
     64a:	69 ab       	std	Y+49, r22	; 0x31
     64c:	7a ab       	std	Y+50, r23	; 0x32
     64e:	8b ab       	std	Y+51, r24	; 0x33
     650:	9c ab       	std	Y+52, r25	; 0x34
     652:	89 a9       	ldd	r24, Y+49	; 0x31
     654:	9a a9       	ldd	r25, Y+50	; 0x32
     656:	ab a9       	ldd	r26, Y+51	; 0x33
     658:	bc a9       	ldd	r27, Y+52	; 0x34
     65a:	89 8f       	std	Y+25, r24	; 0x19
     65c:	9a 8f       	std	Y+26, r25	; 0x1a
     65e:	ab 8f       	std	Y+27, r26	; 0x1b
     660:	bc 8f       	std	Y+28, r27	; 0x1c

00000662 <.Loc.107>:
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e4       	ldi	r21, 0x40	; 64
     66a:	69 8d       	ldd	r22, Y+25	; 0x19
     66c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     66e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     670:	9c 8d       	ldd	r25, Y+28	; 0x1c
     672:	0e 94 4e 12 	call	0x249c	; 0x249c <__divsf3>
     676:	6d ab       	std	Y+53, r22	; 0x35
     678:	7e ab       	std	Y+54, r23	; 0x36
     67a:	8f ab       	std	Y+55, r24	; 0x37
     67c:	98 af       	std	Y+56, r25	; 0x38
     67e:	2d a9       	ldd	r18, Y+53	; 0x35
     680:	3e a9       	ldd	r19, Y+54	; 0x36
     682:	4f a9       	ldd	r20, Y+55	; 0x37
     684:	58 ad       	ldd	r21, Y+56	; 0x38
     686:	2d 83       	std	Y+5, r18	; 0x05
     688:	3e 83       	std	Y+6, r19	; 0x06
     68a:	4f 83       	std	Y+7, r20	; 0x07
     68c:	58 87       	std	Y+8, r21	; 0x08

0000068e <.Loc.108>:
    CurrentHeading = CurrentHeading + DeltaHeading;
     68e:	2d 81       	ldd	r18, Y+5	; 0x05
     690:	3e 81       	ldd	r19, Y+6	; 0x06
     692:	4f 81       	ldd	r20, Y+7	; 0x07
     694:	58 85       	ldd	r21, Y+8	; 0x08
     696:	69 85       	ldd	r22, Y+9	; 0x09
     698:	7a 85       	ldd	r23, Y+10	; 0x0a
     69a:	8b 85       	ldd	r24, Y+11	; 0x0b
     69c:	9c 85       	ldd	r25, Y+12	; 0x0c
     69e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__addsf3>
     6a2:	69 af       	std	Y+57, r22	; 0x39
     6a4:	7a af       	std	Y+58, r23	; 0x3a
     6a6:	8b af       	std	Y+59, r24	; 0x3b
     6a8:	9c af       	std	Y+60, r25	; 0x3c
     6aa:	89 ad       	ldd	r24, Y+57	; 0x39
     6ac:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ae:	ab ad       	ldd	r26, Y+59	; 0x3b
     6b0:	bc ad       	ldd	r27, Y+60	; 0x3c
     6b2:	89 87       	std	Y+9, r24	; 0x09
     6b4:	9a 87       	std	Y+10, r25	; 0x0a
     6b6:	ab 87       	std	Y+11, r26	; 0x0b
     6b8:	bc 87       	std	Y+12, r27	; 0x0c

000006ba <.Loc.109>:
    DS_1 = DS_2;
     6ba:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <DS_2>
     6be:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <DS_2+0x1>
     6c2:	a0 91 28 02 	lds	r26, 0x0228	; 0x800228 <DS_2+0x2>
     6c6:	b0 91 29 02 	lds	r27, 0x0229	; 0x800229 <DS_2+0x3>
     6ca:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <DS_1>
     6ce:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <DS_1+0x1>
     6d2:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <DS_1+0x2>
     6d6:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <DS_1+0x3>

000006da <.Loc.110>:

	return CurrentHeading;
     6da:	89 85       	ldd	r24, Y+9	; 0x09
     6dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6de:	ab 85       	ldd	r26, Y+11	; 0x0b
     6e0:	bc 85       	ldd	r27, Y+12	; 0x0c
     6e2:	8d 8f       	std	Y+29, r24	; 0x1d
     6e4:	9e 8f       	std	Y+30, r25	; 0x1e
     6e6:	af 8f       	std	Y+31, r26	; 0x1f
     6e8:	b8 a3       	std	Y+32, r27	; 0x20

000006ea <.Loc.111>:
}
     6ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6ec:	7e 8d       	ldd	r23, Y+30	; 0x1e
     6ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6f0:	98 a1       	ldd	r25, Y+32	; 0x20
     6f2:	ec 96       	adiw	r28, 0x3c	; 60
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <init_Gyro>:

void init_Gyro(){
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62

0000070c <.Loc.113>:
    I2C_Init();
     70c:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_Init>

00000710 <.Loc.114>:
    MPU6050_Init();
     710:	0e 94 49 02 	call	0x492	; 0x492 <MPU6050_Init>

00000714 <.Loc.115>:
    initTimerGyro();
     714:	0e 94 55 02 	call	0x4aa	; 0x4aa <initTimerGyro>

00000718 <.Loc.116>:
}
     718:	00 00       	nop
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <__vector_20>:
#include "h_bridge_1.h"
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER1_OVF_vect){
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	0b b6       	in	r0, 0x3b	; 59
     72c:	0f 92       	push	r0
     72e:	2f 93       	push	r18
     730:	8f 93       	push	r24
     732:	9f 93       	push	r25
     734:	ef 93       	push	r30
     736:	ff 93       	push	r31
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62

00000740 <.Loc.1>:
	if (OCR1A == 0 && OCR1B == 0){
     740:	88 e8       	ldi	r24, 0x88	; 136
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	91 81       	ldd	r25, Z+1	; 0x01

0000074a <.Loc.2>:
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	d1 f4       	brne	.+52     	; 0x782 <.L2>

0000074e <.Loc.3>:
     74e:	8a e8       	ldi	r24, 0x8A	; 138
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	fc 01       	movw	r30, r24
     754:	80 81       	ld	r24, Z
     756:	91 81       	ldd	r25, Z+1	; 0x01

00000758 <.Loc.4>:
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	99 f4       	brne	.+38     	; 0x782 <.L2>

0000075c <.Loc.5>:
		port_R1 &= ~(1<<pin_R1);
     75c:	88 e0       	ldi	r24, 0x08	; 8
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	fc 01       	movw	r30, r24
     762:	20 81       	ld	r18, Z

00000764 <.Loc.6>:
     764:	88 e0       	ldi	r24, 0x08	; 8
     766:	91 e0       	ldi	r25, 0x01	; 1

00000768 <.Loc.7>:
     768:	2f 7d       	andi	r18, 0xDF	; 223
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18

0000076e <.Loc.8>:
		port_L1 &= ~(1<<pin_L1);
     76e:	88 e0       	ldi	r24, 0x08	; 8
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	fc 01       	movw	r30, r24
     774:	20 81       	ld	r18, Z

00000776 <.Loc.9>:
     776:	88 e0       	ldi	r24, 0x08	; 8
     778:	91 e0       	ldi	r25, 0x01	; 1

0000077a <.Loc.10>:
     77a:	2f 7e       	andi	r18, 0xEF	; 239
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18

00000780 <.Loc.11>:
	}
	else if (OCR1B != 0){
		port_R1 &= ~(1<<pin_R1);
		port_L1 |= (1<<pin_L1);
	}
}
     780:	33 c0       	rjmp	.+102    	; 0x7e8 <.L5>

00000782 <.L2>:
	else if (OCR1A != 0){
     782:	88 e8       	ldi	r24, 0x88	; 136
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	fc 01       	movw	r30, r24
     788:	80 81       	ld	r24, Z
     78a:	91 81       	ldd	r25, Z+1	; 0x01

0000078c <.Loc.13>:
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	99 f0       	breq	.+38     	; 0x7b6 <.L4>

00000790 <.Loc.14>:
		port_R1 |= (1<<pin_R1);
     790:	88 e0       	ldi	r24, 0x08	; 8
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	fc 01       	movw	r30, r24
     796:	20 81       	ld	r18, Z
     798:	88 e0       	ldi	r24, 0x08	; 8
     79a:	91 e0       	ldi	r25, 0x01	; 1

0000079c <.Loc.15>:
     79c:	20 62       	ori	r18, 0x20	; 32
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18

000007a2 <.Loc.16>:
		port_L1 &= ~(1<<pin_L1);
     7a2:	88 e0       	ldi	r24, 0x08	; 8
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 81       	ld	r18, Z

000007aa <.Loc.17>:
     7aa:	88 e0       	ldi	r24, 0x08	; 8
     7ac:	91 e0       	ldi	r25, 0x01	; 1

000007ae <.Loc.18>:
     7ae:	2f 7e       	andi	r18, 0xEF	; 239
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18

000007b4 <.Loc.19>:
}
     7b4:	19 c0       	rjmp	.+50     	; 0x7e8 <.L5>

000007b6 <.L4>:
	else if (OCR1B != 0){
     7b6:	8a e8       	ldi	r24, 0x8A	; 138
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	91 81       	ldd	r25, Z+1	; 0x01

000007c0 <.Loc.21>:
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	91 f0       	breq	.+36     	; 0x7e8 <.L5>

000007c4 <.Loc.22>:
		port_R1 &= ~(1<<pin_R1);
     7c4:	88 e0       	ldi	r24, 0x08	; 8
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 81       	ld	r18, Z

000007cc <.Loc.23>:
     7cc:	88 e0       	ldi	r24, 0x08	; 8
     7ce:	91 e0       	ldi	r25, 0x01	; 1

000007d0 <.Loc.24>:
     7d0:	2f 7d       	andi	r18, 0xDF	; 223
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18

000007d6 <.Loc.25>:
		port_L1 |= (1<<pin_L1);
     7d6:	88 e0       	ldi	r24, 0x08	; 8
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	fc 01       	movw	r30, r24
     7dc:	20 81       	ld	r18, Z
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	91 e0       	ldi	r25, 0x01	; 1

000007e2 <.Loc.26>:
     7e2:	20 61       	ori	r18, 0x10	; 16
     7e4:	fc 01       	movw	r30, r24
     7e6:	20 83       	st	Z, r18

000007e8 <.L5>:
}
     7e8:	00 00       	nop
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	2f 91       	pop	r18
     7f8:	0f 90       	pop	r0
     7fa:	0b be       	out	0x3b, r0	; 59
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	18 95       	reti

00000806 <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
     806:	1f 92       	push	r1
     808:	0f 92       	push	r0
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	0b b6       	in	r0, 0x3b	; 59
     812:	0f 92       	push	r0
     814:	2f 93       	push	r18
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62

00000826 <.Loc.29>:
	if (OCR1A != 65535){
     826:	88 e8       	ldi	r24, 0x88	; 136
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	91 81       	ldd	r25, Z+1	; 0x01

00000830 <.Loc.30>:
     830:	8f 3f       	cpi	r24, 0xFF	; 255
     832:	98 07       	cpc	r25, r24
     834:	49 f0       	breq	.+18     	; 0x848 <.L8>

00000836 <.Loc.31>:
		port_R1 &= ~(1<<pin_R1);
     836:	88 e0       	ldi	r24, 0x08	; 8
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	fc 01       	movw	r30, r24
     83c:	20 81       	ld	r18, Z

0000083e <.Loc.32>:
     83e:	88 e0       	ldi	r24, 0x08	; 8
     840:	91 e0       	ldi	r25, 0x01	; 1

00000842 <.Loc.33>:
     842:	2f 7d       	andi	r18, 0xDF	; 223
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18

00000848 <.L8>:
	}
}
     848:	00 00       	nop
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	ff 91       	pop	r31
     850:	ef 91       	pop	r30
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	2f 91       	pop	r18
     858:	0f 90       	pop	r0
     85a:	0b be       	out	0x3b, r0	; 59
     85c:	0f 90       	pop	r0
     85e:	0f be       	out	0x3f, r0	; 63
     860:	0f 90       	pop	r0
     862:	1f 90       	pop	r1
     864:	18 95       	reti

00000866 <__vector_18>:

ISR(TIMER1_COMPB_vect)
{
     866:	1f 92       	push	r1
     868:	0f 92       	push	r0
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	0f 92       	push	r0
     86e:	11 24       	eor	r1, r1
     870:	0b b6       	in	r0, 0x3b	; 59
     872:	0f 92       	push	r0
     874:	2f 93       	push	r18
     876:	8f 93       	push	r24
     878:	9f 93       	push	r25
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62

00000886 <.Loc.36>:
	if (OCR1B != 65535){
     886:	8a e8       	ldi	r24, 0x8A	; 138
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	fc 01       	movw	r30, r24
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01

00000890 <.Loc.37>:
     890:	8f 3f       	cpi	r24, 0xFF	; 255
     892:	98 07       	cpc	r25, r24
     894:	49 f0       	breq	.+18     	; 0x8a8 <.L11>

00000896 <.Loc.38>:
		port_L1 &= ~(1<<pin_L1);
     896:	88 e0       	ldi	r24, 0x08	; 8
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	fc 01       	movw	r30, r24
     89c:	20 81       	ld	r18, Z

0000089e <.Loc.39>:
     89e:	88 e0       	ldi	r24, 0x08	; 8
     8a0:	91 e0       	ldi	r25, 0x01	; 1

000008a2 <.Loc.40>:
     8a2:	2f 7e       	andi	r18, 0xEF	; 239
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18

000008a8 <.L11>:
	}
}
     8a8:	00 00       	nop
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	ff 91       	pop	r31
     8b0:	ef 91       	pop	r30
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	2f 91       	pop	r18
     8b8:	0f 90       	pop	r0
     8ba:	0b be       	out	0x3b, r0	; 59
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <init_motor_1>:

void init_motor_1(void)
{
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62

000008ce <.Loc.43>:
	// Pin outputs
	ddr_R1 |= (1<<pin_R1);
     8ce:	87 e0       	ldi	r24, 0x07	; 7
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 81       	ld	r18, Z
     8d6:	87 e0       	ldi	r24, 0x07	; 7
     8d8:	91 e0       	ldi	r25, 0x01	; 1

000008da <.Loc.44>:
     8da:	20 62       	ori	r18, 0x20	; 32
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18

000008e0 <.Loc.45>:
	ddr_L1 |= (1<<pin_L1);
     8e0:	87 e0       	ldi	r24, 0x07	; 7
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 81       	ld	r18, Z
     8e8:	87 e0       	ldi	r24, 0x07	; 7
     8ea:	91 e0       	ldi	r25, 0x01	; 1

000008ec <.Loc.46>:
     8ec:	20 61       	ori	r18, 0x10	; 16
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 83       	st	Z, r18

000008f2 <.Loc.47>:

	// zekerheid laag
	port_R1 &= ~(1<<pin_R1);
     8f2:	88 e0       	ldi	r24, 0x08	; 8
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	fc 01       	movw	r30, r24
     8f8:	20 81       	ld	r18, Z

000008fa <.Loc.48>:
     8fa:	88 e0       	ldi	r24, 0x08	; 8
     8fc:	91 e0       	ldi	r25, 0x01	; 1

000008fe <.Loc.49>:
     8fe:	2f 7d       	andi	r18, 0xDF	; 223
     900:	fc 01       	movw	r30, r24
     902:	20 83       	st	Z, r18

00000904 <.Loc.50>:
	port_L1 &= ~(1<<pin_L1);
     904:	88 e0       	ldi	r24, 0x08	; 8
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	fc 01       	movw	r30, r24
     90a:	20 81       	ld	r18, Z

0000090c <.Loc.51>:
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	91 e0       	ldi	r25, 0x01	; 1

00000910 <.Loc.52>:
     910:	2f 7e       	andi	r18, 0xEF	; 239
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18

00000916 <.Loc.53>:

	// prescale 64
	TCCR1A = 0;
     916:	80 e8       	ldi	r24, 0x80	; 128
     918:	90 e0       	ldi	r25, 0x00	; 0

0000091a <.Loc.54>:
     91a:	fc 01       	movw	r30, r24
     91c:	10 82       	st	Z, r1

0000091e <.Loc.55>:
	TCCR1B = (0<<CS12) | (0<<CS11) | (1<<CS10);
     91e:	81 e8       	ldi	r24, 0x81	; 129
     920:	90 e0       	ldi	r25, 0x00	; 0

00000922 <.Loc.56>:
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18

00000928 <.Loc.57>:

	// standaard 0
	OCR1A = 0;
     928:	88 e8       	ldi	r24, 0x88	; 136
     92a:	90 e0       	ldi	r25, 0x00	; 0

0000092c <.Loc.58>:
     92c:	fc 01       	movw	r30, r24
     92e:	11 82       	std	Z+1, r1	; 0x01
     930:	10 82       	st	Z, r1

00000932 <.Loc.59>:
	OCR1B = 0;
     932:	8a e8       	ldi	r24, 0x8A	; 138
     934:	90 e0       	ldi	r25, 0x00	; 0

00000936 <.Loc.60>:
     936:	fc 01       	movw	r30, r24
     938:	11 82       	std	Z+1, r1	; 0x01
     93a:	10 82       	st	Z, r1

0000093c <.Loc.61>:
	TIMSK1 = (1<<OCIE1B) | (1<<OCIE1A) | (1<<TOIE1);
     93c:	8f e6       	ldi	r24, 0x6F	; 111
     93e:	90 e0       	ldi	r25, 0x00	; 0

00000940 <.Loc.62>:
     940:	27 e0       	ldi	r18, 0x07	; 7
     942:	fc 01       	movw	r30, r24
     944:	20 83       	st	Z, r18

00000946 <.Loc.63>:
	Motor_1_set_power(0);
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

0000094c <.Loc.64>:
}
     94c:	00 00       	nop
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <Motor_1_set_power>:

void Motor_1_set_power(signed char power)
{
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	00 d0       	rcall	.+0      	; 0x95e <L0^A>

0000095e <L0^A>:
     95e:	00 d0       	rcall	.+0      	; 0x960 <L0^A>

00000960 <L0^A>:
     960:	00 d0       	rcall	.+0      	; 0x962 <L0^A>

00000962 <L0^A>:
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	89 83       	std	Y+1, r24	; 0x01

00000968 <.Loc.66>:
	if (power >= -100 && power <= 100){
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	8c 39       	cpi	r24, 0x9C	; 156
     96c:	0c f4       	brge	.+2      	; 0x970 <.Loc.67>

0000096e <L0^A>:
     96e:	61 c0       	rjmp	.+194    	; 0xa32 <.L16>

00000970 <.Loc.67>:
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	84 36       	cpi	r24, 0x64	; 100
     974:	11 f0       	breq	.+4      	; 0x97a <.Loc.68>

00000976 <L0^A>:
     976:	0c f0       	brlt	.+2      	; 0x97a <.Loc.68>

00000978 <L0^A>:
     978:	5c c0       	rjmp	.+184    	; 0xa32 <.L16>

0000097a <.Loc.68>:
		if (power >= 0){
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	88 23       	and	r24, r24
     97e:	6c f1       	brlt	.+90     	; 0x9da <.L15>

00000980 <.Loc.69>:
			OCR1B = 0;
     980:	8a e8       	ldi	r24, 0x8A	; 138
     982:	90 e0       	ldi	r25, 0x00	; 0

00000984 <.Loc.70>:
     984:	fc 01       	movw	r30, r24
     986:	11 82       	std	Z+1, r1	; 0x01
     988:	10 82       	st	Z, r1

0000098a <.Loc.71>:
			OCR1A = (65535*power)/100;
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	48 2f       	mov	r20, r24
     98e:	88 0f       	add	r24, r24
     990:	55 0b       	sbc	r21, r21
     992:	66 0b       	sbc	r22, r22
     994:	77 0b       	sbc	r23, r23
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	dc 01       	movw	r26, r24
     99c:	9a 01       	movw	r18, r20
     99e:	ab 01       	movw	r20, r22
     9a0:	0e 94 9b 11 	call	0x2336	; 0x2336 <__muluhisi3>
     9a4:	6a 83       	std	Y+2, r22	; 0x02
     9a6:	7b 83       	std	Y+3, r23	; 0x03
     9a8:	8c 83       	std	Y+4, r24	; 0x04
     9aa:	9d 83       	std	Y+5, r25	; 0x05

000009ac <.Loc.72>:
     9ac:	04 e6       	ldi	r16, 0x64	; 100
     9ae:	10 e0       	ldi	r17, 0x00	; 0
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	6a 81       	ldd	r22, Y+2	; 0x02
     9b6:	7b 81       	ldd	r23, Y+3	; 0x03
     9b8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ba:	9d 81       	ldd	r25, Y+5	; 0x05
     9bc:	a9 01       	movw	r20, r18
     9be:	98 01       	movw	r18, r16
     9c0:	0e 94 6d 11 	call	0x22da	; 0x22da <__divmodsi4>
     9c4:	da 01       	movw	r26, r20
     9c6:	c9 01       	movw	r24, r18
     9c8:	ac 01       	movw	r20, r24
     9ca:	bd 01       	movw	r22, r26

000009cc <.Loc.73>:
     9cc:	88 e8       	ldi	r24, 0x88	; 136
     9ce:	90 e0       	ldi	r25, 0x00	; 0

000009d0 <.Loc.74>:
     9d0:	9a 01       	movw	r18, r20
     9d2:	fc 01       	movw	r30, r24
     9d4:	31 83       	std	Z+1, r19	; 0x01
     9d6:	20 83       	st	Z, r18

000009d8 <.Loc.75>:
		else {
			OCR1A = 0;
			OCR1B = (65535*power)/-100;
		}
	}
}
     9d8:	2c c0       	rjmp	.+88     	; 0xa32 <.L16>

000009da <.L15>:
			OCR1A = 0;
     9da:	88 e8       	ldi	r24, 0x88	; 136
     9dc:	90 e0       	ldi	r25, 0x00	; 0

000009de <.Loc.77>:
     9de:	fc 01       	movw	r30, r24
     9e0:	11 82       	std	Z+1, r1	; 0x01
     9e2:	10 82       	st	Z, r1

000009e4 <.Loc.78>:
			OCR1B = (65535*power)/-100;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	48 2f       	mov	r20, r24
     9e8:	88 0f       	add	r24, r24
     9ea:	55 0b       	sbc	r21, r21
     9ec:	66 0b       	sbc	r22, r22
     9ee:	77 0b       	sbc	r23, r23
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	dc 01       	movw	r26, r24
     9f6:	9a 01       	movw	r18, r20
     9f8:	ab 01       	movw	r20, r22
     9fa:	0e 94 9b 11 	call	0x2336	; 0x2336 <__muluhisi3>
     9fe:	6e 83       	std	Y+6, r22	; 0x06
     a00:	7f 83       	std	Y+7, r23	; 0x07
     a02:	88 87       	std	Y+8, r24	; 0x08
     a04:	99 87       	std	Y+9, r25	; 0x09

00000a06 <.Loc.79>:
     a06:	0c e9       	ldi	r16, 0x9C	; 156
     a08:	1f ef       	ldi	r17, 0xFF	; 255
     a0a:	2f ef       	ldi	r18, 0xFF	; 255
     a0c:	3f ef       	ldi	r19, 0xFF	; 255
     a0e:	6e 81       	ldd	r22, Y+6	; 0x06
     a10:	7f 81       	ldd	r23, Y+7	; 0x07
     a12:	88 85       	ldd	r24, Y+8	; 0x08
     a14:	99 85       	ldd	r25, Y+9	; 0x09
     a16:	a9 01       	movw	r20, r18
     a18:	98 01       	movw	r18, r16
     a1a:	0e 94 6d 11 	call	0x22da	; 0x22da <__divmodsi4>
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	ac 01       	movw	r20, r24
     a24:	bd 01       	movw	r22, r26

00000a26 <.Loc.80>:
     a26:	8a e8       	ldi	r24, 0x8A	; 138
     a28:	90 e0       	ldi	r25, 0x00	; 0

00000a2a <.Loc.81>:
     a2a:	9a 01       	movw	r18, r20
     a2c:	fc 01       	movw	r30, r24
     a2e:	31 83       	std	Z+1, r19	; 0x01
     a30:	20 83       	st	Z, r18

00000a32 <.L16>:
}
     a32:	00 00       	nop
     a34:	29 96       	adiw	r28, 0x09	; 9
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <__vector_35>:
#include "h_bridge_2.h"
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER3_OVF_vect){
     a4a:	1f 92       	push	r1
     a4c:	0f 92       	push	r0
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	0f 92       	push	r0
     a52:	11 24       	eor	r1, r1
     a54:	0b b6       	in	r0, 0x3b	; 59
     a56:	0f 92       	push	r0
     a58:	2f 93       	push	r18
     a5a:	8f 93       	push	r24
     a5c:	9f 93       	push	r25
     a5e:	ef 93       	push	r30
     a60:	ff 93       	push	r31
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62

00000a6a <.Loc.1>:
	if (OCR3A == 0 && OCR3B == 0){
     a6a:	88 e9       	ldi	r24, 0x98	; 152
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	fc 01       	movw	r30, r24
     a70:	80 81       	ld	r24, Z
     a72:	91 81       	ldd	r25, Z+1	; 0x01

00000a74 <.Loc.2>:
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	d1 f4       	brne	.+52     	; 0xaac <.L2>

00000a78 <.Loc.3>:
     a78:	8a e9       	ldi	r24, 0x9A	; 154
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	fc 01       	movw	r30, r24
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01

00000a82 <.Loc.4>:
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	99 f4       	brne	.+38     	; 0xaac <.L2>

00000a86 <.Loc.5>:
		port_R2 &= ~(1<<pin_R2);
     a86:	88 e0       	ldi	r24, 0x08	; 8
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 81       	ld	r18, Z

00000a8e <.Loc.6>:
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	91 e0       	ldi	r25, 0x01	; 1

00000a92 <.Loc.7>:
     a92:	2f 77       	andi	r18, 0x7F	; 127
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18

00000a98 <.Loc.8>:
		port_L2 &= ~(1<<pin_L2);
     a98:	88 e0       	ldi	r24, 0x08	; 8
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 81       	ld	r18, Z

00000aa0 <.Loc.9>:
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	91 e0       	ldi	r25, 0x01	; 1

00000aa4 <.Loc.10>:
     aa4:	2f 7b       	andi	r18, 0xBF	; 191
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18

00000aaa <.Loc.11>:
	}
	else if (OCR3B != 0){
		port_R2 &= ~(1<<pin_R2);
		port_L2 |= (1<<pin_L2);
	}
}
     aaa:	33 c0       	rjmp	.+102    	; 0xb12 <.L5>

00000aac <.L2>:
	else if (OCR3A != 0){
     aac:	88 e9       	ldi	r24, 0x98	; 152
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	fc 01       	movw	r30, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01

00000ab6 <.Loc.13>:
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	99 f0       	breq	.+38     	; 0xae0 <.L4>

00000aba <.Loc.14>:
		port_R2 |= (1<<pin_R2);
     aba:	88 e0       	ldi	r24, 0x08	; 8
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	fc 01       	movw	r30, r24
     ac0:	20 81       	ld	r18, Z
     ac2:	88 e0       	ldi	r24, 0x08	; 8
     ac4:	91 e0       	ldi	r25, 0x01	; 1

00000ac6 <.Loc.15>:
     ac6:	20 68       	ori	r18, 0x80	; 128
     ac8:	fc 01       	movw	r30, r24
     aca:	20 83       	st	Z, r18

00000acc <.Loc.16>:
		port_L2 &= ~(1<<pin_L2);
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 81       	ld	r18, Z

00000ad4 <.Loc.17>:
     ad4:	88 e0       	ldi	r24, 0x08	; 8
     ad6:	91 e0       	ldi	r25, 0x01	; 1

00000ad8 <.Loc.18>:
     ad8:	2f 7b       	andi	r18, 0xBF	; 191
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18

00000ade <.Loc.19>:
}
     ade:	19 c0       	rjmp	.+50     	; 0xb12 <.L5>

00000ae0 <.L4>:
	else if (OCR3B != 0){
     ae0:	8a e9       	ldi	r24, 0x9A	; 154
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	fc 01       	movw	r30, r24
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01

00000aea <.Loc.21>:
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	91 f0       	breq	.+36     	; 0xb12 <.L5>

00000aee <.Loc.22>:
		port_R2 &= ~(1<<pin_R2);
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	fc 01       	movw	r30, r24
     af4:	20 81       	ld	r18, Z

00000af6 <.Loc.23>:
     af6:	88 e0       	ldi	r24, 0x08	; 8
     af8:	91 e0       	ldi	r25, 0x01	; 1

00000afa <.Loc.24>:
     afa:	2f 77       	andi	r18, 0x7F	; 127
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18

00000b00 <.Loc.25>:
		port_L2 |= (1<<pin_L2);
     b00:	88 e0       	ldi	r24, 0x08	; 8
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	fc 01       	movw	r30, r24
     b06:	20 81       	ld	r18, Z
     b08:	88 e0       	ldi	r24, 0x08	; 8
     b0a:	91 e0       	ldi	r25, 0x01	; 1

00000b0c <.Loc.26>:
     b0c:	20 64       	ori	r18, 0x40	; 64
     b0e:	fc 01       	movw	r30, r24
     b10:	20 83       	st	Z, r18

00000b12 <.L5>:
}
     b12:	00 00       	nop
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0b be       	out	0x3b, r0	; 59
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     b30:	1f 92       	push	r1
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	0f 92       	push	r0
     b38:	11 24       	eor	r1, r1
     b3a:	0b b6       	in	r0, 0x3b	; 59
     b3c:	0f 92       	push	r0
     b3e:	2f 93       	push	r18
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	ef 93       	push	r30
     b46:	ff 93       	push	r31
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

00000b50 <.Loc.29>:
	if (OCR3A != 65535){
     b50:	88 e9       	ldi	r24, 0x98	; 152
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	fc 01       	movw	r30, r24
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01

00000b5a <.Loc.30>:
     b5a:	8f 3f       	cpi	r24, 0xFF	; 255
     b5c:	98 07       	cpc	r25, r24
     b5e:	49 f0       	breq	.+18     	; 0xb72 <.L8>

00000b60 <.Loc.31>:
		port_R2 &= ~(1<<pin_R2);
     b60:	88 e0       	ldi	r24, 0x08	; 8
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	fc 01       	movw	r30, r24
     b66:	20 81       	ld	r18, Z

00000b68 <.Loc.32>:
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	91 e0       	ldi	r25, 0x01	; 1

00000b6c <.Loc.33>:
     b6c:	2f 77       	andi	r18, 0x7F	; 127
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18

00000b72 <.L8>:
	}
}
     b72:	00 00       	nop
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	ff 91       	pop	r31
     b7a:	ef 91       	pop	r30
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	2f 91       	pop	r18
     b82:	0f 90       	pop	r0
     b84:	0b be       	out	0x3b, r0	; 59
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0
     b8c:	1f 90       	pop	r1
     b8e:	18 95       	reti

00000b90 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	11 24       	eor	r1, r1
     b9a:	0b b6       	in	r0, 0x3b	; 59
     b9c:	0f 92       	push	r0
     b9e:	2f 93       	push	r18
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62

00000bb0 <.Loc.36>:
	if (OCR3B != 65535){
     bb0:	8a e9       	ldi	r24, 0x9A	; 154
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	fc 01       	movw	r30, r24
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01

00000bba <.Loc.37>:
     bba:	8f 3f       	cpi	r24, 0xFF	; 255
     bbc:	98 07       	cpc	r25, r24
     bbe:	49 f0       	breq	.+18     	; 0xbd2 <.L11>

00000bc0 <.Loc.38>:
		port_L2 &= ~(1<<pin_L2);
     bc0:	88 e0       	ldi	r24, 0x08	; 8
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 81       	ld	r18, Z

00000bc8 <.Loc.39>:
     bc8:	88 e0       	ldi	r24, 0x08	; 8
     bca:	91 e0       	ldi	r25, 0x01	; 1

00000bcc <.Loc.40>:
     bcc:	2f 7b       	andi	r18, 0xBF	; 191
     bce:	fc 01       	movw	r30, r24
     bd0:	20 83       	st	Z, r18

00000bd2 <.L11>:
	}
}
     bd2:	00 00       	nop
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	2f 91       	pop	r18
     be2:	0f 90       	pop	r0
     be4:	0b be       	out	0x3b, r0	; 59
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <init_motor_2>:

void init_motor_2(void)
{
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62

00000bf8 <.Loc.43>:
	// Pin outputs
	ddr_R2 |= (1<<pin_R2);
     bf8:	87 e0       	ldi	r24, 0x07	; 7
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 81       	ld	r18, Z
     c00:	87 e0       	ldi	r24, 0x07	; 7
     c02:	91 e0       	ldi	r25, 0x01	; 1

00000c04 <.Loc.44>:
     c04:	20 68       	ori	r18, 0x80	; 128
     c06:	fc 01       	movw	r30, r24
     c08:	20 83       	st	Z, r18

00000c0a <.Loc.45>:
	ddr_L2 |= (1<<pin_L2);
     c0a:	87 e0       	ldi	r24, 0x07	; 7
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	fc 01       	movw	r30, r24
     c10:	20 81       	ld	r18, Z
     c12:	87 e0       	ldi	r24, 0x07	; 7
     c14:	91 e0       	ldi	r25, 0x01	; 1

00000c16 <.Loc.46>:
     c16:	20 64       	ori	r18, 0x40	; 64
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18

00000c1c <.Loc.47>:

	// zekerheid laag
	port_R2 &= ~(1<<pin_R2);
     c1c:	88 e0       	ldi	r24, 0x08	; 8
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	fc 01       	movw	r30, r24
     c22:	20 81       	ld	r18, Z

00000c24 <.Loc.48>:
     c24:	88 e0       	ldi	r24, 0x08	; 8
     c26:	91 e0       	ldi	r25, 0x01	; 1

00000c28 <.Loc.49>:
     c28:	2f 77       	andi	r18, 0x7F	; 127
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 83       	st	Z, r18

00000c2e <.Loc.50>:
	port_L2 &= ~(1<<pin_L2);
     c2e:	88 e0       	ldi	r24, 0x08	; 8
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	fc 01       	movw	r30, r24
     c34:	20 81       	ld	r18, Z

00000c36 <.Loc.51>:
     c36:	88 e0       	ldi	r24, 0x08	; 8
     c38:	91 e0       	ldi	r25, 0x01	; 1

00000c3a <.Loc.52>:
     c3a:	2f 7b       	andi	r18, 0xBF	; 191
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18

00000c40 <.Loc.53>:

	// prescale 64
	TCCR3A = 0;
     c40:	80 e9       	ldi	r24, 0x90	; 144
     c42:	90 e0       	ldi	r25, 0x00	; 0

00000c44 <.Loc.54>:
     c44:	fc 01       	movw	r30, r24
     c46:	10 82       	st	Z, r1

00000c48 <.Loc.55>:
	TCCR3B = (0<<CS32) | (0<<CS31) | (1<<CS30);
     c48:	81 e9       	ldi	r24, 0x91	; 145
     c4a:	90 e0       	ldi	r25, 0x00	; 0

00000c4c <.Loc.56>:
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18

00000c52 <.Loc.57>:

	// standaard 0
	OCR3A = 0;
     c52:	88 e9       	ldi	r24, 0x98	; 152
     c54:	90 e0       	ldi	r25, 0x00	; 0

00000c56 <.Loc.58>:
     c56:	fc 01       	movw	r30, r24
     c58:	11 82       	std	Z+1, r1	; 0x01
     c5a:	10 82       	st	Z, r1

00000c5c <.Loc.59>:
	OCR3B = 0;
     c5c:	8a e9       	ldi	r24, 0x9A	; 154
     c5e:	90 e0       	ldi	r25, 0x00	; 0

00000c60 <.Loc.60>:
     c60:	fc 01       	movw	r30, r24
     c62:	11 82       	std	Z+1, r1	; 0x01
     c64:	10 82       	st	Z, r1

00000c66 <.Loc.61>:
	TIMSK3 = (1<<OCIE3B) | (1<<OCIE3A) | (1<<TOIE3);
     c66:	81 e7       	ldi	r24, 0x71	; 113
     c68:	90 e0       	ldi	r25, 0x00	; 0

00000c6a <.Loc.62>:
     c6a:	27 e0       	ldi	r18, 0x07	; 7
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18

00000c70 <.Loc.63>:
	Motor_2_set_power(0);
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000c76 <.Loc.64>:
}
     c76:	00 00       	nop
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <Motor_2_set_power>:

void Motor_2_set_power(signed char power)
{
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	00 d0       	rcall	.+0      	; 0xc88 <L0^A>

00000c88 <L0^A>:
     c88:	00 d0       	rcall	.+0      	; 0xc8a <L0^A>

00000c8a <L0^A>:
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <L0^A>

00000c8c <L0^A>:
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	89 83       	std	Y+1, r24	; 0x01

00000c92 <.Loc.66>:
	if (power >= -100 && power <= 100){
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	8c 39       	cpi	r24, 0x9C	; 156
     c96:	0c f4       	brge	.+2      	; 0xc9a <.Loc.67>

00000c98 <L0^A>:
     c98:	61 c0       	rjmp	.+194    	; 0xd5c <.L16>

00000c9a <.Loc.67>:
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	84 36       	cpi	r24, 0x64	; 100
     c9e:	11 f0       	breq	.+4      	; 0xca4 <.Loc.68>

00000ca0 <L0^A>:
     ca0:	0c f0       	brlt	.+2      	; 0xca4 <.Loc.68>

00000ca2 <L0^A>:
     ca2:	5c c0       	rjmp	.+184    	; 0xd5c <.L16>

00000ca4 <.Loc.68>:
		if (power >= 0){
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	88 23       	and	r24, r24
     ca8:	6c f1       	brlt	.+90     	; 0xd04 <.L15>

00000caa <.Loc.69>:
			OCR3B = 0;
     caa:	8a e9       	ldi	r24, 0x9A	; 154
     cac:	90 e0       	ldi	r25, 0x00	; 0

00000cae <.Loc.70>:
     cae:	fc 01       	movw	r30, r24
     cb0:	11 82       	std	Z+1, r1	; 0x01
     cb2:	10 82       	st	Z, r1

00000cb4 <.Loc.71>:
			OCR3A = (65535*power)/100;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	48 2f       	mov	r20, r24
     cb8:	88 0f       	add	r24, r24
     cba:	55 0b       	sbc	r21, r21
     cbc:	66 0b       	sbc	r22, r22
     cbe:	77 0b       	sbc	r23, r23
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
     cc4:	dc 01       	movw	r26, r24
     cc6:	9a 01       	movw	r18, r20
     cc8:	ab 01       	movw	r20, r22
     cca:	0e 94 9b 11 	call	0x2336	; 0x2336 <__muluhisi3>
     cce:	6a 83       	std	Y+2, r22	; 0x02
     cd0:	7b 83       	std	Y+3, r23	; 0x03
     cd2:	8c 83       	std	Y+4, r24	; 0x04
     cd4:	9d 83       	std	Y+5, r25	; 0x05

00000cd6 <.Loc.72>:
     cd6:	04 e6       	ldi	r16, 0x64	; 100
     cd8:	10 e0       	ldi	r17, 0x00	; 0
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	6a 81       	ldd	r22, Y+2	; 0x02
     ce0:	7b 81       	ldd	r23, Y+3	; 0x03
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	a9 01       	movw	r20, r18
     ce8:	98 01       	movw	r18, r16
     cea:	0e 94 6d 11 	call	0x22da	; 0x22da <__divmodsi4>
     cee:	da 01       	movw	r26, r20
     cf0:	c9 01       	movw	r24, r18
     cf2:	ac 01       	movw	r20, r24
     cf4:	bd 01       	movw	r22, r26

00000cf6 <.Loc.73>:
     cf6:	88 e9       	ldi	r24, 0x98	; 152
     cf8:	90 e0       	ldi	r25, 0x00	; 0

00000cfa <.Loc.74>:
     cfa:	9a 01       	movw	r18, r20
     cfc:	fc 01       	movw	r30, r24
     cfe:	31 83       	std	Z+1, r19	; 0x01
     d00:	20 83       	st	Z, r18

00000d02 <.Loc.75>:
		else {
			OCR3A = 0;
			OCR3B = (65535*power)/-100;
		}
	}
}
     d02:	2c c0       	rjmp	.+88     	; 0xd5c <.L16>

00000d04 <.L15>:
			OCR3A = 0;
     d04:	88 e9       	ldi	r24, 0x98	; 152
     d06:	90 e0       	ldi	r25, 0x00	; 0

00000d08 <.Loc.77>:
     d08:	fc 01       	movw	r30, r24
     d0a:	11 82       	std	Z+1, r1	; 0x01
     d0c:	10 82       	st	Z, r1

00000d0e <.Loc.78>:
			OCR3B = (65535*power)/-100;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	48 2f       	mov	r20, r24
     d12:	88 0f       	add	r24, r24
     d14:	55 0b       	sbc	r21, r21
     d16:	66 0b       	sbc	r22, r22
     d18:	77 0b       	sbc	r23, r23
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	9f ef       	ldi	r25, 0xFF	; 255
     d1e:	dc 01       	movw	r26, r24
     d20:	9a 01       	movw	r18, r20
     d22:	ab 01       	movw	r20, r22
     d24:	0e 94 9b 11 	call	0x2336	; 0x2336 <__muluhisi3>
     d28:	6e 83       	std	Y+6, r22	; 0x06
     d2a:	7f 83       	std	Y+7, r23	; 0x07
     d2c:	88 87       	std	Y+8, r24	; 0x08
     d2e:	99 87       	std	Y+9, r25	; 0x09

00000d30 <.Loc.79>:
     d30:	0c e9       	ldi	r16, 0x9C	; 156
     d32:	1f ef       	ldi	r17, 0xFF	; 255
     d34:	2f ef       	ldi	r18, 0xFF	; 255
     d36:	3f ef       	ldi	r19, 0xFF	; 255
     d38:	6e 81       	ldd	r22, Y+6	; 0x06
     d3a:	7f 81       	ldd	r23, Y+7	; 0x07
     d3c:	88 85       	ldd	r24, Y+8	; 0x08
     d3e:	99 85       	ldd	r25, Y+9	; 0x09
     d40:	a9 01       	movw	r20, r18
     d42:	98 01       	movw	r18, r16
     d44:	0e 94 6d 11 	call	0x22da	; 0x22da <__divmodsi4>
     d48:	da 01       	movw	r26, r20
     d4a:	c9 01       	movw	r24, r18
     d4c:	ac 01       	movw	r20, r24
     d4e:	bd 01       	movw	r22, r26

00000d50 <.Loc.80>:
     d50:	8a e9       	ldi	r24, 0x9A	; 154
     d52:	90 e0       	ldi	r25, 0x00	; 0

00000d54 <.Loc.81>:
     d54:	9a 01       	movw	r18, r20
     d56:	fc 01       	movw	r30, r24
     d58:	31 83       	std	Z+1, r19	; 0x01
     d5a:	20 83       	st	Z, r18

00000d5c <.L16>:
}
     d5c:	00 00       	nop
     d5e:	29 96       	adiw	r28, 0x09	; 9
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	08 95       	ret

00000d74 <main>:
*/



int main(void)
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	e4 97       	sbiw	r28, 0x34	; 52
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61

00000d88 <.Loc.1>:
    init();
     d88:	0e 94 39 08 	call	0x1072	; 0x1072 <init>

00000d8c <.Loc.2>:
    init_display_meneer();
     d8c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <init_display_meneer>

00000d90 <.Loc.3>:
    int VolgModus = 0;
     d90:	1e 82       	std	Y+6, r1	; 0x06
     d92:	1d 82       	std	Y+5, r1	; 0x05

00000d94 <.Loc.4>:
    int KolommenModus = 1;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	98 87       	std	Y+8, r25	; 0x08
     d9a:	8f 83       	std	Y+7, r24	; 0x07

00000d9c <.Loc.5>:

    int VolgTarget = 100;
     d9c:	84 e6       	ldi	r24, 0x64	; 100
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9a 87       	std	Y+10, r25	; 0x0a
     da2:	89 87       	std	Y+9, r24	; 0x09

00000da4 <.Loc.6>:
    float CurrentHeading = 360.0;
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	a4 eb       	ldi	r26, 0xB4	; 180
     daa:	b3 e4       	ldi	r27, 0x43	; 67
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	ab 83       	std	Y+3, r26	; 0x03
     db2:	bc 83       	std	Y+4, r27	; 0x04

00000db4 <.Loc.7>:
    int TargetHeading = 360;
     db4:	88 e6       	ldi	r24, 0x68	; 104
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	9c 87       	std	Y+12, r25	; 0x0c
     dba:	8b 87       	std	Y+11, r24	; 0x0b

00000dbc <.Loc.8>:
    int Afstand = 0;
     dbc:	1e 86       	std	Y+14, r1	; 0x0e
     dbe:	1d 86       	std	Y+13, r1	; 0x0d

00000dc0 <.Loc.9>:
    int Difference =0;
     dc0:	18 8a       	std	Y+16, r1	; 0x10
     dc2:	1f 86       	std	Y+15, r1	; 0x0f

00000dc4 <.Loc.10>:

    int CurrentKolom = 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	9a 8b       	std	Y+18, r25	; 0x12
     dca:	89 8b       	std	Y+17, r24	; 0x11

00000dcc <.Loc.11>:

    int printgetal;
    DDRB |= ((1<<PB7) | (1<<PB6));
     dcc:	84 e2       	ldi	r24, 0x24	; 36
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	dc 01       	movw	r26, r24
     dd2:	2c 91       	ld	r18, X
     dd4:	84 e2       	ldi	r24, 0x24	; 36
     dd6:	90 e0       	ldi	r25, 0x00	; 0

00000dd8 <.Loc.12>:
     dd8:	20 6c       	ori	r18, 0xC0	; 192
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18

00000dde <.Loc.13>:
    PORTB |= (1<<PB7);
     dde:	85 e2       	ldi	r24, 0x25	; 37
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	dc 01       	movw	r26, r24
     de4:	2c 91       	ld	r18, X
     de6:	85 e2       	ldi	r24, 0x25	; 37
     de8:	90 e0       	ldi	r25, 0x00	; 0

00000dea <.Loc.14>:
     dea:	20 68       	ori	r18, 0x80	; 128
     dec:	fc 01       	movw	r30, r24
     dee:	20 83       	st	Z, r18

00000df0 <.Loc.15>:
    PORTB &= (1<<PB6);
     df0:	85 e2       	ldi	r24, 0x25	; 37
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	dc 01       	movw	r26, r24
     df6:	2c 91       	ld	r18, X

00000df8 <.Loc.16>:
     df8:	85 e2       	ldi	r24, 0x25	; 37
     dfa:	90 e0       	ldi	r25, 0x00	; 0

00000dfc <.Loc.17>:
     dfc:	20 74       	andi	r18, 0x40	; 64
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18

00000e02 <.Loc.18>:
                LightSwap();
                VolgModus = 0;
                KolommenModus = 1;
            }
        }*/
        while(VolgModus == 1){
     e02:	83 c0       	rjmp	.+262    	; 0xf0a <.L2>

00000e04 <.L10>:
            /*if(ModeSwitchReset()){
                VolgModus = 0;
                KolommenModus = 0;
            }*/

            Afstand = GetDistanceFront();
     e04:	0e 94 83 0b 	call	0x1706	; 0x1706 <GetDistanceFront>
     e08:	9e 87       	std	Y+14, r25	; 0x0e
     e0a:	8d 87       	std	Y+13, r24	; 0x0d

00000e0c <.Loc.20>:
            Difference = Afstand - VolgTarget;
     e0c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e0e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e10:	89 85       	ldd	r24, Y+9	; 0x09
     e12:	9a 85       	ldd	r25, Y+10	; 0x0a
     e14:	a9 01       	movw	r20, r18
     e16:	48 1b       	sub	r20, r24
     e18:	59 0b       	sbc	r21, r25
     e1a:	ca 01       	movw	r24, r20
     e1c:	98 8b       	std	Y+16, r25	; 0x10
     e1e:	8f 87       	std	Y+15, r24	; 0x0f

00000e20 <.Loc.21>:
            display_getal(Afstand);
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	0e 94 2b 0a 	call	0x1456	; 0x1456 <display_getal>

00000e28 <.Loc.22>:


            if (Difference > 200){
     e28:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2a:	98 89       	ldd	r25, Y+16	; 0x10
     e2c:	88 3c       	cpi	r24, 0xC8	; 200
     e2e:	91 05       	cpc	r25, r1
     e30:	39 f0       	breq	.+14     	; 0xe40 <.L3>
     e32:	34 f0       	brlt	.+12     	; 0xe40 <.L3>

00000e34 <.Loc.23>:
                Motor_1_set_power(35);
     e34:	83 e2       	ldi	r24, 0x23	; 35
     e36:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000e3a <.Loc.24>:
                Motor_2_set_power(35);
     e3a:	83 e2       	ldi	r24, 0x23	; 35
     e3c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000e40 <.L3>:
            }
            if (Difference > 120 && Difference < 200){
     e40:	8f 85       	ldd	r24, Y+15	; 0x0f
     e42:	98 89       	ldd	r25, Y+16	; 0x10
     e44:	88 37       	cpi	r24, 0x78	; 120
     e46:	91 05       	cpc	r25, r1
     e48:	69 f0       	breq	.+26     	; 0xe64 <.L4>
     e4a:	64 f0       	brlt	.+24     	; 0xe64 <.L4>

00000e4c <.Loc.26>:
     e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4e:	98 89       	ldd	r25, Y+16	; 0x10
     e50:	87 3c       	cpi	r24, 0xC7	; 199
     e52:	91 05       	cpc	r25, r1
     e54:	09 f0       	breq	.+2      	; 0xe58 <.Loc.27>

00000e56 <L0^A>:
     e56:	34 f4       	brge	.+12     	; 0xe64 <.L4>

00000e58 <.Loc.27>:
                Motor_1_set_power(22);
     e58:	86 e1       	ldi	r24, 0x16	; 22
     e5a:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000e5e <.Loc.28>:
                Motor_2_set_power(22);
     e5e:	86 e1       	ldi	r24, 0x16	; 22
     e60:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000e64 <.L4>:
            }
            if (Difference > 60 && Difference < 120){
     e64:	8f 85       	ldd	r24, Y+15	; 0x0f
     e66:	98 89       	ldd	r25, Y+16	; 0x10
     e68:	8c 33       	cpi	r24, 0x3C	; 60
     e6a:	91 05       	cpc	r25, r1
     e6c:	69 f0       	breq	.+26     	; 0xe88 <.L5>
     e6e:	64 f0       	brlt	.+24     	; 0xe88 <.L5>

00000e70 <.Loc.30>:
     e70:	8f 85       	ldd	r24, Y+15	; 0x0f
     e72:	98 89       	ldd	r25, Y+16	; 0x10
     e74:	87 37       	cpi	r24, 0x77	; 119
     e76:	91 05       	cpc	r25, r1
     e78:	09 f0       	breq	.+2      	; 0xe7c <.Loc.31>

00000e7a <L0^A>:
     e7a:	34 f4       	brge	.+12     	; 0xe88 <.L5>

00000e7c <.Loc.31>:
                Motor_1_set_power(18);
     e7c:	82 e1       	ldi	r24, 0x12	; 18
     e7e:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000e82 <.Loc.32>:
                Motor_2_set_power(18);
     e82:	82 e1       	ldi	r24, 0x12	; 18
     e84:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000e88 <.L5>:
            }
            if (Difference > 20 && Difference < 60){
     e88:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8a:	98 89       	ldd	r25, Y+16	; 0x10
     e8c:	84 31       	cpi	r24, 0x14	; 20
     e8e:	91 05       	cpc	r25, r1
     e90:	69 f0       	breq	.+26     	; 0xeac <.L6>
     e92:	64 f0       	brlt	.+24     	; 0xeac <.L6>

00000e94 <.Loc.34>:
     e94:	8f 85       	ldd	r24, Y+15	; 0x0f
     e96:	98 89       	ldd	r25, Y+16	; 0x10
     e98:	8b 33       	cpi	r24, 0x3B	; 59
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f0       	breq	.+2      	; 0xea0 <.Loc.35>

00000e9e <L0^A>:
     e9e:	34 f4       	brge	.+12     	; 0xeac <.L6>

00000ea0 <.Loc.35>:
                Motor_1_set_power(15);
     ea0:	8f e0       	ldi	r24, 0x0F	; 15
     ea2:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000ea6 <.Loc.36>:
                Motor_2_set_power(15);
     ea6:	8f e0       	ldi	r24, 0x0F	; 15
     ea8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000eac <.L6>:
            }
            if (Difference > 0 && Difference < 20){
     eac:	8f 85       	ldd	r24, Y+15	; 0x0f
     eae:	98 89       	ldd	r25, Y+16	; 0x10
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f0       	breq	.+26     	; 0xece <.L7>
     eb4:	64 f0       	brlt	.+24     	; 0xece <.L7>

00000eb6 <.Loc.38>:
     eb6:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb8:	98 89       	ldd	r25, Y+16	; 0x10
     eba:	83 31       	cpi	r24, 0x13	; 19
     ebc:	91 05       	cpc	r25, r1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <.Loc.39>

00000ec0 <L0^A>:
     ec0:	34 f4       	brge	.+12     	; 0xece <.L7>

00000ec2 <.Loc.39>:
                Motor_1_set_power(12);
     ec2:	8c e0       	ldi	r24, 0x0C	; 12
     ec4:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000ec8 <.Loc.40>:
                Motor_2_set_power(12);
     ec8:	8c e0       	ldi	r24, 0x0C	; 12
     eca:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000ece <.L7>:
            }
            if (Difference < -5){
     ece:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed0:	98 89       	ldd	r25, Y+16	; 0x10
     ed2:	8b 3f       	cpi	r24, 0xFB	; 251
     ed4:	5f ef       	ldi	r21, 0xFF	; 255
     ed6:	95 07       	cpc	r25, r21
     ed8:	34 f4       	brge	.+12     	; 0xee6 <.L8>

00000eda <.Loc.42>:
                Motor_1_set_power(-18);
     eda:	8e ee       	ldi	r24, 0xEE	; 238
     edc:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000ee0 <.Loc.43>:
                Motor_2_set_power(-18);
     ee0:	8e ee       	ldi	r24, 0xEE	; 238
     ee2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000ee6 <.L8>:
            }
            if ( -5 < Difference && Difference < 5){
     ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee8:	98 89       	ldd	r25, Y+16	; 0x10
     eea:	8c 3f       	cpi	r24, 0xFC	; 252
     eec:	af ef       	ldi	r26, 0xFF	; 255
     eee:	9a 07       	cpc	r25, r26
     ef0:	64 f0       	brlt	.+24     	; 0xf0a <.L2>

00000ef2 <.Loc.45>:
     ef2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef4:	98 89       	ldd	r25, Y+16	; 0x10
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	91 05       	cpc	r25, r1
     efa:	09 f0       	breq	.+2      	; 0xefe <.Loc.46>

00000efc <L0^A>:
     efc:	34 f4       	brge	.+12     	; 0xf0a <.L2>

00000efe <.Loc.46>:
                Motor_1_set_power(0);
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000f04 <.Loc.47>:
                Motor_2_set_power(0);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000f0a <.L2>:
        while(VolgModus == 1){
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <.Loc.49>

00000f14 <L0^A>:
     f14:	77 cf       	rjmp	.-274    	; 0xe04 <.L10>

00000f16 <.Loc.49>:
            }


        }
        while(KolommenModus == 1){
     f16:	a6 c0       	rjmp	.+332    	; 0x1064 <.L11>

00000f18 <.L17>:
                CurrentHeading = UpdateHeading(CurrentHeading);
     f18:	29 81       	ldd	r18, Y+1	; 0x01
     f1a:	3a 81       	ldd	r19, Y+2	; 0x02
     f1c:	4b 81       	ldd	r20, Y+3	; 0x03
     f1e:	5c 81       	ldd	r21, Y+4	; 0x04
     f20:	2d 8f       	std	Y+29, r18	; 0x1d
     f22:	3e 8f       	std	Y+30, r19	; 0x1e
     f24:	4f 8f       	std	Y+31, r20	; 0x1f
     f26:	58 a3       	std	Y+32, r21	; 0x20
     f28:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f2a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     f2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f2e:	98 a1       	ldd	r25, Y+32	; 0x20
     f30:	0e 94 8e 02 	call	0x51c	; 0x51c <UpdateHeading>
     f34:	69 a3       	std	Y+33, r22	; 0x21
     f36:	7a a3       	std	Y+34, r23	; 0x22
     f38:	8b a3       	std	Y+35, r24	; 0x23
     f3a:	9c a3       	std	Y+36, r25	; 0x24
     f3c:	89 a1       	ldd	r24, Y+33	; 0x21
     f3e:	9a a1       	ldd	r25, Y+34	; 0x22
     f40:	ab a1       	ldd	r26, Y+35	; 0x23
     f42:	bc a1       	ldd	r27, Y+36	; 0x24
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	ab 83       	std	Y+3, r26	; 0x03
     f4a:	bc 83       	std	Y+4, r27	; 0x04

00000f4c <.Loc.51>:
                printgetal = (int)CurrentHeading;
     f4c:	69 81       	ldd	r22, Y+1	; 0x01
     f4e:	7a 81       	ldd	r23, Y+2	; 0x02
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fixsfsi>
     f58:	6d a3       	std	Y+37, r22	; 0x25
     f5a:	7e a3       	std	Y+38, r23	; 0x26
     f5c:	8f a3       	std	Y+39, r24	; 0x27
     f5e:	98 a7       	std	Y+40, r25	; 0x28
     f60:	ad a1       	ldd	r26, Y+37	; 0x25
     f62:	be a1       	ldd	r27, Y+38	; 0x26
     f64:	bc 8b       	std	Y+20, r27	; 0x14
     f66:	ab 8b       	std	Y+19, r26	; 0x13

00000f68 <.Loc.52>:
                display_getal(printgetal);
     f68:	8b 89       	ldd	r24, Y+19	; 0x13
     f6a:	9c 89       	ldd	r25, Y+20	; 0x14
     f6c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <display_getal>

00000f70 <.Loc.53>:
                Difference = TargetHeading - CurrentHeading;
     f70:	8b 85       	ldd	r24, Y+11	; 0x0b
     f72:	9c 85       	ldd	r25, Y+12	; 0x0c
     f74:	9c 01       	movw	r18, r24
     f76:	99 0f       	add	r25, r25
     f78:	44 0b       	sbc	r20, r20
     f7a:	55 0b       	sbc	r21, r21
     f7c:	29 a7       	std	Y+41, r18	; 0x29
     f7e:	3a a7       	std	Y+42, r19	; 0x2a
     f80:	4b a7       	std	Y+43, r20	; 0x2b
     f82:	5c a7       	std	Y+44, r21	; 0x2c
     f84:	69 a5       	ldd	r22, Y+41	; 0x29
     f86:	7a a5       	ldd	r23, Y+42	; 0x2a
     f88:	8b a5       	ldd	r24, Y+43	; 0x2b
     f8a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f8c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__floatsisf>
     f90:	6d 8b       	std	Y+21, r22	; 0x15
     f92:	7e 8b       	std	Y+22, r23	; 0x16
     f94:	8f 8b       	std	Y+23, r24	; 0x17
     f96:	98 8f       	std	Y+24, r25	; 0x18
     f98:	29 81       	ldd	r18, Y+1	; 0x01
     f9a:	3a 81       	ldd	r19, Y+2	; 0x02
     f9c:	4b 81       	ldd	r20, Y+3	; 0x03
     f9e:	5c 81       	ldd	r21, Y+4	; 0x04
     fa0:	6d 89       	ldd	r22, Y+21	; 0x15
     fa2:	7e 89       	ldd	r23, Y+22	; 0x16
     fa4:	8f 89       	ldd	r24, Y+23	; 0x17
     fa6:	98 8d       	ldd	r25, Y+24	; 0x18
     fa8:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__subsf3>
     fac:	6d a7       	std	Y+45, r22	; 0x2d
     fae:	7e a7       	std	Y+46, r23	; 0x2e
     fb0:	8f a7       	std	Y+47, r24	; 0x2f
     fb2:	98 ab       	std	Y+48, r25	; 0x30
     fb4:	8d a5       	ldd	r24, Y+45	; 0x2d
     fb6:	9e a5       	ldd	r25, Y+46	; 0x2e
     fb8:	af a5       	ldd	r26, Y+47	; 0x2f
     fba:	b8 a9       	ldd	r27, Y+48	; 0x30
     fbc:	89 8f       	std	Y+25, r24	; 0x19
     fbe:	9a 8f       	std	Y+26, r25	; 0x1a
     fc0:	ab 8f       	std	Y+27, r26	; 0x1b
     fc2:	bc 8f       	std	Y+28, r27	; 0x1c

00000fc4 <.Loc.54>:
     fc4:	69 8d       	ldd	r22, Y+25	; 0x19
     fc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fcc:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fixsfsi>
     fd0:	69 ab       	std	Y+49, r22	; 0x31
     fd2:	7a ab       	std	Y+50, r23	; 0x32
     fd4:	8b ab       	std	Y+51, r24	; 0x33
     fd6:	9c ab       	std	Y+52, r25	; 0x34
     fd8:	a9 a9       	ldd	r26, Y+49	; 0x31
     fda:	ba a9       	ldd	r27, Y+50	; 0x32
     fdc:	b8 8b       	std	Y+16, r27	; 0x10
     fde:	af 87       	std	Y+15, r26	; 0x0f

00000fe0 <.Loc.55>:

                if(Difference > 3){
     fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fe2:	98 89       	ldd	r25, Y+16	; 0x10
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	91 05       	cpc	r25, r1
     fe8:	39 f0       	breq	.+14     	; 0xff8 <.L12>
     fea:	34 f0       	brlt	.+12     	; 0xff8 <.L12>

00000fec <.Loc.56>:
                    //stuur naar links
                    Motor_1_set_power(20);
     fec:	84 e1       	ldi	r24, 0x14	; 20
     fee:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00000ff2 <.Loc.57>:
                    Motor_2_set_power(17);
     ff2:	81 e1       	ldi	r24, 0x11	; 17
     ff4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00000ff8 <.L12>:
                }
                if(Difference > 8){
     ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffa:	98 89       	ldd	r25, Y+16	; 0x10
     ffc:	88 30       	cpi	r24, 0x08	; 8
     ffe:	91 05       	cpc	r25, r1
    1000:	39 f0       	breq	.+14     	; 0x1010 <.L13>
    1002:	34 f0       	brlt	.+12     	; 0x1010 <.L13>

00001004 <.Loc.59>:
                    //stuur naar links
                    Motor_1_set_power(20);
    1004:	84 e1       	ldi	r24, 0x14	; 20
    1006:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

0000100a <.Loc.60>:
                    Motor_2_set_power(13);
    100a:	8d e0       	ldi	r24, 0x0D	; 13
    100c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00001010 <.L13>:
                }
                if(Difference < -3){
    1010:	8f 85       	ldd	r24, Y+15	; 0x0f
    1012:	98 89       	ldd	r25, Y+16	; 0x10
    1014:	8d 3f       	cpi	r24, 0xFD	; 253
    1016:	bf ef       	ldi	r27, 0xFF	; 255
    1018:	9b 07       	cpc	r25, r27
    101a:	34 f4       	brge	.+12     	; 0x1028 <.L14>

0000101c <.Loc.62>:
                    //stuur naar rechts
                    Motor_1_set_power(17);
    101c:	81 e1       	ldi	r24, 0x11	; 17
    101e:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

00001022 <.Loc.63>:
                    Motor_2_set_power(20);
    1022:	84 e1       	ldi	r24, 0x14	; 20
    1024:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00001028 <.L14>:
                }
                if(Difference < -8){
    1028:	8f 85       	ldd	r24, Y+15	; 0x0f
    102a:	98 89       	ldd	r25, Y+16	; 0x10
    102c:	88 3f       	cpi	r24, 0xF8	; 248
    102e:	ef ef       	ldi	r30, 0xFF	; 255
    1030:	9e 07       	cpc	r25, r30
    1032:	34 f4       	brge	.+12     	; 0x1040 <.L15>

00001034 <.Loc.65>:
                    //stuur naar rechts
                    Motor_1_set_power(13);
    1034:	8d e0       	ldi	r24, 0x0D	; 13
    1036:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

0000103a <.Loc.66>:
                    Motor_2_set_power(20);
    103a:	84 e1       	ldi	r24, 0x14	; 20
    103c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00001040 <.L15>:
                }
                if ( -3 < Difference && Difference < 3){
    1040:	8f 85       	ldd	r24, Y+15	; 0x0f
    1042:	98 89       	ldd	r25, Y+16	; 0x10
    1044:	8e 3f       	cpi	r24, 0xFE	; 254
    1046:	ff ef       	ldi	r31, 0xFF	; 255
    1048:	9f 07       	cpc	r25, r31
    104a:	64 f0       	brlt	.+24     	; 0x1064 <.L11>

0000104c <.Loc.68>:
    104c:	8f 85       	ldd	r24, Y+15	; 0x0f
    104e:	98 89       	ldd	r25, Y+16	; 0x10
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	91 05       	cpc	r25, r1
    1054:	09 f0       	breq	.+2      	; 0x1058 <.Loc.69>

00001056 <L0^A>:
    1056:	34 f4       	brge	.+12     	; 0x1064 <.L11>

00001058 <.Loc.69>:
                    Motor_1_set_power(20);
    1058:	84 e1       	ldi	r24, 0x14	; 20
    105a:	0e 94 aa 04 	call	0x954	; 0x954 <Motor_1_set_power>

0000105e <.Loc.70>:
                    Motor_2_set_power(20);
    105e:	84 e1       	ldi	r24, 0x14	; 20
    1060:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Motor_2_set_power>

00001064 <.L11>:
        while(KolommenModus == 1){
    1064:	8f 81       	ldd	r24, Y+7	; 0x07
    1066:	98 85       	ldd	r25, Y+8	; 0x08
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	09 f4       	brne	.+2      	; 0x1070 <.Loc.72>

0000106e <L0^A>:
    106e:	54 cf       	rjmp	.-344    	; 0xf18 <.L17>

00001070 <.Loc.72>:
        while(VolgModus == 1){
    1070:	4c cf       	rjmp	.-360    	; 0xf0a <.L2>

00001072 <init>:

    return 0;
}


void init (void){
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62

0000107a <.Loc.74>:
    init_SonicSensors();
    107a:	0e 94 18 0b 	call	0x1630	; 0x1630 <init_SonicSensors>

0000107e <.Loc.75>:
    initTimer();
    107e:	0e 94 12 09 	call	0x1224	; 0x1224 <initTimer>

00001082 <.Loc.76>:
    init_motor_1();
    1082:	0e 94 63 04 	call	0x8c6	; 0x8c6 <init_motor_1>

00001086 <.Loc.77>:
    init_motor_2();
    1086:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <init_motor_2>

0000108a <.Loc.78>:
    init_Gyro();
    108a:	0e 94 82 03 	call	0x704	; 0x704 <init_Gyro>

0000108e <.Loc.79>:
    sei();
    108e:	78 94       	sei

00001090 <.Loc.80>:
}
    1090:	00 00       	nop
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <ConfirmKnop>:

int ConfirmKnop(){
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62

000010a0 <.Loc.82>:
    if (PINF & (1<<PF0)){//A0
    10a0:	8f e2       	ldi	r24, 0x2F	; 47
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z

000010a8 <.Loc.83>:
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	81 70       	andi	r24, 0x01	; 1
    10ae:	99 27       	eor	r25, r25

000010b0 <.Loc.84>:
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	19 f0       	breq	.+6      	; 0x10ba <.L21>

000010b4 <.Loc.85>:
        return 1;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <.L22>

000010ba <.L21>:
    }
    else{
        return 0;
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0

000010be <.L22>:
    }
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <ModeSwitch1>:
int ModeSwitch1(){
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62

000010cc <.Loc.89>:
    if (PINF & (1<<PF1)){//A1
    10cc:	8f e2       	ldi	r24, 0x2F	; 47
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	fc 01       	movw	r30, r24
    10d2:	80 81       	ld	r24, Z

000010d4 <.Loc.90>:
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	82 70       	andi	r24, 0x02	; 2
    10da:	99 27       	eor	r25, r25

000010dc <.Loc.91>:
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	19 f0       	breq	.+6      	; 0x10e6 <.L24>

000010e0 <.Loc.92>:
        return 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <.L25>

000010e6 <.L24>:
    }
    else{
        return 0;
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0

000010ea <.L25>:
    }
}
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <ModeSwitch2>:
int ModeSwitch2(){
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62

000010f8 <.Loc.96>:
    if (PINF & (1<<PF2)){//A2
    10f8:	8f e2       	ldi	r24, 0x2F	; 47
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	fc 01       	movw	r30, r24
    10fe:	80 81       	ld	r24, Z

00001100 <.Loc.97>:
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	84 70       	andi	r24, 0x04	; 4
    1106:	99 27       	eor	r25, r25

00001108 <.Loc.98>:
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	19 f0       	breq	.+6      	; 0x1112 <.L27>

0000110c <.Loc.99>:
        return 1;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <.L28>

00001112 <.L27>:
    }
    else{
        return 0;
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0

00001116 <.L28>:
    }
}
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	08 95       	ret

0000111c <ModeSwitchReset>:
int ModeSwitchReset(){
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62

00001124 <.Loc.103>:
    if (PINF & (1<<PF2)){//A2
    1124:	8f e2       	ldi	r24, 0x2F	; 47
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	fc 01       	movw	r30, r24
    112a:	80 81       	ld	r24, Z

0000112c <.Loc.104>:
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	84 70       	andi	r24, 0x04	; 4
    1132:	99 27       	eor	r25, r25

00001134 <.Loc.105>:
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	19 f0       	breq	.+6      	; 0x113e <.L30>

00001138 <.Loc.106>:
        return 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <.L31>

0000113e <.L30>:
    }
    else{
        return 0;
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0

00001142 <.L31>:
    }
}
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	08 95       	ret

00001148 <KolomIR>:
int KolomIR(){
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62

00001150 <.Loc.110>:
    if (PINF & (1<<PF3)){//A3
    1150:	8f e2       	ldi	r24, 0x2F	; 47
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z

00001158 <.Loc.111>:
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	88 70       	andi	r24, 0x08	; 8
    115e:	99 27       	eor	r25, r25

00001160 <.Loc.112>:
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	19 f0       	breq	.+6      	; 0x116a <.L33>

00001164 <.Loc.113>:
        return 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <.L34>

0000116a <.L33>:
    }
    else{
        return 0;
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0

0000116e <.L34>:
    }
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <BoomDetectie>:

int BoomDetectie(){
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	00 d0       	rcall	.+0      	; 0x117a <L0^A>

0000117a <L0^A>:
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62

00001180 <.Loc.117>:
    int afstand_Links = GetDistanceLeft();
    1180:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <GetDistanceLeft>
    1184:	9a 83       	std	Y+2, r25	; 0x02
    1186:	89 83       	std	Y+1, r24	; 0x01

00001188 <.Loc.118>:
    int afstand_Rechts = GetDistanceRight();
    1188:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <GetDistanceRight>
    118c:	9c 83       	std	Y+4, r25	; 0x04
    118e:	8b 83       	std	Y+3, r24	; 0x03

00001190 <.Loc.119>:
    if ((afstand_Links <= 60) | (afstand_Rechts <= 60)){
    1190:	31 e0       	ldi	r19, 0x01	; 1
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	8c 33       	cpi	r24, 0x3C	; 60
    1198:	91 05       	cpc	r25, r1
    119a:	11 f0       	breq	.+4      	; 0x11a0 <.L36>
    119c:	0c f0       	brlt	.+2      	; 0x11a0 <.L36>
    119e:	30 e0       	ldi	r19, 0x00	; 0

000011a0 <.L36>:
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	8c 33       	cpi	r24, 0x3C	; 60
    11a8:	91 05       	cpc	r25, r1
    11aa:	11 f0       	breq	.+4      	; 0x11b0 <.L37>
    11ac:	0c f0       	brlt	.+2      	; 0x11b0 <.L37>
    11ae:	20 e0       	ldi	r18, 0x00	; 0

000011b0 <.L37>:
    11b0:	83 2f       	mov	r24, r19
    11b2:	82 2b       	or	r24, r18

000011b4 <.Loc.120>:
    11b4:	88 23       	and	r24, r24
    11b6:	19 f0       	breq	.+6      	; 0x11be <.L38>

000011b8 <.Loc.121>:
        return 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <.L39>

000011be <.L38>:
    }
    else{
        return 0;
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0

000011c2 <.L39>:
    }

}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <LightSwap>:

void LightSwap(void){
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62

000011d8 <.Loc.125>:
    PORTB ^= (1<<PB7);
    11d8:	85 e2       	ldi	r24, 0x25	; 37
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	fc 01       	movw	r30, r24
    11de:	30 81       	ld	r19, Z
    11e0:	85 e2       	ldi	r24, 0x25	; 37
    11e2:	90 e0       	ldi	r25, 0x00	; 0

000011e4 <.Loc.126>:
    11e4:	20 e8       	ldi	r18, 0x80	; 128
    11e6:	23 27       	eor	r18, r19
    11e8:	fc 01       	movw	r30, r24
    11ea:	20 83       	st	Z, r18

000011ec <.Loc.127>:
    PORTB ^= (1<<PB6);
    11ec:	85 e2       	ldi	r24, 0x25	; 37
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	30 81       	ld	r19, Z
    11f4:	85 e2       	ldi	r24, 0x25	; 37
    11f6:	90 e0       	ldi	r25, 0x00	; 0

000011f8 <.Loc.128>:
    11f8:	20 e4       	ldi	r18, 0x40	; 64
    11fa:	23 27       	eor	r18, r19
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18

00001200 <.Loc.129>:
}
    1200:	00 00       	nop
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <TurnTo>:


void TurnTo(int TargetHeading){
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	0f 92       	push	r0
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01

00001218 <.Loc.131>:
    //Get heading




}
    1218:	00 00       	nop
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <initTimer>:

void initTimer(void)
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62

0000122c <.Loc.133>:
    TCCR4A = 0;
    122c:	80 ea       	ldi	r24, 0xA0	; 160
    122e:	90 e0       	ldi	r25, 0x00	; 0

00001230 <.Loc.134>:
    1230:	fc 01       	movw	r30, r24
    1232:	10 82       	st	Z, r1

00001234 <.Loc.135>:
    TCCR4B |=  (1<<CS41);
    1234:	81 ea       	ldi	r24, 0xA1	; 161
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	fc 01       	movw	r30, r24
    123a:	20 81       	ld	r18, Z
    123c:	81 ea       	ldi	r24, 0xA1	; 161
    123e:	90 e0       	ldi	r25, 0x00	; 0

00001240 <.Loc.136>:
    1240:	22 60       	ori	r18, 0x02	; 2
    1242:	fc 01       	movw	r30, r24
    1244:	20 83       	st	Z, r18

00001246 <.Loc.137>:
}
    1246:	00 00       	nop
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	08 95       	ret

0000124e <wait_ms>:

void wait_ms(int ms){
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	00 d0       	rcall	.+0      	; 0x1254 <L0^A>

00001254 <L0^A>:
    1254:	00 d0       	rcall	.+0      	; 0x1256 <L0^A>

00001256 <L0^A>:
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	8d 83       	std	Y+5, r24	; 0x05

0000125e <.Loc.139>:
    int WachtTijd = ms/33;
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	21 e2       	ldi	r18, 0x21	; 33
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	b9 01       	movw	r22, r18
    1268:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__divmodhi4>
    126c:	cb 01       	movw	r24, r22
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	8b 83       	std	Y+3, r24	; 0x03

00001272 <.Loc.140>:
    int teller =0;
    1272:	1a 82       	std	Y+2, r1	; 0x02
    1274:	19 82       	std	Y+1, r1	; 0x01

00001276 <.Loc.141>:
    while(teller < WachtTijd)
    1276:	14 c0       	rjmp	.+40     	; 0x12a0 <.L45>

00001278 <.L46>:
    {
        if (TIFR4 & (1<<TOV4))
    1278:	89 e3       	ldi	r24, 0x39	; 57
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	fc 01       	movw	r30, r24
    127e:	80 81       	ld	r24, Z

00001280 <.Loc.143>:
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	81 70       	andi	r24, 0x01	; 1
    1286:	99 27       	eor	r25, r25

00001288 <.Loc.144>:
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	51 f0       	breq	.+20     	; 0x12a0 <.L45>

0000128c <.Loc.145>:
        {
            TIFR4 = (1<<TOV4);
    128c:	89 e3       	ldi	r24, 0x39	; 57
    128e:	90 e0       	ldi	r25, 0x00	; 0

00001290 <.Loc.146>:
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	fc 01       	movw	r30, r24
    1294:	20 83       	st	Z, r18

00001296 <.Loc.147>:
            teller++;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01

000012a0 <.L45>:
    while(teller < WachtTijd)
    12a0:	29 81       	ldd	r18, Y+1	; 0x01
    12a2:	3a 81       	ldd	r19, Y+2	; 0x02
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	28 17       	cp	r18, r24
    12aa:	39 07       	cpc	r19, r25
    12ac:	2c f3       	brlt	.-54     	; 0x1278 <.L46>

000012ae <.Loc.149>:
        }
    }
}
    12ae:	00 00       	nop
    12b0:	00 00       	nop
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <init_display_meneer>:
	~0x66, ~0xB6, ~0xBE, ~0xE0,
	~0xFE, ~0xF6, ~0xEE, ~0x3E,
	~0x9C, ~0x7A, ~0x9E, ~0x8E };

void init_display_meneer (void)
{
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62

000012cc <.Loc.151>:
	// Initialiseer de pinnen voor datain, shiftclk en latchclk als output
	DDR_SDI    |= (1 << SDI_BIT);
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	fc 01       	movw	r30, r24
    12d2:	20 81       	ld	r18, Z
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	91 e0       	ldi	r25, 0x01	; 1

000012d8 <.Loc.152>:
    12d8:	20 62       	ori	r18, 0x20	; 32
    12da:	fc 01       	movw	r30, r24
    12dc:	20 83       	st	Z, r18

000012de <.Loc.153>:
	DDR_SFTCLK |= (1 << SFTCLK_BIT);
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	fc 01       	movw	r30, r24
    12e4:	20 81       	ld	r18, Z
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	91 e0       	ldi	r25, 0x01	; 1

000012ea <.Loc.154>:
    12ea:	20 61       	ori	r18, 0x10	; 16
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18

000012f0 <.Loc.155>:
	DDR_LCHCLK |= (1 << LCHCLK_BIT);
    12f0:	83 e3       	ldi	r24, 0x33	; 51
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 81       	ld	r18, Z
    12f8:	83 e3       	ldi	r24, 0x33	; 51
    12fa:	90 e0       	ldi	r25, 0x00	; 0

000012fc <.Loc.156>:
    12fc:	20 62       	ori	r18, 0x20	; 32
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18

00001302 <.Loc.157>:

	// Maak shiftclk en latchclk laag
	PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	fc 01       	movw	r30, r24
    1308:	20 81       	ld	r18, Z

0000130a <.Loc.158>:
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	91 e0       	ldi	r25, 0x01	; 1

0000130e <.Loc.159>:
    130e:	2f 7e       	andi	r18, 0xEF	; 239
    1310:	fc 01       	movw	r30, r24
    1312:	20 83       	st	Z, r18

00001314 <.Loc.160>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
    1314:	84 e3       	ldi	r24, 0x34	; 52
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	fc 01       	movw	r30, r24
    131a:	20 81       	ld	r18, Z

0000131c <.Loc.161>:
    131c:	84 e3       	ldi	r24, 0x34	; 52
    131e:	90 e0       	ldi	r25, 0x00	; 0

00001320 <.Loc.162>:
    1320:	2f 7d       	andi	r18, 0xDF	; 223
    1322:	fc 01       	movw	r30, r24
    1324:	20 83       	st	Z, r18

00001326 <.Loc.163>:
}
    1326:	00 00       	nop
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <send_data>:

void send_data(char data)
{
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	00 d0       	rcall	.+0      	; 0x1334 <L0^A>

00001334 <L0^A>:
    1334:	0f 92       	push	r0
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	8d 83       	std	Y+5, r24	; 0x05

0000133e <.LBB15>:
	for (unsigned i = 0; i < 8; i++)
    133e:	1a 82       	std	Y+2, r1	; 0x02
    1340:	19 82       	std	Y+1, r1	; 0x01

00001342 <.Loc.166>:
    1342:	39 c0       	rjmp	.+114    	; 0x13b6 <.L49>

00001344 <.L52>:
	// Herhaal voor alle bits in een char
	{
		// Bepaal de waarde van de bit die je naar het schuifregister
		// wil sturen
		int bit = data & 1;
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	08 2e       	mov	r0, r24
    1348:	00 0c       	add	r0, r0
    134a:	99 0b       	sbc	r25, r25

0000134c <.Loc.168>:
    134c:	81 70       	andi	r24, 0x01	; 1
    134e:	99 27       	eor	r25, r25
    1350:	9c 83       	std	Y+4, r25	; 0x04
    1352:	8b 83       	std	Y+3, r24	; 0x03

00001354 <.Loc.169>:
		data >>= 1;
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	85 95       	asr	r24
    1358:	8d 83       	std	Y+5, r24	; 0x05

0000135a <.Loc.170>:

		// Maak de juiste pin hoog of laag op basis van de bepaalde waarde
		// van het bit
		if (bit)
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	51 f0       	breq	.+20     	; 0x1376 <.L50>

00001362 <.Loc.171>:
		{
			PORT_SDI |= (1 << SDI_BIT);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	fc 01       	movw	r30, r24
    1368:	20 81       	ld	r18, Z
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	91 e0       	ldi	r25, 0x01	; 1

0000136e <.Loc.172>:
    136e:	20 62       	ori	r18, 0x20	; 32
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <.L51>

00001376 <.L50>:
		}
		else
		{
			PORT_SDI &= ~(1 << SDI_BIT);
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	fc 01       	movw	r30, r24
    137c:	20 81       	ld	r18, Z

0000137e <.Loc.174>:
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	91 e0       	ldi	r25, 0x01	; 1

00001382 <.Loc.175>:
    1382:	2f 7d       	andi	r18, 0xDF	; 223
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18

00001388 <.L51>:
		}

		// Toggle shiftclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
		// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
		// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
		PORT_SFTCLK |= (1 << SFTCLK_BIT);
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	fc 01       	movw	r30, r24
    138e:	20 81       	ld	r18, Z
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	91 e0       	ldi	r25, 0x01	; 1

00001394 <.Loc.177>:
    1394:	20 61       	ori	r18, 0x10	; 16
    1396:	fc 01       	movw	r30, r24
    1398:	20 83       	st	Z, r18

0000139a <.Loc.178>:
		PORT_SFTCLK &= ~(1 << SFTCLK_BIT);
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	fc 01       	movw	r30, r24
    13a0:	20 81       	ld	r18, Z

000013a2 <.Loc.179>:
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	91 e0       	ldi	r25, 0x01	; 1

000013a6 <.Loc.180>:
    13a6:	2f 7e       	andi	r18, 0xEF	; 239
    13a8:	fc 01       	movw	r30, r24
    13aa:	20 83       	st	Z, r18

000013ac <.LBE16>:
	for (unsigned i = 0; i < 8; i++)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	9a 81       	ldd	r25, Y+2	; 0x02
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	9a 83       	std	Y+2, r25	; 0x02
    13b4:	89 83       	std	Y+1, r24	; 0x01

000013b6 <.L49>:
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	87 30       	cpi	r24, 0x07	; 7
    13bc:	91 05       	cpc	r25, r1
    13be:	11 f2       	breq	.-124    	; 0x1344 <.L52>
    13c0:	08 f2       	brcs	.-126    	; 0x1344 <.L52>

000013c2 <.LBE15>:
	}
}
    13c2:	00 00       	nop
    13c4:	00 00       	nop
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <send_enable>:

void send_enable(int display_nummer)
{
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	0f 92       	push	r0
    13dc:	0f 92       	push	r0
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01

000013e6 <.Loc.185>:
	send_data(0x10 << display_nummer);
    13e6:	80 e1       	ldi	r24, 0x10	; 16
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	09 80       	ldd	r0, Y+1	; 0x01
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <.L2^B1>

000013ee <.L1^B1>:
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25

000013f2 <.L2^B1>:
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <.L1^B1>

000013f6 <.Loc.186>:
    13f6:	0e 94 97 09 	call	0x132e	; 0x132e <send_data>

000013fa <.Loc.187>:
}
    13fa:	00 00       	nop
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <display>:

void display(char data, int display_nummer)
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	00 d0       	rcall	.+0      	; 0x140c <L0^A>

0000140c <L0^A>:
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	7b 83       	std	Y+3, r23	; 0x03
    1414:	6a 83       	std	Y+2, r22	; 0x02

00001416 <.Loc.189>:
	send_data(data);
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	0e 94 97 09 	call	0x132e	; 0x132e <send_data>

0000141c <.Loc.190>:
	send_enable(display_nummer);
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <send_enable>

00001424 <.Loc.191>:

	// Toggle latchclk (hoeveel tijd moest het signaal minimaal hoog zijn?)
	// Puls moet minimaal 13 ns hoog zijn. Een clk cycle op de Arduino duurt
	// 62 ns, dus signaal kan hoog en de volgende cycle weer omlaag
	PORT_LCHCLK |= (1 << LCHCLK_BIT);
    1424:	84 e3       	ldi	r24, 0x34	; 52
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	fc 01       	movw	r30, r24
    142a:	20 81       	ld	r18, Z
    142c:	84 e3       	ldi	r24, 0x34	; 52
    142e:	90 e0       	ldi	r25, 0x00	; 0

00001430 <.Loc.192>:
    1430:	20 62       	ori	r18, 0x20	; 32
    1432:	fc 01       	movw	r30, r24
    1434:	20 83       	st	Z, r18

00001436 <.Loc.193>:
	PORT_LCHCLK &= ~(1 << LCHCLK_BIT);
    1436:	84 e3       	ldi	r24, 0x34	; 52
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	fc 01       	movw	r30, r24
    143c:	20 81       	ld	r18, Z

0000143e <.Loc.194>:
    143e:	84 e3       	ldi	r24, 0x34	; 52
    1440:	90 e0       	ldi	r25, 0x00	; 0

00001442 <.Loc.195>:
    1442:	2f 7d       	andi	r18, 0xDF	; 223
    1444:	fc 01       	movw	r30, r24
    1446:	20 83       	st	Z, r18

00001448 <.Loc.196>:
}
    1448:	00 00       	nop
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <display_getal>:

void display_getal(unsigned int getal)
{
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	a6 97       	sbiw	r28, 0x26	; 38
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	9a 8b       	std	Y+18, r25	; 0x12
    146c:	89 8b       	std	Y+17, r24	; 0x11

0000146e <.LBB17>:
	for (int i = 0; i < 4; i++)
    146e:	1a 82       	std	Y+2, r1	; 0x02
    1470:	19 82       	std	Y+1, r1	; 0x01

00001472 <.Loc.199>:
    1472:	cc c0       	rjmp	.+408    	; 0x160c <.L56>

00001474 <.L65>:
	{
		display(segmentcodes[getal%10], i);
    1474:	49 89       	ldd	r20, Y+17	; 0x11
    1476:	5a 89       	ldd	r21, Y+18	; 0x12
    1478:	9a 01       	movw	r18, r20
    147a:	ad ec       	ldi	r26, 0xCD	; 205
    147c:	bc ec       	ldi	r27, 0xCC	; 204
    147e:	0e 94 8c 11 	call	0x2318	; 0x2318 <__umulhisi3>
    1482:	9c 01       	movw	r18, r24
    1484:	36 95       	lsr	r19
    1486:	27 95       	ror	r18
    1488:	36 95       	lsr	r19
    148a:	27 95       	ror	r18
    148c:	36 95       	lsr	r19
    148e:	27 95       	ror	r18
    1490:	c9 01       	movw	r24, r18
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	82 0f       	add	r24, r18
    149c:	93 1f       	adc	r25, r19
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	9a 01       	movw	r18, r20
    14a4:	28 1b       	sub	r18, r24
    14a6:	39 0b       	sbc	r19, r25

000014a8 <.Loc.201>:
    14a8:	c9 01       	movw	r24, r18
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	80 50       	subi	r24, 0x00	; 0
    14b0:	9e 4f       	sbci	r25, 0xFE	; 254
    14b2:	dc 01       	movw	r26, r24
    14b4:	8d 91       	ld	r24, X+
    14b6:	9c 91       	ld	r25, X

000014b8 <.Loc.202>:
    14b8:	28 2f       	mov	r18, r24
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	bc 01       	movw	r22, r24
    14c0:	82 2f       	mov	r24, r18
    14c2:	0e 94 03 0a 	call	0x1406	; 0x1406 <display>

000014c6 <.Loc.203>:
		getal /= 10;
    14c6:	89 89       	ldd	r24, Y+17	; 0x11
    14c8:	9a 89       	ldd	r25, Y+18	; 0x12
    14ca:	9c 01       	movw	r18, r24
    14cc:	ad ec       	ldi	r26, 0xCD	; 205
    14ce:	bc ec       	ldi	r27, 0xCC	; 204
    14d0:	0e 94 8c 11 	call	0x2318	; 0x2318 <__umulhisi3>
    14d4:	96 95       	lsr	r25
    14d6:	87 95       	ror	r24
    14d8:	96 95       	lsr	r25
    14da:	87 95       	ror	r24
    14dc:	96 95       	lsr	r25
    14de:	87 95       	ror	r24
    14e0:	9a 8b       	std	Y+18, r25	; 0x12
    14e2:	89 8b       	std	Y+17, r24	; 0x11
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	a0 e8       	ldi	r26, 0x80	; 128
    14ea:	bf e3       	ldi	r27, 0x3F	; 63
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	9c 83       	std	Y+4, r25	; 0x04
    14f0:	ad 83       	std	Y+5, r26	; 0x05
    14f2:	be 83       	std	Y+6, r27	; 0x06

000014f4 <.LBB18>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	4a e7       	ldi	r20, 0x7A	; 122
    14fa:	55 e4       	ldi	r21, 0x45	; 69
    14fc:	6b 81       	ldd	r22, Y+3	; 0x03
    14fe:	7c 81       	ldd	r23, Y+4	; 0x04
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1508:	6f 8b       	std	Y+23, r22	; 0x17
    150a:	78 8f       	std	Y+24, r23	; 0x18
    150c:	89 8f       	std	Y+25, r24	; 0x19
    150e:	9a 8f       	std	Y+26, r25	; 0x1a
    1510:	8f 89       	ldd	r24, Y+23	; 0x17
    1512:	98 8d       	ldd	r25, Y+24	; 0x18
    1514:	a9 8d       	ldd	r26, Y+25	; 0x19
    1516:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	98 87       	std	Y+8, r25	; 0x08
    151c:	a9 87       	std	Y+9, r26	; 0x09
    151e:	ba 87       	std	Y+10, r27	; 0x0a

00001520 <.Loc.205>:
	if (__tmp < 1.0)
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e8       	ldi	r20, 0x80	; 128
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	6f 81       	ldd	r22, Y+7	; 0x07
    152a:	78 85       	ldd	r23, Y+8	; 0x08
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	0e 94 49 12 	call	0x2492	; 0x2492 <__cmpsf2>
    1534:	88 23       	and	r24, r24
    1536:	2c f4       	brge	.+10     	; 0x1542 <.L68>

00001538 <.Loc.206>:
		__ticks = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9c 87       	std	Y+12, r25	; 0x0c
    153e:	8b 87       	std	Y+11, r24	; 0x0b
    1540:	55 c0       	rjmp	.+170    	; 0x15ec <.L59>

00001542 <.L68>:
	else if (__tmp > 65535)
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	3f ef       	ldi	r19, 0xFF	; 255
    1546:	4f e7       	ldi	r20, 0x7F	; 127
    1548:	57 e4       	ldi	r21, 0x47	; 71
    154a:	6f 81       	ldd	r22, Y+7	; 0x07
    154c:	78 85       	ldd	r23, Y+8	; 0x08
    154e:	89 85       	ldd	r24, Y+9	; 0x09
    1550:	9a 85       	ldd	r25, Y+10	; 0x0a
    1552:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    1556:	88 23       	and	r24, r24
    1558:	d9 f1       	breq	.+118    	; 0x15d0 <.L69>
    155a:	d4 f1       	brlt	.+116    	; 0x15d0 <.L69>

0000155c <.Loc.208>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e2       	ldi	r20, 0x20	; 32
    1562:	51 e4       	ldi	r21, 0x41	; 65
    1564:	6b 81       	ldd	r22, Y+3	; 0x03
    1566:	7c 81       	ldd	r23, Y+4	; 0x04
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	9e 81       	ldd	r25, Y+6	; 0x06
    156c:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1570:	6b 8f       	std	Y+27, r22	; 0x1b
    1572:	7c 8f       	std	Y+28, r23	; 0x1c
    1574:	8d 8f       	std	Y+29, r24	; 0x1d
    1576:	9e 8f       	std	Y+30, r25	; 0x1e
    1578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    157e:	be 8d       	ldd	r27, Y+30	; 0x1e
    1580:	8b 8b       	std	Y+19, r24	; 0x13
    1582:	9c 8b       	std	Y+20, r25	; 0x14
    1584:	ad 8b       	std	Y+21, r26	; 0x15
    1586:	be 8b       	std	Y+22, r27	; 0x16

00001588 <.Loc.209>:
    1588:	6b 89       	ldd	r22, Y+19	; 0x13
    158a:	7c 89       	ldd	r23, Y+20	; 0x14
    158c:	8d 89       	ldd	r24, Y+21	; 0x15
    158e:	9e 89       	ldd	r25, Y+22	; 0x16
    1590:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    1594:	6f 8f       	std	Y+31, r22	; 0x1f
    1596:	78 a3       	std	Y+32, r23	; 0x20
    1598:	89 a3       	std	Y+33, r24	; 0x21
    159a:	9a a3       	std	Y+34, r25	; 0x22
    159c:	af 8d       	ldd	r26, Y+31	; 0x1f
    159e:	b8 a1       	ldd	r27, Y+32	; 0x20
    15a0:	bc 87       	std	Y+12, r27	; 0x0c
    15a2:	ab 87       	std	Y+11, r26	; 0x0b

000015a4 <.Loc.210>:
		while(__ticks)
    15a4:	10 c0       	rjmp	.+32     	; 0x15c6 <.L62>

000015a6 <.L63>:
    15a6:	80 e9       	ldi	r24, 0x90	; 144
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	9e 87       	std	Y+14, r25	; 0x0e
    15ac:	8d 87       	std	Y+13, r24	; 0x0d

000015ae <.LBB20>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
    15ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b0:	9e 85       	ldd	r25, Y+14	; 0x0e

000015b2 <.L1^B2>:
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <.L1^B2>
    15b6:	9e 87       	std	Y+14, r25	; 0x0e
    15b8:	8d 87       	std	Y+13, r24	; 0x0d

000015ba <.Loc.212>:
	...

000015bc <.LBE20>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    15be:	9c 85       	ldd	r25, Y+12	; 0x0c
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9c 87       	std	Y+12, r25	; 0x0c
    15c4:	8b 87       	std	Y+11, r24	; 0x0b

000015c6 <.L62>:
		while(__ticks)
    15c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	61 f7       	brne	.-40     	; 0x15a6 <.L63>

000015ce <.Loc.215>:
		}
		return;
    15ce:	19 c0       	rjmp	.+50     	; 0x1602 <.L64>

000015d0 <.L69>:
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	6f 81       	ldd	r22, Y+7	; 0x07
    15d2:	78 85       	ldd	r23, Y+8	; 0x08
    15d4:	89 85       	ldd	r24, Y+9	; 0x09
    15d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d8:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    15dc:	6b a3       	std	Y+35, r22	; 0x23
    15de:	7c a3       	std	Y+36, r23	; 0x24
    15e0:	8d a3       	std	Y+37, r24	; 0x25
    15e2:	9e a3       	std	Y+38, r25	; 0x26
    15e4:	eb a1       	ldd	r30, Y+35	; 0x23
    15e6:	fc a1       	ldd	r31, Y+36	; 0x24
    15e8:	fc 87       	std	Y+12, r31	; 0x0c
    15ea:	eb 87       	std	Y+11, r30	; 0x0b

000015ec <.L59>:
    15ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f0:	98 8b       	std	Y+16, r25	; 0x10
    15f2:	8f 87       	std	Y+15, r24	; 0x0f

000015f4 <.LBB22>:
    15f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f6:	98 89       	ldd	r25, Y+16	; 0x10

000015f8 <.L1^B3>:
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <.L1^B3>
    15fc:	98 8b       	std	Y+16, r25	; 0x10
    15fe:	8f 87       	std	Y+15, r24	; 0x0f

00001600 <.Loc.218>:
	...

00001602 <.L64>:
	for (int i = 0; i < 4; i++)
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01

0000160c <.L56>:
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	83 30       	cpi	r24, 0x03	; 3
    1612:	91 05       	cpc	r25, r1
    1614:	09 f0       	breq	.+2      	; 0x1618 <L0^A>

00001616 <L0^A>:
    1616:	0c f4       	brge	.+2      	; 0x161a <.LBE17>

00001618 <L0^A>:
    1618:	2d cf       	rjmp	.-422    	; 0x1474 <.L65>

0000161a <.LBE17>:
		_delay_ms(1);   // 1 kHz
	}
}
    161a:	00 00       	nop
    161c:	00 00       	nop
    161e:	a6 96       	adiw	r28, 0x26	; 38
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <init_SonicSensors>:
#include "Ultra_Sonic_Front.h"
#include <avr/io.h>
#include <avr/interrupt.h>
volatile int count = 0;

void init_SonicSensors(void){
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62

00001638 <.Loc.1>:
	ddr_ech_F &= ~(1<<pin_ech_F);
    1638:	87 e0       	ldi	r24, 0x07	; 7
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	fc 01       	movw	r30, r24
    163e:	20 81       	ld	r18, Z

00001640 <.Loc.2>:
    1640:	87 e0       	ldi	r24, 0x07	; 7
    1642:	91 e0       	ldi	r25, 0x01	; 1

00001644 <.Loc.3>:
    1644:	27 7f       	andi	r18, 0xF7	; 247
    1646:	fc 01       	movw	r30, r24
    1648:	20 83       	st	Z, r18

0000164a <.Loc.4>:
	ddr_tri_F |= (1<<pin_tri_F);
    164a:	81 e2       	ldi	r24, 0x21	; 33
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	fc 01       	movw	r30, r24
    1650:	20 81       	ld	r18, Z
    1652:	81 e2       	ldi	r24, 0x21	; 33
    1654:	90 e0       	ldi	r25, 0x00	; 0

00001656 <.Loc.5>:
    1656:	21 60       	ori	r18, 0x01	; 1
    1658:	fc 01       	movw	r30, r24
    165a:	20 83       	st	Z, r18

0000165c <.Loc.6>:
    port_tri_F &= ~(1<<pin_tri_F);
    165c:	82 e2       	ldi	r24, 0x22	; 34
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	fc 01       	movw	r30, r24
    1662:	20 81       	ld	r18, Z

00001664 <.Loc.7>:
    1664:	82 e2       	ldi	r24, 0x22	; 34
    1666:	90 e0       	ldi	r25, 0x00	; 0

00001668 <.Loc.8>:
    1668:	2e 7f       	andi	r18, 0xFE	; 254
    166a:	fc 01       	movw	r30, r24
    166c:	20 83       	st	Z, r18

0000166e <.Loc.9>:

	ddr_ech_R &= ~(1<<pin_ech_R);
    166e:	87 e0       	ldi	r24, 0x07	; 7
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	fc 01       	movw	r30, r24
    1674:	20 81       	ld	r18, Z

00001676 <.Loc.10>:
    1676:	87 e0       	ldi	r24, 0x07	; 7
    1678:	91 e0       	ldi	r25, 0x01	; 1

0000167a <.Loc.11>:
    167a:	2d 7f       	andi	r18, 0xFD	; 253
    167c:	fc 01       	movw	r30, r24
    167e:	20 83       	st	Z, r18

00001680 <.Loc.12>:
	ddr_tri_R |= (1<<pin_tri_R);
    1680:	81 e2       	ldi	r24, 0x21	; 33
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	fc 01       	movw	r30, r24
    1686:	20 81       	ld	r18, Z
    1688:	81 e2       	ldi	r24, 0x21	; 33
    168a:	90 e0       	ldi	r25, 0x00	; 0

0000168c <.Loc.13>:
    168c:	20 61       	ori	r18, 0x10	; 16
    168e:	fc 01       	movw	r30, r24
    1690:	20 83       	st	Z, r18

00001692 <.Loc.14>:
    port_tri_R &= ~(1<<pin_tri_R);
    1692:	82 e2       	ldi	r24, 0x22	; 34
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	fc 01       	movw	r30, r24
    1698:	20 81       	ld	r18, Z

0000169a <.Loc.15>:
    169a:	82 e2       	ldi	r24, 0x22	; 34
    169c:	90 e0       	ldi	r25, 0x00	; 0

0000169e <.Loc.16>:
    169e:	2f 7e       	andi	r18, 0xEF	; 239
    16a0:	fc 01       	movw	r30, r24
    16a2:	20 83       	st	Z, r18

000016a4 <.Loc.17>:

	ddr_ech_L &= ~(1<<pin_ech_L);
    16a4:	87 e0       	ldi	r24, 0x07	; 7
    16a6:	91 e0       	ldi	r25, 0x01	; 1
    16a8:	fc 01       	movw	r30, r24
    16aa:	20 81       	ld	r18, Z

000016ac <.Loc.18>:
    16ac:	87 e0       	ldi	r24, 0x07	; 7
    16ae:	91 e0       	ldi	r25, 0x01	; 1

000016b0 <.Loc.19>:
    16b0:	2b 7f       	andi	r18, 0xFB	; 251
    16b2:	fc 01       	movw	r30, r24
    16b4:	20 83       	st	Z, r18

000016b6 <.Loc.20>:
	ddr_tri_L |= (1<<pin_tri_L);
    16b6:	81 e2       	ldi	r24, 0x21	; 33
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	fc 01       	movw	r30, r24
    16bc:	20 81       	ld	r18, Z
    16be:	81 e2       	ldi	r24, 0x21	; 33
    16c0:	90 e0       	ldi	r25, 0x00	; 0

000016c2 <.Loc.21>:
    16c2:	24 60       	ori	r18, 0x04	; 4
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18

000016c8 <.Loc.22>:
    port_tri_L &= ~(1<<pin_tri_L);
    16c8:	82 e2       	ldi	r24, 0x22	; 34
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	fc 01       	movw	r30, r24
    16ce:	20 81       	ld	r18, Z

000016d0 <.Loc.23>:
    16d0:	82 e2       	ldi	r24, 0x22	; 34
    16d2:	90 e0       	ldi	r25, 0x00	; 0

000016d4 <.Loc.24>:
    16d4:	2b 7f       	andi	r18, 0xFB	; 251
    16d6:	fc 01       	movw	r30, r24
    16d8:	20 83       	st	Z, r18

000016da <.Loc.25>:

    TCCR2A = 0;
    16da:	80 eb       	ldi	r24, 0xB0	; 176
    16dc:	90 e0       	ldi	r25, 0x00	; 0

000016de <.Loc.26>:
    16de:	fc 01       	movw	r30, r24
    16e0:	10 82       	st	Z, r1

000016e2 <.Loc.27>:
    TCCR2B |= (1<<CS20) ;
    16e2:	81 eb       	ldi	r24, 0xB1	; 177
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	fc 01       	movw	r30, r24
    16e8:	20 81       	ld	r18, Z
    16ea:	81 eb       	ldi	r24, 0xB1	; 177
    16ec:	90 e0       	ldi	r25, 0x00	; 0

000016ee <.Loc.28>:
    16ee:	21 60       	ori	r18, 0x01	; 1
    16f0:	fc 01       	movw	r30, r24
    16f2:	20 83       	st	Z, r18

000016f4 <.Loc.29>:
    //16000000 / 256 = 62,500
    //1 / 62500 = 0.000016s
    //62500x/sec
    TIMSK2 = (1<<TOIE2);
    16f4:	80 e7       	ldi	r24, 0x70	; 112
    16f6:	90 e0       	ldi	r25, 0x00	; 0

000016f8 <.Loc.30>:
    16f8:	21 e0       	ldi	r18, 0x01	; 1
    16fa:	fc 01       	movw	r30, r24
    16fc:	20 83       	st	Z, r18

000016fe <.Loc.31>:
}
    16fe:	00 00       	nop
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <GetDistanceFront>:

int GetDistanceFront(void){
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	6e 97       	sbiw	r28, 0x1e	; 30
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61

0000171a <.Loc.33>:
    int Distance;
    TriggerPulseFront();
    171a:	0e 94 11 0c 	call	0x1822	; 0x1822 <TriggerPulseFront>

0000171e <.Loc.34>:
	...

00001720 <.L3>:
    while ((port_ech_F & (1<<pin_ech_F)) == 0){
    1720:	86 e0       	ldi	r24, 0x06	; 6
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	dc 01       	movw	r26, r24
    1726:	8c 91       	ld	r24, X

00001728 <.Loc.36>:
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	88 70       	andi	r24, 0x08	; 8
    172e:	99 27       	eor	r25, r25

00001730 <.Loc.37>:
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	b1 f3       	breq	.-20     	; 0x1720 <.L3>

00001734 <.Loc.38>:
    }
    TCNT2 = 0;
    1734:	82 eb       	ldi	r24, 0xB2	; 178
    1736:	90 e0       	ldi	r25, 0x00	; 0

00001738 <.Loc.39>:
    1738:	fc 01       	movw	r30, r24
    173a:	10 82       	st	Z, r1

0000173c <.Loc.40>:
    TIFR2 = 1<<TOV2;
    173c:	87 e3       	ldi	r24, 0x37	; 55
    173e:	90 e0       	ldi	r25, 0x00	; 0

00001740 <.Loc.41>:
    1740:	21 e0       	ldi	r18, 0x01	; 1
    1742:	dc 01       	movw	r26, r24
    1744:	2c 93       	st	X, r18

00001746 <.Loc.42>:
    count = 0;
    1746:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <count+0x1>
    174a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <count>

0000174e <.Loc.43>:
	...

00001750 <.L4>:
    while ((port_ech_F & (1<<pin_ech_F)) != 0){
    1750:	86 e0       	ldi	r24, 0x06	; 6
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	fc 01       	movw	r30, r24
    1756:	80 81       	ld	r24, Z

00001758 <.Loc.45>:
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	88 70       	andi	r24, 0x08	; 8
    175e:	99 27       	eor	r25, r25

00001760 <.Loc.46>:
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	b1 f7       	brne	.-20     	; 0x1750 <.L4>

00001764 <.Loc.47>:

    }
    Distance = count;
    1764:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <count>
    1768:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <count+0x1>
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	89 83       	std	Y+1, r24	; 0x01

00001770 <.Loc.48>:
    Distance = Distance * 0.008 * 343;
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	9c 01       	movw	r18, r24
    1776:	99 0f       	add	r25, r25
    1778:	44 0b       	sbc	r20, r20
    177a:	55 0b       	sbc	r21, r21
    177c:	2f 87       	std	Y+15, r18	; 0x0f
    177e:	38 8b       	std	Y+16, r19	; 0x10
    1780:	49 8b       	std	Y+17, r20	; 0x11
    1782:	5a 8b       	std	Y+18, r21	; 0x12
    1784:	6f 85       	ldd	r22, Y+15	; 0x0f
    1786:	78 89       	ldd	r23, Y+16	; 0x10
    1788:	89 89       	ldd	r24, Y+17	; 0x11
    178a:	9a 89       	ldd	r25, Y+18	; 0x12
    178c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__floatsisf>
    1790:	6b 83       	std	Y+3, r22	; 0x03
    1792:	7c 83       	std	Y+4, r23	; 0x04
    1794:	8d 83       	std	Y+5, r24	; 0x05
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	2f e6       	ldi	r18, 0x6F	; 111
    179a:	32 e1       	ldi	r19, 0x12	; 18
    179c:	43 e0       	ldi	r20, 0x03	; 3
    179e:	5c e3       	ldi	r21, 0x3C	; 60
    17a0:	6b 81       	ldd	r22, Y+3	; 0x03
    17a2:	7c 81       	ldd	r23, Y+4	; 0x04
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    17ac:	6b 8b       	std	Y+19, r22	; 0x13
    17ae:	7c 8b       	std	Y+20, r23	; 0x14
    17b0:	8d 8b       	std	Y+21, r24	; 0x15
    17b2:	9e 8b       	std	Y+22, r25	; 0x16
    17b4:	8b 89       	ldd	r24, Y+19	; 0x13
    17b6:	9c 89       	ldd	r25, Y+20	; 0x14
    17b8:	ad 89       	ldd	r26, Y+21	; 0x15
    17ba:	be 89       	ldd	r27, Y+22	; 0x16
    17bc:	8f 83       	std	Y+7, r24	; 0x07
    17be:	98 87       	std	Y+8, r25	; 0x08
    17c0:	a9 87       	std	Y+9, r26	; 0x09
    17c2:	ba 87       	std	Y+10, r27	; 0x0a

000017c4 <.Loc.49>:
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e8       	ldi	r19, 0x80	; 128
    17c8:	4b ea       	ldi	r20, 0xAB	; 171
    17ca:	53 e4       	ldi	r21, 0x43	; 67
    17cc:	6f 81       	ldd	r22, Y+7	; 0x07
    17ce:	78 85       	ldd	r23, Y+8	; 0x08
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    17d8:	6f 8b       	std	Y+23, r22	; 0x17
    17da:	78 8f       	std	Y+24, r23	; 0x18
    17dc:	89 8f       	std	Y+25, r24	; 0x19
    17de:	9a 8f       	std	Y+26, r25	; 0x1a
    17e0:	2f 89       	ldd	r18, Y+23	; 0x17
    17e2:	38 8d       	ldd	r19, Y+24	; 0x18
    17e4:	49 8d       	ldd	r20, Y+25	; 0x19
    17e6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    17e8:	2b 87       	std	Y+11, r18	; 0x0b
    17ea:	3c 87       	std	Y+12, r19	; 0x0c
    17ec:	4d 87       	std	Y+13, r20	; 0x0d
    17ee:	5e 87       	std	Y+14, r21	; 0x0e

000017f0 <.Loc.50>:
    17f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f8:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fixsfsi>
    17fc:	6b 8f       	std	Y+27, r22	; 0x1b
    17fe:	7c 8f       	std	Y+28, r23	; 0x1c
    1800:	8d 8f       	std	Y+29, r24	; 0x1d
    1802:	9e 8f       	std	Y+30, r25	; 0x1e
    1804:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1806:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1808:	5a 83       	std	Y+2, r21	; 0x02
    180a:	49 83       	std	Y+1, r20	; 0x01

0000180c <.Loc.51>:
    //340  m/s
    //34 cm / ms
    //340   mm / ms
    //0.34  mm / us
    //5.44 * count geeft distance in mm
    return Distance;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02

00001810 <.Loc.52>:
}
    1810:	6e 96       	adiw	r28, 0x1e	; 30
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <TriggerPulseFront>:
void TriggerPulseFront (void){
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	c8 54       	subi	r28, 0x48	; 72
    182c:	d1 09       	sbc	r29, r1
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61

00001838 <.Loc.54>:
    port_tri_F |= (1<<pin_tri_F);
    1838:	82 e2       	ldi	r24, 0x22	; 34
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	dc 01       	movw	r26, r24
    183e:	2c 91       	ld	r18, X
    1840:	82 e2       	ldi	r24, 0x22	; 34
    1842:	90 e0       	ldi	r25, 0x00	; 0

00001844 <.Loc.55>:
    1844:	21 60       	ori	r18, 0x01	; 1
    1846:	fc 01       	movw	r30, r24
    1848:	20 83       	st	Z, r18
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e2       	ldi	r26, 0x20	; 32
    1850:	b1 e4       	ldi	r27, 0x41	; 65
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	ab 83       	std	Y+3, r26	; 0x03
    1858:	bc 83       	std	Y+4, r27	; 0x04

0000185a <.LBB56>:
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    185a:	2b ea       	ldi	r18, 0xAB	; 171
    185c:	3a ea       	ldi	r19, 0xAA	; 170
    185e:	4a ea       	ldi	r20, 0xAA	; 170
    1860:	50 e4       	ldi	r21, 0x40	; 64
    1862:	69 81       	ldd	r22, Y+1	; 0x01
    1864:	7a 81       	ldd	r23, Y+2	; 0x02
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    186e:	6d a3       	std	Y+37, r22	; 0x25
    1870:	7e a3       	std	Y+38, r23	; 0x26
    1872:	8f a3       	std	Y+39, r24	; 0x27
    1874:	98 a7       	std	Y+40, r25	; 0x28
    1876:	8d a1       	ldd	r24, Y+37	; 0x25
    1878:	9e a1       	ldd	r25, Y+38	; 0x26
    187a:	af a1       	ldd	r26, Y+39	; 0x27
    187c:	b8 a5       	ldd	r27, Y+40	; 0x28
    187e:	8d 83       	std	Y+5, r24	; 0x05
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	af 83       	std	Y+7, r26	; 0x07
    1884:	b8 87       	std	Y+8, r27	; 0x08

00001886 <.Loc.57>:
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e8       	ldi	r20, 0x80	; 128
    188c:	50 e4       	ldi	r21, 0x40	; 64
    188e:	69 81       	ldd	r22, Y+1	; 0x01
    1890:	7a 81       	ldd	r23, Y+2	; 0x02
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    189a:	69 a7       	std	Y+41, r22	; 0x29
    189c:	7a a7       	std	Y+42, r23	; 0x2a
    189e:	8b a7       	std	Y+43, r24	; 0x2b
    18a0:	9c a7       	std	Y+44, r25	; 0x2c
    18a2:	89 a5       	ldd	r24, Y+41	; 0x29
    18a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a6:	ab a5       	ldd	r26, Y+43	; 0x2b
    18a8:	bc a5       	ldd	r27, Y+44	; 0x2c
    18aa:	89 87       	std	Y+9, r24	; 0x09
    18ac:	9a 87       	std	Y+10, r25	; 0x0a
    18ae:	ab 87       	std	Y+11, r26	; 0x0b
    18b0:	bc 87       	std	Y+12, r27	; 0x0c

000018b2 <.Loc.58>:
	if (__tmp < 1.0)
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	6d 81       	ldd	r22, Y+5	; 0x05
    18bc:	7e 81       	ldd	r23, Y+6	; 0x06
    18be:	8f 81       	ldd	r24, Y+7	; 0x07
    18c0:	98 85       	ldd	r25, Y+8	; 0x08
    18c2:	0e 94 49 12 	call	0x2492	; 0x2492 <__cmpsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	1c f4       	brge	.+6      	; 0x18d0 <.L28>

000018ca <.Loc.59>:
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	8d 87       	std	Y+13, r24	; 0x0d
    18ce:	e8 c0       	rjmp	.+464    	; 0x1aa0 <.L9>

000018d0 <.L28>:
	else if (__tmp2 > 65535)
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	3f ef       	ldi	r19, 0xFF	; 255
    18d4:	4f e7       	ldi	r20, 0x7F	; 127
    18d6:	57 e4       	ldi	r21, 0x47	; 71
    18d8:	69 85       	ldd	r22, Y+9	; 0x09
    18da:	7a 85       	ldd	r23, Y+10	; 0x0a
    18dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    18de:	9c 85       	ldd	r25, Y+12	; 0x0c
    18e0:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    18e4:	88 23       	and	r24, r24
    18e6:	09 f0       	breq	.+2      	; 0x18ea <L0^A>

000018e8 <L0^A>:
    18e8:	0c f4       	brge	.+2      	; 0x18ec <.Loc.61>

000018ea <L0^A>:
    18ea:	9f c0       	rjmp	.+318    	; 0x1a2a <.L29>

000018ec <.Loc.61>:
	{
		_delay_ms(__us / 1000.0);
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	4a e7       	ldi	r20, 0x7A	; 122
    18f2:	54 e4       	ldi	r21, 0x44	; 68
    18f4:	69 81       	ldd	r22, Y+1	; 0x01
    18f6:	7a 81       	ldd	r23, Y+2	; 0x02
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	0e 94 4e 12 	call	0x249c	; 0x249c <__divsf3>
    1900:	6d a7       	std	Y+45, r22	; 0x2d
    1902:	7e a7       	std	Y+46, r23	; 0x2e
    1904:	8f a7       	std	Y+47, r24	; 0x2f
    1906:	98 ab       	std	Y+48, r25	; 0x30
    1908:	8d a5       	ldd	r24, Y+45	; 0x2d
    190a:	9e a5       	ldd	r25, Y+46	; 0x2e
    190c:	af a5       	ldd	r26, Y+47	; 0x2f
    190e:	b8 a9       	ldd	r27, Y+48	; 0x30
    1910:	8e 87       	std	Y+14, r24	; 0x0e
    1912:	9f 87       	std	Y+15, r25	; 0x0f
    1914:	a8 8b       	std	Y+16, r26	; 0x10
    1916:	b9 8b       	std	Y+17, r27	; 0x11

00001918 <.LBB58>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a e7       	ldi	r20, 0x7A	; 122
    191e:	55 e4       	ldi	r21, 0x45	; 69
    1920:	6e 85       	ldd	r22, Y+14	; 0x0e
    1922:	7f 85       	ldd	r23, Y+15	; 0x0f
    1924:	88 89       	ldd	r24, Y+16	; 0x10
    1926:	99 89       	ldd	r25, Y+17	; 0x11
    1928:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    192c:	69 ab       	std	Y+49, r22	; 0x31
    192e:	7a ab       	std	Y+50, r23	; 0x32
    1930:	8b ab       	std	Y+51, r24	; 0x33
    1932:	9c ab       	std	Y+52, r25	; 0x34
    1934:	89 a9       	ldd	r24, Y+49	; 0x31
    1936:	9a a9       	ldd	r25, Y+50	; 0x32
    1938:	ab a9       	ldd	r26, Y+51	; 0x33
    193a:	bc a9       	ldd	r27, Y+52	; 0x34
    193c:	8a 8b       	std	Y+18, r24	; 0x12
    193e:	9b 8b       	std	Y+19, r25	; 0x13
    1940:	ac 8b       	std	Y+20, r26	; 0x14
    1942:	bd 8b       	std	Y+21, r27	; 0x15

00001944 <.Loc.63>:
	if (__tmp < 1.0)
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	6a 89       	ldd	r22, Y+18	; 0x12
    194e:	7b 89       	ldd	r23, Y+19	; 0x13
    1950:	8c 89       	ldd	r24, Y+20	; 0x14
    1952:	9d 89       	ldd	r25, Y+21	; 0x15
    1954:	0e 94 49 12 	call	0x2492	; 0x2492 <__cmpsf2>
    1958:	88 23       	and	r24, r24
    195a:	2c f4       	brge	.+10     	; 0x1966 <.L30>

0000195c <.Loc.64>:
		__ticks = 1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9f 8b       	std	Y+23, r25	; 0x17
    1962:	8e 8b       	std	Y+22, r24	; 0x16
    1964:	57 c0       	rjmp	.+174    	; 0x1a14 <.L14>

00001966 <.L30>:
	else if (__tmp > 65535)
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	6a 89       	ldd	r22, Y+18	; 0x12
    1970:	7b 89       	ldd	r23, Y+19	; 0x13
    1972:	8c 89       	ldd	r24, Y+20	; 0x14
    1974:	9d 89       	ldd	r25, Y+21	; 0x15
    1976:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    197a:	88 23       	and	r24, r24
    197c:	d9 f1       	breq	.+118    	; 0x19f4 <.L31>
    197e:	d4 f1       	brlt	.+116    	; 0x19f4 <.L31>

00001980 <.Loc.66>:
		__ticks = (uint16_t) (__ms * 10.0);
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e2       	ldi	r20, 0x20	; 32
    1986:	51 e4       	ldi	r21, 0x41	; 65
    1988:	6e 85       	ldd	r22, Y+14	; 0x0e
    198a:	7f 85       	ldd	r23, Y+15	; 0x0f
    198c:	88 89       	ldd	r24, Y+16	; 0x10
    198e:	99 89       	ldd	r25, Y+17	; 0x11
    1990:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1994:	6d ab       	std	Y+53, r22	; 0x35
    1996:	7e ab       	std	Y+54, r23	; 0x36
    1998:	8f ab       	std	Y+55, r24	; 0x37
    199a:	98 af       	std	Y+56, r25	; 0x38
    199c:	8d a9       	ldd	r24, Y+53	; 0x35
    199e:	9e a9       	ldd	r25, Y+54	; 0x36
    19a0:	af a9       	ldd	r26, Y+55	; 0x37
    19a2:	b8 ad       	ldd	r27, Y+56	; 0x38
    19a4:	89 a3       	std	Y+33, r24	; 0x21
    19a6:	9a a3       	std	Y+34, r25	; 0x22
    19a8:	ab a3       	std	Y+35, r26	; 0x23
    19aa:	bc a3       	std	Y+36, r27	; 0x24

000019ac <.Loc.67>:
    19ac:	69 a1       	ldd	r22, Y+33	; 0x21
    19ae:	7a a1       	ldd	r23, Y+34	; 0x22
    19b0:	8b a1       	ldd	r24, Y+35	; 0x23
    19b2:	9c a1       	ldd	r25, Y+36	; 0x24
    19b4:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    19b8:	69 af       	std	Y+57, r22	; 0x39
    19ba:	7a af       	std	Y+58, r23	; 0x3a
    19bc:	8b af       	std	Y+59, r24	; 0x3b
    19be:	9c af       	std	Y+60, r25	; 0x3c
    19c0:	a9 ad       	ldd	r26, Y+57	; 0x39
    19c2:	ba ad       	ldd	r27, Y+58	; 0x3a
    19c4:	bf 8b       	std	Y+23, r27	; 0x17
    19c6:	ae 8b       	std	Y+22, r26	; 0x16

000019c8 <.Loc.68>:
		while(__ticks)
    19c8:	10 c0       	rjmp	.+32     	; 0x19ea <.L17>

000019ca <.L18>:
    19ca:	80 e9       	ldi	r24, 0x90	; 144
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	99 8f       	std	Y+25, r25	; 0x19
    19d0:	88 8f       	std	Y+24, r24	; 0x18

000019d2 <.LBB60>:
    19d2:	88 8d       	ldd	r24, Y+24	; 0x18
    19d4:	99 8d       	ldd	r25, Y+25	; 0x19

000019d6 <.L1^B1>:
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <.L1^B1>
    19da:	99 8f       	std	Y+25, r25	; 0x19
    19dc:	88 8f       	std	Y+24, r24	; 0x18

000019de <.Loc.70>:
	...

000019e0 <.LBE60>:
			__ticks --;
    19e0:	8e 89       	ldd	r24, Y+22	; 0x16
    19e2:	9f 89       	ldd	r25, Y+23	; 0x17
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	9f 8b       	std	Y+23, r25	; 0x17
    19e8:	8e 8b       	std	Y+22, r24	; 0x16

000019ea <.L17>:
		while(__ticks)
    19ea:	8e 89       	ldd	r24, Y+22	; 0x16
    19ec:	9f 89       	ldd	r25, Y+23	; 0x17
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	61 f7       	brne	.-40     	; 0x19ca <.L18>

000019f2 <.Loc.73>:
		return;
    19f2:	56 c0       	rjmp	.+172    	; 0x1aa0 <.L9>

000019f4 <.L31>:
		__ticks = (uint16_t)__tmp;
    19f4:	6a 89       	ldd	r22, Y+18	; 0x12
    19f6:	7b 89       	ldd	r23, Y+19	; 0x13
    19f8:	8c 89       	ldd	r24, Y+20	; 0x14
    19fa:	9d 89       	ldd	r25, Y+21	; 0x15
    19fc:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    1a00:	21 96       	adiw	r28, 0x01	; 1
    1a02:	6c af       	std	Y+60, r22	; 0x3c
    1a04:	7d af       	std	Y+61, r23	; 0x3d
    1a06:	8e af       	std	Y+62, r24	; 0x3e
    1a08:	9f af       	std	Y+63, r25	; 0x3f
    1a0a:	21 97       	sbiw	r28, 0x01	; 1
    1a0c:	ed ad       	ldd	r30, Y+61	; 0x3d
    1a0e:	fe ad       	ldd	r31, Y+62	; 0x3e
    1a10:	ff 8b       	std	Y+23, r31	; 0x17
    1a12:	ee 8b       	std	Y+22, r30	; 0x16

00001a14 <.L14>:
    1a14:	8e 89       	ldd	r24, Y+22	; 0x16
    1a16:	9f 89       	ldd	r25, Y+23	; 0x17
    1a18:	9b 8f       	std	Y+27, r25	; 0x1b
    1a1a:	8a 8f       	std	Y+26, r24	; 0x1a

00001a1c <.LBB62>:
    1a1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a1e:	9b 8d       	ldd	r25, Y+27	; 0x1b

00001a20 <.L1^B2>:
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <.L1^B2>
    1a24:	9b 8f       	std	Y+27, r25	; 0x1b
    1a26:	8a 8f       	std	Y+26, r24	; 0x1a

00001a28 <.Loc.76>:
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
    1a28:	3b c0       	rjmp	.+118    	; 0x1aa0 <.L9>

00001a2a <.L29>:
	}
	else if (__tmp > 255)
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	53 e4       	ldi	r21, 0x43	; 67
    1a32:	6d 81       	ldd	r22, Y+5	; 0x05
    1a34:	7e 81       	ldd	r23, Y+6	; 0x06
    1a36:	8f 81       	ldd	r24, Y+7	; 0x07
    1a38:	98 85       	ldd	r25, Y+8	; 0x08
    1a3a:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	f9 f0       	breq	.+62     	; 0x1a80 <.L32>
    1a42:	f4 f0       	brlt	.+60     	; 0x1a80 <.L32>

00001a44 <.LBB64>:
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1a44:	69 85       	ldd	r22, Y+9	; 0x09
    1a46:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a48:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a4c:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    1a50:	25 96       	adiw	r28, 0x05	; 5
    1a52:	6c af       	std	Y+60, r22	; 0x3c
    1a54:	7d af       	std	Y+61, r23	; 0x3d
    1a56:	8e af       	std	Y+62, r24	; 0x3e
    1a58:	9f af       	std	Y+63, r25	; 0x3f
    1a5a:	25 97       	sbiw	r28, 0x05	; 5
    1a5c:	23 96       	adiw	r28, 0x03	; 3
    1a5e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a60:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a62:	23 97       	sbiw	r28, 0x03	; 3
    1a64:	9d 8f       	std	Y+29, r25	; 0x1d
    1a66:	8c 8f       	std	Y+28, r24	; 0x1c
    1a68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a6c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a6e:	8e 8f       	std	Y+30, r24	; 0x1e

00001a70 <.LBB65>:
	__asm__ volatile (
    1a70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a72:	9f 8d       	ldd	r25, Y+31	; 0x1f

00001a74 <.L1^B3>:
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	f1 f7       	brne	.-4      	; 0x1a74 <.L1^B3>
    1a78:	9f 8f       	std	Y+31, r25	; 0x1f
    1a7a:	8e 8f       	std	Y+30, r24	; 0x1e

00001a7c <.Loc.80>:
	...

00001a7e <.LBE65>:
		_delay_loop_2(__ticks);
		return;
    1a7e:	17 c0       	rjmp	.+46     	; 0x1aae <.L22>

00001a80 <.L32>:
	}
	else
		__ticks = (uint8_t)__tmp;
    1a80:	6d 81       	ldd	r22, Y+5	; 0x05
    1a82:	7e 81       	ldd	r23, Y+6	; 0x06
    1a84:	8f 81       	ldd	r24, Y+7	; 0x07
    1a86:	98 85       	ldd	r25, Y+8	; 0x08
    1a88:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    1a8c:	29 96       	adiw	r28, 0x09	; 9
    1a8e:	6c af       	std	Y+60, r22	; 0x3c
    1a90:	7d af       	std	Y+61, r23	; 0x3d
    1a92:	8e af       	std	Y+62, r24	; 0x3e
    1a94:	9f af       	std	Y+63, r25	; 0x3f
    1a96:	29 97       	sbiw	r28, 0x09	; 9
    1a98:	26 96       	adiw	r28, 0x06	; 6
    1a9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a9c:	26 97       	sbiw	r28, 0x06	; 6
    1a9e:	9d 87       	std	Y+13, r25	; 0x0d

00001aa0 <.L9>:
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	88 a3       	std	Y+32, r24	; 0x20

00001aa4 <.LBB67>:
	__asm__ volatile (
    1aa4:	88 a1       	ldd	r24, Y+32	; 0x20

00001aa6 <.L1^B4>:
    1aa6:	8a 95       	dec	r24
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <.L1^B4>
    1aaa:	88 a3       	std	Y+32, r24	; 0x20

00001aac <.Loc.84>:
	...

00001aae <.L22>:
    _delay_us(10);
    port_tri_F &= (~(1<<pin_tri_F));
    1aae:	82 e2       	ldi	r24, 0x22	; 34
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	2c 91       	ld	r18, X

00001ab6 <.Loc.86>:
    1ab6:	82 e2       	ldi	r24, 0x22	; 34
    1ab8:	90 e0       	ldi	r25, 0x00	; 0

00001aba <.Loc.87>:
    1aba:	2e 7f       	andi	r18, 0xFE	; 254
    1abc:	fc 01       	movw	r30, r24
    1abe:	20 83       	st	Z, r18

00001ac0 <.Loc.88>:
}
    1ac0:	00 00       	nop
    1ac2:	c8 5b       	subi	r28, 0xB8	; 184
    1ac4:	df 4f       	sbci	r29, 0xFF	; 255
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	08 95       	ret

00001ad6 <GetDistanceLeft>:

int GetDistanceLeft(void){
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	6e 97       	sbiw	r28, 0x1e	; 30
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61

00001aea <.Loc.90>:
    int Distance;
    TriggerPulseLeft();
    1aea:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <TriggerPulseLeft>

00001aee <.Loc.91>:
	...

00001af0 <.L34>:
    while ((port_ech_L & (1<<pin_ech_L)) == 0){
    1af0:	86 e0       	ldi	r24, 0x06	; 6
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	dc 01       	movw	r26, r24
    1af6:	8c 91       	ld	r24, X

00001af8 <.Loc.93>:
    1af8:	88 2f       	mov	r24, r24
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	84 70       	andi	r24, 0x04	; 4
    1afe:	99 27       	eor	r25, r25

00001b00 <.Loc.94>:
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	b1 f3       	breq	.-20     	; 0x1af0 <.L34>

00001b04 <.Loc.95>:
    }
    TCNT2 = 0;
    1b04:	82 eb       	ldi	r24, 0xB2	; 178
    1b06:	90 e0       	ldi	r25, 0x00	; 0

00001b08 <.Loc.96>:
    1b08:	fc 01       	movw	r30, r24
    1b0a:	10 82       	st	Z, r1

00001b0c <.Loc.97>:
    TIFR2 = 1<<TOV2;
    1b0c:	87 e3       	ldi	r24, 0x37	; 55
    1b0e:	90 e0       	ldi	r25, 0x00	; 0

00001b10 <.Loc.98>:
    1b10:	21 e0       	ldi	r18, 0x01	; 1
    1b12:	dc 01       	movw	r26, r24
    1b14:	2c 93       	st	X, r18

00001b16 <.Loc.99>:
    count = 0;
    1b16:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <count+0x1>
    1b1a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <count>

00001b1e <.Loc.100>:
	...

00001b20 <.L35>:
    while ((port_ech_L & (1<<pin_ech_L)) != 0){
    1b20:	86 e0       	ldi	r24, 0x06	; 6
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	fc 01       	movw	r30, r24
    1b26:	80 81       	ld	r24, Z

00001b28 <.Loc.102>:
    1b28:	88 2f       	mov	r24, r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	84 70       	andi	r24, 0x04	; 4
    1b2e:	99 27       	eor	r25, r25

00001b30 <.Loc.103>:
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	b1 f7       	brne	.-20     	; 0x1b20 <.L35>

00001b34 <.Loc.104>:

    }
    Distance = count;
    1b34:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <count>
    1b38:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <count+0x1>
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01

00001b40 <.Loc.105>:
    Distance = Distance * 0.008 * 343;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	9c 01       	movw	r18, r24
    1b46:	99 0f       	add	r25, r25
    1b48:	44 0b       	sbc	r20, r20
    1b4a:	55 0b       	sbc	r21, r21
    1b4c:	2f 87       	std	Y+15, r18	; 0x0f
    1b4e:	38 8b       	std	Y+16, r19	; 0x10
    1b50:	49 8b       	std	Y+17, r20	; 0x11
    1b52:	5a 8b       	std	Y+18, r21	; 0x12
    1b54:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b56:	78 89       	ldd	r23, Y+16	; 0x10
    1b58:	89 89       	ldd	r24, Y+17	; 0x11
    1b5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b5c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__floatsisf>
    1b60:	6b 83       	std	Y+3, r22	; 0x03
    1b62:	7c 83       	std	Y+4, r23	; 0x04
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	2f e6       	ldi	r18, 0x6F	; 111
    1b6a:	32 e1       	ldi	r19, 0x12	; 18
    1b6c:	43 e0       	ldi	r20, 0x03	; 3
    1b6e:	5c e3       	ldi	r21, 0x3C	; 60
    1b70:	6b 81       	ldd	r22, Y+3	; 0x03
    1b72:	7c 81       	ldd	r23, Y+4	; 0x04
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1b7c:	6b 8b       	std	Y+19, r22	; 0x13
    1b7e:	7c 8b       	std	Y+20, r23	; 0x14
    1b80:	8d 8b       	std	Y+21, r24	; 0x15
    1b82:	9e 8b       	std	Y+22, r25	; 0x16
    1b84:	8b 89       	ldd	r24, Y+19	; 0x13
    1b86:	9c 89       	ldd	r25, Y+20	; 0x14
    1b88:	ad 89       	ldd	r26, Y+21	; 0x15
    1b8a:	be 89       	ldd	r27, Y+22	; 0x16
    1b8c:	8f 83       	std	Y+7, r24	; 0x07
    1b8e:	98 87       	std	Y+8, r25	; 0x08
    1b90:	a9 87       	std	Y+9, r26	; 0x09
    1b92:	ba 87       	std	Y+10, r27	; 0x0a

00001b94 <.Loc.106>:
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e8       	ldi	r19, 0x80	; 128
    1b98:	4b ea       	ldi	r20, 0xAB	; 171
    1b9a:	53 e4       	ldi	r21, 0x43	; 67
    1b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ba0:	89 85       	ldd	r24, Y+9	; 0x09
    1ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba4:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1ba8:	6f 8b       	std	Y+23, r22	; 0x17
    1baa:	78 8f       	std	Y+24, r23	; 0x18
    1bac:	89 8f       	std	Y+25, r24	; 0x19
    1bae:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb0:	2f 89       	ldd	r18, Y+23	; 0x17
    1bb2:	38 8d       	ldd	r19, Y+24	; 0x18
    1bb4:	49 8d       	ldd	r20, Y+25	; 0x19
    1bb6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1bb8:	2b 87       	std	Y+11, r18	; 0x0b
    1bba:	3c 87       	std	Y+12, r19	; 0x0c
    1bbc:	4d 87       	std	Y+13, r20	; 0x0d
    1bbe:	5e 87       	std	Y+14, r21	; 0x0e

00001bc0 <.Loc.107>:
    1bc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc8:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fixsfsi>
    1bcc:	6b 8f       	std	Y+27, r22	; 0x1b
    1bce:	7c 8f       	std	Y+28, r23	; 0x1c
    1bd0:	8d 8f       	std	Y+29, r24	; 0x1d
    1bd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1bd4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1bd6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1bd8:	5a 83       	std	Y+2, r21	; 0x02
    1bda:	49 83       	std	Y+1, r20	; 0x01

00001bdc <.Loc.108>:
    //340  m/s
    //34 cm / ms
    //340   mm / ms
    //0.34  mm / us
    //5.44 * count geeft distance in mm
    return Distance;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02

00001be0 <.Loc.109>:
}
    1be0:	6e 96       	adiw	r28, 0x1e	; 30
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	08 95       	ret

00001bf2 <TriggerPulseLeft>:
void TriggerPulseLeft (void){
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	c8 54       	subi	r28, 0x48	; 72
    1bfc:	d1 09       	sbc	r29, r1
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61

00001c08 <.Loc.111>:
    port_tri_L |= (1<<pin_tri_L);
    1c08:	82 e2       	ldi	r24, 0x22	; 34
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	2c 91       	ld	r18, X
    1c10:	82 e2       	ldi	r24, 0x22	; 34
    1c12:	90 e0       	ldi	r25, 0x00	; 0

00001c14 <.Loc.112>:
    1c14:	24 60       	ori	r18, 0x04	; 4
    1c16:	fc 01       	movw	r30, r24
    1c18:	20 83       	st	Z, r18
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 e2       	ldi	r26, 0x20	; 32
    1c20:	b1 e4       	ldi	r27, 0x41	; 65
    1c22:	89 83       	std	Y+1, r24	; 0x01
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	ab 83       	std	Y+3, r26	; 0x03
    1c28:	bc 83       	std	Y+4, r27	; 0x04

00001c2a <.LBB69>:
	__tmp = ((F_CPU) / 3e6) * __us;
    1c2a:	2b ea       	ldi	r18, 0xAB	; 171
    1c2c:	3a ea       	ldi	r19, 0xAA	; 170
    1c2e:	4a ea       	ldi	r20, 0xAA	; 170
    1c30:	50 e4       	ldi	r21, 0x40	; 64
    1c32:	69 81       	ldd	r22, Y+1	; 0x01
    1c34:	7a 81       	ldd	r23, Y+2	; 0x02
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3a:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1c3e:	6d a3       	std	Y+37, r22	; 0x25
    1c40:	7e a3       	std	Y+38, r23	; 0x26
    1c42:	8f a3       	std	Y+39, r24	; 0x27
    1c44:	98 a7       	std	Y+40, r25	; 0x28
    1c46:	8d a1       	ldd	r24, Y+37	; 0x25
    1c48:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4a:	af a1       	ldd	r26, Y+39	; 0x27
    1c4c:	b8 a5       	ldd	r27, Y+40	; 0x28
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	9e 83       	std	Y+6, r25	; 0x06
    1c52:	af 83       	std	Y+7, r26	; 0x07
    1c54:	b8 87       	std	Y+8, r27	; 0x08

00001c56 <.Loc.114>:
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	50 e4       	ldi	r21, 0x40	; 64
    1c5e:	69 81       	ldd	r22, Y+1	; 0x01
    1c60:	7a 81       	ldd	r23, Y+2	; 0x02
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1c6a:	69 a7       	std	Y+41, r22	; 0x29
    1c6c:	7a a7       	std	Y+42, r23	; 0x2a
    1c6e:	8b a7       	std	Y+43, r24	; 0x2b
    1c70:	9c a7       	std	Y+44, r25	; 0x2c
    1c72:	89 a5       	ldd	r24, Y+41	; 0x29
    1c74:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c76:	ab a5       	ldd	r26, Y+43	; 0x2b
    1c78:	bc a5       	ldd	r27, Y+44	; 0x2c
    1c7a:	89 87       	std	Y+9, r24	; 0x09
    1c7c:	9a 87       	std	Y+10, r25	; 0x0a
    1c7e:	ab 87       	std	Y+11, r26	; 0x0b
    1c80:	bc 87       	std	Y+12, r27	; 0x0c

00001c82 <.Loc.115>:
	if (__tmp < 1.0)
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c8c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c90:	98 85       	ldd	r25, Y+8	; 0x08
    1c92:	0e 94 49 12 	call	0x2492	; 0x2492 <__cmpsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	1c f4       	brge	.+6      	; 0x1ca0 <.L59>

00001c9a <.Loc.116>:
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	8d 87       	std	Y+13, r24	; 0x0d
    1c9e:	e8 c0       	rjmp	.+464    	; 0x1e70 <.L40>

00001ca0 <.L59>:
	else if (__tmp2 > 65535)
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	3f ef       	ldi	r19, 0xFF	; 255
    1ca4:	4f e7       	ldi	r20, 0x7F	; 127
    1ca6:	57 e4       	ldi	r21, 0x47	; 71
    1ca8:	69 85       	ldd	r22, Y+9	; 0x09
    1caa:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cac:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cae:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cb0:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <L0^A>

00001cb8 <L0^A>:
    1cb8:	0c f4       	brge	.+2      	; 0x1cbc <.Loc.118>

00001cba <L0^A>:
    1cba:	9f c0       	rjmp	.+318    	; 0x1dfa <.L60>

00001cbc <.Loc.118>:
		_delay_ms(__us / 1000.0);
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	4a e7       	ldi	r20, 0x7A	; 122
    1cc2:	54 e4       	ldi	r21, 0x44	; 68
    1cc4:	69 81       	ldd	r22, Y+1	; 0x01
    1cc6:	7a 81       	ldd	r23, Y+2	; 0x02
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	0e 94 4e 12 	call	0x249c	; 0x249c <__divsf3>
    1cd0:	6d a7       	std	Y+45, r22	; 0x2d
    1cd2:	7e a7       	std	Y+46, r23	; 0x2e
    1cd4:	8f a7       	std	Y+47, r24	; 0x2f
    1cd6:	98 ab       	std	Y+48, r25	; 0x30
    1cd8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cda:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cdc:	af a5       	ldd	r26, Y+47	; 0x2f
    1cde:	b8 a9       	ldd	r27, Y+48	; 0x30
    1ce0:	8e 87       	std	Y+14, r24	; 0x0e
    1ce2:	9f 87       	std	Y+15, r25	; 0x0f
    1ce4:	a8 8b       	std	Y+16, r26	; 0x10
    1ce6:	b9 8b       	std	Y+17, r27	; 0x11

00001ce8 <.LBB71>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a e7       	ldi	r20, 0x7A	; 122
    1cee:	55 e4       	ldi	r21, 0x45	; 69
    1cf0:	6e 85       	ldd	r22, Y+14	; 0x0e
    1cf2:	7f 85       	ldd	r23, Y+15	; 0x0f
    1cf4:	88 89       	ldd	r24, Y+16	; 0x10
    1cf6:	99 89       	ldd	r25, Y+17	; 0x11
    1cf8:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1cfc:	69 ab       	std	Y+49, r22	; 0x31
    1cfe:	7a ab       	std	Y+50, r23	; 0x32
    1d00:	8b ab       	std	Y+51, r24	; 0x33
    1d02:	9c ab       	std	Y+52, r25	; 0x34
    1d04:	89 a9       	ldd	r24, Y+49	; 0x31
    1d06:	9a a9       	ldd	r25, Y+50	; 0x32
    1d08:	ab a9       	ldd	r26, Y+51	; 0x33
    1d0a:	bc a9       	ldd	r27, Y+52	; 0x34
    1d0c:	8a 8b       	std	Y+18, r24	; 0x12
    1d0e:	9b 8b       	std	Y+19, r25	; 0x13
    1d10:	ac 8b       	std	Y+20, r26	; 0x14
    1d12:	bd 8b       	std	Y+21, r27	; 0x15

00001d14 <.Loc.120>:
	if (__tmp < 1.0)
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e8       	ldi	r20, 0x80	; 128
    1d1a:	5f e3       	ldi	r21, 0x3F	; 63
    1d1c:	6a 89       	ldd	r22, Y+18	; 0x12
    1d1e:	7b 89       	ldd	r23, Y+19	; 0x13
    1d20:	8c 89       	ldd	r24, Y+20	; 0x14
    1d22:	9d 89       	ldd	r25, Y+21	; 0x15
    1d24:	0e 94 49 12 	call	0x2492	; 0x2492 <__cmpsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <.L61>

00001d2c <.Loc.121>:
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	9f 8b       	std	Y+23, r25	; 0x17
    1d32:	8e 8b       	std	Y+22, r24	; 0x16
    1d34:	57 c0       	rjmp	.+174    	; 0x1de4 <.L45>

00001d36 <.L61>:
	else if (__tmp > 65535)
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	3f ef       	ldi	r19, 0xFF	; 255
    1d3a:	4f e7       	ldi	r20, 0x7F	; 127
    1d3c:	57 e4       	ldi	r21, 0x47	; 71
    1d3e:	6a 89       	ldd	r22, Y+18	; 0x12
    1d40:	7b 89       	ldd	r23, Y+19	; 0x13
    1d42:	8c 89       	ldd	r24, Y+20	; 0x14
    1d44:	9d 89       	ldd	r25, Y+21	; 0x15
    1d46:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	d9 f1       	breq	.+118    	; 0x1dc4 <.L62>
    1d4e:	d4 f1       	brlt	.+116    	; 0x1dc4 <.L62>

00001d50 <.Loc.123>:
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	6e 85       	ldd	r22, Y+14	; 0x0e
    1d5a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1d5c:	88 89       	ldd	r24, Y+16	; 0x10
    1d5e:	99 89       	ldd	r25, Y+17	; 0x11
    1d60:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1d64:	6d ab       	std	Y+53, r22	; 0x35
    1d66:	7e ab       	std	Y+54, r23	; 0x36
    1d68:	8f ab       	std	Y+55, r24	; 0x37
    1d6a:	98 af       	std	Y+56, r25	; 0x38
    1d6c:	8d a9       	ldd	r24, Y+53	; 0x35
    1d6e:	9e a9       	ldd	r25, Y+54	; 0x36
    1d70:	af a9       	ldd	r26, Y+55	; 0x37
    1d72:	b8 ad       	ldd	r27, Y+56	; 0x38
    1d74:	89 a3       	std	Y+33, r24	; 0x21
    1d76:	9a a3       	std	Y+34, r25	; 0x22
    1d78:	ab a3       	std	Y+35, r26	; 0x23
    1d7a:	bc a3       	std	Y+36, r27	; 0x24

00001d7c <.Loc.124>:
    1d7c:	69 a1       	ldd	r22, Y+33	; 0x21
    1d7e:	7a a1       	ldd	r23, Y+34	; 0x22
    1d80:	8b a1       	ldd	r24, Y+35	; 0x23
    1d82:	9c a1       	ldd	r25, Y+36	; 0x24
    1d84:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    1d88:	69 af       	std	Y+57, r22	; 0x39
    1d8a:	7a af       	std	Y+58, r23	; 0x3a
    1d8c:	8b af       	std	Y+59, r24	; 0x3b
    1d8e:	9c af       	std	Y+60, r25	; 0x3c
    1d90:	a9 ad       	ldd	r26, Y+57	; 0x39
    1d92:	ba ad       	ldd	r27, Y+58	; 0x3a
    1d94:	bf 8b       	std	Y+23, r27	; 0x17
    1d96:	ae 8b       	std	Y+22, r26	; 0x16

00001d98 <.Loc.125>:
		while(__ticks)
    1d98:	10 c0       	rjmp	.+32     	; 0x1dba <.L48>

00001d9a <.L49>:
    1d9a:	80 e9       	ldi	r24, 0x90	; 144
    1d9c:	91 e0       	ldi	r25, 0x01	; 1
    1d9e:	99 8f       	std	Y+25, r25	; 0x19
    1da0:	88 8f       	std	Y+24, r24	; 0x18

00001da2 <.LBB73>:
	__asm__ volatile (
    1da2:	88 8d       	ldd	r24, Y+24	; 0x18
    1da4:	99 8d       	ldd	r25, Y+25	; 0x19

00001da6 <.L1^B5>:
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <.L1^B5>
    1daa:	99 8f       	std	Y+25, r25	; 0x19
    1dac:	88 8f       	std	Y+24, r24	; 0x18

00001dae <.Loc.127>:
	...

00001db0 <.LBE73>:
			__ticks --;
    1db0:	8e 89       	ldd	r24, Y+22	; 0x16
    1db2:	9f 89       	ldd	r25, Y+23	; 0x17
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	9f 8b       	std	Y+23, r25	; 0x17
    1db8:	8e 8b       	std	Y+22, r24	; 0x16

00001dba <.L48>:
		while(__ticks)
    1dba:	8e 89       	ldd	r24, Y+22	; 0x16
    1dbc:	9f 89       	ldd	r25, Y+23	; 0x17
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	61 f7       	brne	.-40     	; 0x1d9a <.L49>

00001dc2 <.Loc.130>:
		return;
    1dc2:	56 c0       	rjmp	.+172    	; 0x1e70 <.L40>

00001dc4 <.L62>:
		__ticks = (uint16_t)__tmp;
    1dc4:	6a 89       	ldd	r22, Y+18	; 0x12
    1dc6:	7b 89       	ldd	r23, Y+19	; 0x13
    1dc8:	8c 89       	ldd	r24, Y+20	; 0x14
    1dca:	9d 89       	ldd	r25, Y+21	; 0x15
    1dcc:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    1dd0:	21 96       	adiw	r28, 0x01	; 1
    1dd2:	6c af       	std	Y+60, r22	; 0x3c
    1dd4:	7d af       	std	Y+61, r23	; 0x3d
    1dd6:	8e af       	std	Y+62, r24	; 0x3e
    1dd8:	9f af       	std	Y+63, r25	; 0x3f
    1dda:	21 97       	sbiw	r28, 0x01	; 1
    1ddc:	ed ad       	ldd	r30, Y+61	; 0x3d
    1dde:	fe ad       	ldd	r31, Y+62	; 0x3e
    1de0:	ff 8b       	std	Y+23, r31	; 0x17
    1de2:	ee 8b       	std	Y+22, r30	; 0x16

00001de4 <.L45>:
    1de4:	8e 89       	ldd	r24, Y+22	; 0x16
    1de6:	9f 89       	ldd	r25, Y+23	; 0x17
    1de8:	9b 8f       	std	Y+27, r25	; 0x1b
    1dea:	8a 8f       	std	Y+26, r24	; 0x1a

00001dec <.LBB75>:
    1dec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dee:	9b 8d       	ldd	r25, Y+27	; 0x1b

00001df0 <.L1^B6>:
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <.L1^B6>
    1df4:	9b 8f       	std	Y+27, r25	; 0x1b
    1df6:	8a 8f       	std	Y+26, r24	; 0x1a

00001df8 <.Loc.133>:
}
    1df8:	3b c0       	rjmp	.+118    	; 0x1e70 <.L40>

00001dfa <.L60>:
	else if (__tmp > 255)
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	53 e4       	ldi	r21, 0x43	; 67
    1e02:	6d 81       	ldd	r22, Y+5	; 0x05
    1e04:	7e 81       	ldd	r23, Y+6	; 0x06
    1e06:	8f 81       	ldd	r24, Y+7	; 0x07
    1e08:	98 85       	ldd	r25, Y+8	; 0x08
    1e0a:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    1e0e:	88 23       	and	r24, r24
    1e10:	f9 f0       	breq	.+62     	; 0x1e50 <.L63>
    1e12:	f4 f0       	brlt	.+60     	; 0x1e50 <.L63>

00001e14 <.LBB77>:
		uint16_t __ticks=(uint16_t)__tmp2;
    1e14:	69 85       	ldd	r22, Y+9	; 0x09
    1e16:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e1c:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    1e20:	25 96       	adiw	r28, 0x05	; 5
    1e22:	6c af       	std	Y+60, r22	; 0x3c
    1e24:	7d af       	std	Y+61, r23	; 0x3d
    1e26:	8e af       	std	Y+62, r24	; 0x3e
    1e28:	9f af       	std	Y+63, r25	; 0x3f
    1e2a:	25 97       	sbiw	r28, 0x05	; 5
    1e2c:	23 96       	adiw	r28, 0x03	; 3
    1e2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e30:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e32:	23 97       	sbiw	r28, 0x03	; 3
    1e34:	9d 8f       	std	Y+29, r25	; 0x1d
    1e36:	8c 8f       	std	Y+28, r24	; 0x1c
    1e38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1e3e:	8e 8f       	std	Y+30, r24	; 0x1e

00001e40 <.LBB78>:
	__asm__ volatile (
    1e40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e42:	9f 8d       	ldd	r25, Y+31	; 0x1f

00001e44 <.L1^B7>:
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <.L1^B7>
    1e48:	9f 8f       	std	Y+31, r25	; 0x1f
    1e4a:	8e 8f       	std	Y+30, r24	; 0x1e

00001e4c <.Loc.137>:
	...

00001e4e <.LBE78>:
		return;
    1e4e:	17 c0       	rjmp	.+46     	; 0x1e7e <.L53>

00001e50 <.L63>:
		__ticks = (uint8_t)__tmp;
    1e50:	6d 81       	ldd	r22, Y+5	; 0x05
    1e52:	7e 81       	ldd	r23, Y+6	; 0x06
    1e54:	8f 81       	ldd	r24, Y+7	; 0x07
    1e56:	98 85       	ldd	r25, Y+8	; 0x08
    1e58:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    1e5c:	29 96       	adiw	r28, 0x09	; 9
    1e5e:	6c af       	std	Y+60, r22	; 0x3c
    1e60:	7d af       	std	Y+61, r23	; 0x3d
    1e62:	8e af       	std	Y+62, r24	; 0x3e
    1e64:	9f af       	std	Y+63, r25	; 0x3f
    1e66:	29 97       	sbiw	r28, 0x09	; 9
    1e68:	26 96       	adiw	r28, 0x06	; 6
    1e6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e6c:	26 97       	sbiw	r28, 0x06	; 6
    1e6e:	9d 87       	std	Y+13, r25	; 0x0d

00001e70 <.L40>:
    1e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e72:	88 a3       	std	Y+32, r24	; 0x20

00001e74 <.LBB80>:
	__asm__ volatile (
    1e74:	88 a1       	ldd	r24, Y+32	; 0x20

00001e76 <.L1^B8>:
    1e76:	8a 95       	dec	r24
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <.L1^B8>
    1e7a:	88 a3       	std	Y+32, r24	; 0x20

00001e7c <.Loc.141>:
	...

00001e7e <.L53>:
    _delay_us(10);
    port_tri_L &= (~(1<<pin_tri_L));
    1e7e:	82 e2       	ldi	r24, 0x22	; 34
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	dc 01       	movw	r26, r24
    1e84:	2c 91       	ld	r18, X

00001e86 <.Loc.143>:
    1e86:	82 e2       	ldi	r24, 0x22	; 34
    1e88:	90 e0       	ldi	r25, 0x00	; 0

00001e8a <.Loc.144>:
    1e8a:	2b 7f       	andi	r18, 0xFB	; 251
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	20 83       	st	Z, r18

00001e90 <.Loc.145>:
}
    1e90:	00 00       	nop
    1e92:	c8 5b       	subi	r28, 0xB8	; 184
    1e94:	df 4f       	sbci	r29, 0xFF	; 255
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	08 95       	ret

00001ea6 <GetDistanceRight>:

int GetDistanceRight(void){
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	6e 97       	sbiw	r28, 0x1e	; 30
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61

00001eba <.Loc.147>:
    int Distance;
    TriggerPulseRight();
    1eba:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <TriggerPulseRight>

00001ebe <.Loc.148>:
	...

00001ec0 <.L65>:
    while ((port_ech_R & (1<<pin_ech_R)) == 0){
    1ec0:	86 e0       	ldi	r24, 0x06	; 6
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	8c 91       	ld	r24, X

00001ec8 <.Loc.150>:
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	82 70       	andi	r24, 0x02	; 2
    1ece:	99 27       	eor	r25, r25

00001ed0 <.Loc.151>:
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	b1 f3       	breq	.-20     	; 0x1ec0 <.L65>

00001ed4 <.Loc.152>:
    }
    TCNT2 = 0;
    1ed4:	82 eb       	ldi	r24, 0xB2	; 178
    1ed6:	90 e0       	ldi	r25, 0x00	; 0

00001ed8 <.Loc.153>:
    1ed8:	fc 01       	movw	r30, r24
    1eda:	10 82       	st	Z, r1

00001edc <.Loc.154>:
    TIFR2 = 1<<TOV2;
    1edc:	87 e3       	ldi	r24, 0x37	; 55
    1ede:	90 e0       	ldi	r25, 0x00	; 0

00001ee0 <.Loc.155>:
    1ee0:	21 e0       	ldi	r18, 0x01	; 1
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	2c 93       	st	X, r18

00001ee6 <.Loc.156>:
    count = 0;
    1ee6:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <count+0x1>
    1eea:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <count>

00001eee <.Loc.157>:
	...

00001ef0 <.L66>:
    while ((port_ech_R & (1<<pin_ech_R)) != 0){
    1ef0:	86 e0       	ldi	r24, 0x06	; 6
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	80 81       	ld	r24, Z

00001ef8 <.Loc.159>:
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	82 70       	andi	r24, 0x02	; 2
    1efe:	99 27       	eor	r25, r25

00001f00 <.Loc.160>:
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	b1 f7       	brne	.-20     	; 0x1ef0 <.L66>

00001f04 <.Loc.161>:

    }
    Distance = count;
    1f04:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <count>
    1f08:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <count+0x1>
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01

00001f10 <.Loc.162>:
    Distance = Distance * 0.008 * 343;
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	9c 01       	movw	r18, r24
    1f16:	99 0f       	add	r25, r25
    1f18:	44 0b       	sbc	r20, r20
    1f1a:	55 0b       	sbc	r21, r21
    1f1c:	2f 87       	std	Y+15, r18	; 0x0f
    1f1e:	38 8b       	std	Y+16, r19	; 0x10
    1f20:	49 8b       	std	Y+17, r20	; 0x11
    1f22:	5a 8b       	std	Y+18, r21	; 0x12
    1f24:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f26:	78 89       	ldd	r23, Y+16	; 0x10
    1f28:	89 89       	ldd	r24, Y+17	; 0x11
    1f2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f2c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__floatsisf>
    1f30:	6b 83       	std	Y+3, r22	; 0x03
    1f32:	7c 83       	std	Y+4, r23	; 0x04
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	2f e6       	ldi	r18, 0x6F	; 111
    1f3a:	32 e1       	ldi	r19, 0x12	; 18
    1f3c:	43 e0       	ldi	r20, 0x03	; 3
    1f3e:	5c e3       	ldi	r21, 0x3C	; 60
    1f40:	6b 81       	ldd	r22, Y+3	; 0x03
    1f42:	7c 81       	ldd	r23, Y+4	; 0x04
    1f44:	8d 81       	ldd	r24, Y+5	; 0x05
    1f46:	9e 81       	ldd	r25, Y+6	; 0x06
    1f48:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1f4c:	6b 8b       	std	Y+19, r22	; 0x13
    1f4e:	7c 8b       	std	Y+20, r23	; 0x14
    1f50:	8d 8b       	std	Y+21, r24	; 0x15
    1f52:	9e 8b       	std	Y+22, r25	; 0x16
    1f54:	8b 89       	ldd	r24, Y+19	; 0x13
    1f56:	9c 89       	ldd	r25, Y+20	; 0x14
    1f58:	ad 89       	ldd	r26, Y+21	; 0x15
    1f5a:	be 89       	ldd	r27, Y+22	; 0x16
    1f5c:	8f 83       	std	Y+7, r24	; 0x07
    1f5e:	98 87       	std	Y+8, r25	; 0x08
    1f60:	a9 87       	std	Y+9, r26	; 0x09
    1f62:	ba 87       	std	Y+10, r27	; 0x0a

00001f64 <.Loc.163>:
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e8       	ldi	r19, 0x80	; 128
    1f68:	4b ea       	ldi	r20, 0xAB	; 171
    1f6a:	53 e4       	ldi	r21, 0x43	; 67
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    1f78:	6f 8b       	std	Y+23, r22	; 0x17
    1f7a:	78 8f       	std	Y+24, r23	; 0x18
    1f7c:	89 8f       	std	Y+25, r24	; 0x19
    1f7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f80:	2f 89       	ldd	r18, Y+23	; 0x17
    1f82:	38 8d       	ldd	r19, Y+24	; 0x18
    1f84:	49 8d       	ldd	r20, Y+25	; 0x19
    1f86:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1f88:	2b 87       	std	Y+11, r18	; 0x0b
    1f8a:	3c 87       	std	Y+12, r19	; 0x0c
    1f8c:	4d 87       	std	Y+13, r20	; 0x0d
    1f8e:	5e 87       	std	Y+14, r21	; 0x0e

00001f90 <.Loc.164>:
    1f90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f98:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fixsfsi>
    1f9c:	6b 8f       	std	Y+27, r22	; 0x1b
    1f9e:	7c 8f       	std	Y+28, r23	; 0x1c
    1fa0:	8d 8f       	std	Y+29, r24	; 0x1d
    1fa2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fa4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1fa6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1fa8:	5a 83       	std	Y+2, r21	; 0x02
    1faa:	49 83       	std	Y+1, r20	; 0x01

00001fac <.Loc.165>:
    //340  m/s
    //34 cm / ms
    //340   mm / ms
    //0.34  mm / us
    //5.44 * count geeft distance in mm
    return Distance;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02

00001fb0 <.Loc.166>:
}
    1fb0:	6e 96       	adiw	r28, 0x1e	; 30
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	08 95       	ret

00001fc2 <TriggerPulseRight>:
void TriggerPulseRight (void){
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	c8 54       	subi	r28, 0x48	; 72
    1fcc:	d1 09       	sbc	r29, r1
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61

00001fd8 <.Loc.168>:
    port_tri_R |= (1<<pin_tri_R);
    1fd8:	82 e2       	ldi	r24, 0x22	; 34
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	dc 01       	movw	r26, r24
    1fde:	2c 91       	ld	r18, X
    1fe0:	82 e2       	ldi	r24, 0x22	; 34
    1fe2:	90 e0       	ldi	r25, 0x00	; 0

00001fe4 <.Loc.169>:
    1fe4:	20 61       	ori	r18, 0x10	; 16
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	20 83       	st	Z, r18
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e2       	ldi	r26, 0x20	; 32
    1ff0:	b1 e4       	ldi	r27, 0x41	; 65
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
    1ff6:	ab 83       	std	Y+3, r26	; 0x03
    1ff8:	bc 83       	std	Y+4, r27	; 0x04

00001ffa <.LBB82>:
	__tmp = ((F_CPU) / 3e6) * __us;
    1ffa:	2b ea       	ldi	r18, 0xAB	; 171
    1ffc:	3a ea       	ldi	r19, 0xAA	; 170
    1ffe:	4a ea       	ldi	r20, 0xAA	; 170
    2000:	50 e4       	ldi	r21, 0x40	; 64
    2002:	69 81       	ldd	r22, Y+1	; 0x01
    2004:	7a 81       	ldd	r23, Y+2	; 0x02
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    200e:	6d a3       	std	Y+37, r22	; 0x25
    2010:	7e a3       	std	Y+38, r23	; 0x26
    2012:	8f a3       	std	Y+39, r24	; 0x27
    2014:	98 a7       	std	Y+40, r25	; 0x28
    2016:	8d a1       	ldd	r24, Y+37	; 0x25
    2018:	9e a1       	ldd	r25, Y+38	; 0x26
    201a:	af a1       	ldd	r26, Y+39	; 0x27
    201c:	b8 a5       	ldd	r27, Y+40	; 0x28
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	af 83       	std	Y+7, r26	; 0x07
    2024:	b8 87       	std	Y+8, r27	; 0x08

00002026 <.Loc.171>:
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	50 e4       	ldi	r21, 0x40	; 64
    202e:	69 81       	ldd	r22, Y+1	; 0x01
    2030:	7a 81       	ldd	r23, Y+2	; 0x02
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    203a:	69 a7       	std	Y+41, r22	; 0x29
    203c:	7a a7       	std	Y+42, r23	; 0x2a
    203e:	8b a7       	std	Y+43, r24	; 0x2b
    2040:	9c a7       	std	Y+44, r25	; 0x2c
    2042:	89 a5       	ldd	r24, Y+41	; 0x29
    2044:	9a a5       	ldd	r25, Y+42	; 0x2a
    2046:	ab a5       	ldd	r26, Y+43	; 0x2b
    2048:	bc a5       	ldd	r27, Y+44	; 0x2c
    204a:	89 87       	std	Y+9, r24	; 0x09
    204c:	9a 87       	std	Y+10, r25	; 0x0a
    204e:	ab 87       	std	Y+11, r26	; 0x0b
    2050:	bc 87       	std	Y+12, r27	; 0x0c

00002052 <.Loc.172>:
	if (__tmp < 1.0)
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e8       	ldi	r20, 0x80	; 128
    2058:	5f e3       	ldi	r21, 0x3F	; 63
    205a:	6d 81       	ldd	r22, Y+5	; 0x05
    205c:	7e 81       	ldd	r23, Y+6	; 0x06
    205e:	8f 81       	ldd	r24, Y+7	; 0x07
    2060:	98 85       	ldd	r25, Y+8	; 0x08
    2062:	0e 94 49 12 	call	0x2492	; 0x2492 <__cmpsf2>
    2066:	88 23       	and	r24, r24
    2068:	1c f4       	brge	.+6      	; 0x2070 <.L90>

0000206a <.Loc.173>:
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	8d 87       	std	Y+13, r24	; 0x0d
    206e:	e8 c0       	rjmp	.+464    	; 0x2240 <.L71>

00002070 <.L90>:
	else if (__tmp2 > 65535)
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	3f ef       	ldi	r19, 0xFF	; 255
    2074:	4f e7       	ldi	r20, 0x7F	; 127
    2076:	57 e4       	ldi	r21, 0x47	; 71
    2078:	69 85       	ldd	r22, Y+9	; 0x09
    207a:	7a 85       	ldd	r23, Y+10	; 0x0a
    207c:	8b 85       	ldd	r24, Y+11	; 0x0b
    207e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2080:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    2084:	88 23       	and	r24, r24
    2086:	09 f0       	breq	.+2      	; 0x208a <L0^A>

00002088 <L0^A>:
    2088:	0c f4       	brge	.+2      	; 0x208c <.Loc.175>

0000208a <L0^A>:
    208a:	9f c0       	rjmp	.+318    	; 0x21ca <.L91>

0000208c <.Loc.175>:
		_delay_ms(__us / 1000.0);
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a e7       	ldi	r20, 0x7A	; 122
    2092:	54 e4       	ldi	r21, 0x44	; 68
    2094:	69 81       	ldd	r22, Y+1	; 0x01
    2096:	7a 81       	ldd	r23, Y+2	; 0x02
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	0e 94 4e 12 	call	0x249c	; 0x249c <__divsf3>
    20a0:	6d a7       	std	Y+45, r22	; 0x2d
    20a2:	7e a7       	std	Y+46, r23	; 0x2e
    20a4:	8f a7       	std	Y+47, r24	; 0x2f
    20a6:	98 ab       	std	Y+48, r25	; 0x30
    20a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ac:	af a5       	ldd	r26, Y+47	; 0x2f
    20ae:	b8 a9       	ldd	r27, Y+48	; 0x30
    20b0:	8e 87       	std	Y+14, r24	; 0x0e
    20b2:	9f 87       	std	Y+15, r25	; 0x0f
    20b4:	a8 8b       	std	Y+16, r26	; 0x10
    20b6:	b9 8b       	std	Y+17, r27	; 0x11

000020b8 <.LBB84>:
	__tmp = ((F_CPU) / 4e3) * __ms;
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4a e7       	ldi	r20, 0x7A	; 122
    20be:	55 e4       	ldi	r21, 0x45	; 69
    20c0:	6e 85       	ldd	r22, Y+14	; 0x0e
    20c2:	7f 85       	ldd	r23, Y+15	; 0x0f
    20c4:	88 89       	ldd	r24, Y+16	; 0x10
    20c6:	99 89       	ldd	r25, Y+17	; 0x11
    20c8:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    20cc:	69 ab       	std	Y+49, r22	; 0x31
    20ce:	7a ab       	std	Y+50, r23	; 0x32
    20d0:	8b ab       	std	Y+51, r24	; 0x33
    20d2:	9c ab       	std	Y+52, r25	; 0x34
    20d4:	89 a9       	ldd	r24, Y+49	; 0x31
    20d6:	9a a9       	ldd	r25, Y+50	; 0x32
    20d8:	ab a9       	ldd	r26, Y+51	; 0x33
    20da:	bc a9       	ldd	r27, Y+52	; 0x34
    20dc:	8a 8b       	std	Y+18, r24	; 0x12
    20de:	9b 8b       	std	Y+19, r25	; 0x13
    20e0:	ac 8b       	std	Y+20, r26	; 0x14
    20e2:	bd 8b       	std	Y+21, r27	; 0x15

000020e4 <.Loc.177>:
	if (__tmp < 1.0)
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	6a 89       	ldd	r22, Y+18	; 0x12
    20ee:	7b 89       	ldd	r23, Y+19	; 0x13
    20f0:	8c 89       	ldd	r24, Y+20	; 0x14
    20f2:	9d 89       	ldd	r25, Y+21	; 0x15
    20f4:	0e 94 49 12 	call	0x2492	; 0x2492 <__cmpsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	2c f4       	brge	.+10     	; 0x2106 <.L92>

000020fc <.Loc.178>:
		__ticks = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9f 8b       	std	Y+23, r25	; 0x17
    2102:	8e 8b       	std	Y+22, r24	; 0x16
    2104:	57 c0       	rjmp	.+174    	; 0x21b4 <.L76>

00002106 <.L92>:
	else if (__tmp > 65535)
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	6a 89       	ldd	r22, Y+18	; 0x12
    2110:	7b 89       	ldd	r23, Y+19	; 0x13
    2112:	8c 89       	ldd	r24, Y+20	; 0x14
    2114:	9d 89       	ldd	r25, Y+21	; 0x15
    2116:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    211a:	88 23       	and	r24, r24
    211c:	d9 f1       	breq	.+118    	; 0x2194 <.L93>
    211e:	d4 f1       	brlt	.+116    	; 0x2194 <.L93>

00002120 <.Loc.180>:
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e2       	ldi	r20, 0x20	; 32
    2126:	51 e4       	ldi	r21, 0x41	; 65
    2128:	6e 85       	ldd	r22, Y+14	; 0x0e
    212a:	7f 85       	ldd	r23, Y+15	; 0x0f
    212c:	88 89       	ldd	r24, Y+16	; 0x10
    212e:	99 89       	ldd	r25, Y+17	; 0x11
    2130:	0e 94 ad 13 	call	0x275a	; 0x275a <__mulsf3>
    2134:	6d ab       	std	Y+53, r22	; 0x35
    2136:	7e ab       	std	Y+54, r23	; 0x36
    2138:	8f ab       	std	Y+55, r24	; 0x37
    213a:	98 af       	std	Y+56, r25	; 0x38
    213c:	8d a9       	ldd	r24, Y+53	; 0x35
    213e:	9e a9       	ldd	r25, Y+54	; 0x36
    2140:	af a9       	ldd	r26, Y+55	; 0x37
    2142:	b8 ad       	ldd	r27, Y+56	; 0x38
    2144:	89 a3       	std	Y+33, r24	; 0x21
    2146:	9a a3       	std	Y+34, r25	; 0x22
    2148:	ab a3       	std	Y+35, r26	; 0x23
    214a:	bc a3       	std	Y+36, r27	; 0x24

0000214c <.Loc.181>:
    214c:	69 a1       	ldd	r22, Y+33	; 0x21
    214e:	7a a1       	ldd	r23, Y+34	; 0x22
    2150:	8b a1       	ldd	r24, Y+35	; 0x23
    2152:	9c a1       	ldd	r25, Y+36	; 0x24
    2154:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    2158:	69 af       	std	Y+57, r22	; 0x39
    215a:	7a af       	std	Y+58, r23	; 0x3a
    215c:	8b af       	std	Y+59, r24	; 0x3b
    215e:	9c af       	std	Y+60, r25	; 0x3c
    2160:	a9 ad       	ldd	r26, Y+57	; 0x39
    2162:	ba ad       	ldd	r27, Y+58	; 0x3a
    2164:	bf 8b       	std	Y+23, r27	; 0x17
    2166:	ae 8b       	std	Y+22, r26	; 0x16

00002168 <.Loc.182>:
		while(__ticks)
    2168:	10 c0       	rjmp	.+32     	; 0x218a <.L79>

0000216a <.L80>:
    216a:	80 e9       	ldi	r24, 0x90	; 144
    216c:	91 e0       	ldi	r25, 0x01	; 1
    216e:	99 8f       	std	Y+25, r25	; 0x19
    2170:	88 8f       	std	Y+24, r24	; 0x18

00002172 <.LBB86>:
	__asm__ volatile (
    2172:	88 8d       	ldd	r24, Y+24	; 0x18
    2174:	99 8d       	ldd	r25, Y+25	; 0x19

00002176 <.L1^B9>:
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <.L1^B9>
    217a:	99 8f       	std	Y+25, r25	; 0x19
    217c:	88 8f       	std	Y+24, r24	; 0x18

0000217e <.Loc.184>:
	...

00002180 <.LBE86>:
			__ticks --;
    2180:	8e 89       	ldd	r24, Y+22	; 0x16
    2182:	9f 89       	ldd	r25, Y+23	; 0x17
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9f 8b       	std	Y+23, r25	; 0x17
    2188:	8e 8b       	std	Y+22, r24	; 0x16

0000218a <.L79>:
		while(__ticks)
    218a:	8e 89       	ldd	r24, Y+22	; 0x16
    218c:	9f 89       	ldd	r25, Y+23	; 0x17
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	61 f7       	brne	.-40     	; 0x216a <.L80>

00002192 <.Loc.187>:
		return;
    2192:	56 c0       	rjmp	.+172    	; 0x2240 <.L71>

00002194 <.L93>:
		__ticks = (uint16_t)__tmp;
    2194:	6a 89       	ldd	r22, Y+18	; 0x12
    2196:	7b 89       	ldd	r23, Y+19	; 0x13
    2198:	8c 89       	ldd	r24, Y+20	; 0x14
    219a:	9d 89       	ldd	r25, Y+21	; 0x15
    219c:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    21a0:	21 96       	adiw	r28, 0x01	; 1
    21a2:	6c af       	std	Y+60, r22	; 0x3c
    21a4:	7d af       	std	Y+61, r23	; 0x3d
    21a6:	8e af       	std	Y+62, r24	; 0x3e
    21a8:	9f af       	std	Y+63, r25	; 0x3f
    21aa:	21 97       	sbiw	r28, 0x01	; 1
    21ac:	ed ad       	ldd	r30, Y+61	; 0x3d
    21ae:	fe ad       	ldd	r31, Y+62	; 0x3e
    21b0:	ff 8b       	std	Y+23, r31	; 0x17
    21b2:	ee 8b       	std	Y+22, r30	; 0x16

000021b4 <.L76>:
    21b4:	8e 89       	ldd	r24, Y+22	; 0x16
    21b6:	9f 89       	ldd	r25, Y+23	; 0x17
    21b8:	9b 8f       	std	Y+27, r25	; 0x1b
    21ba:	8a 8f       	std	Y+26, r24	; 0x1a

000021bc <.LBB88>:
    21bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21be:	9b 8d       	ldd	r25, Y+27	; 0x1b

000021c0 <.L1^B10>:
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <.L1^B10>
    21c4:	9b 8f       	std	Y+27, r25	; 0x1b
    21c6:	8a 8f       	std	Y+26, r24	; 0x1a

000021c8 <.Loc.190>:
}
    21c8:	3b c0       	rjmp	.+118    	; 0x2240 <.L71>

000021ca <.L91>:
	else if (__tmp > 255)
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	53 e4       	ldi	r21, 0x43	; 67
    21d2:	6d 81       	ldd	r22, Y+5	; 0x05
    21d4:	7e 81       	ldd	r23, Y+6	; 0x06
    21d6:	8f 81       	ldd	r24, Y+7	; 0x07
    21d8:	98 85       	ldd	r25, Y+8	; 0x08
    21da:	0e 94 a8 13 	call	0x2750	; 0x2750 <__gesf2>
    21de:	88 23       	and	r24, r24
    21e0:	f9 f0       	breq	.+62     	; 0x2220 <.L94>
    21e2:	f4 f0       	brlt	.+60     	; 0x2220 <.L94>

000021e4 <.LBB90>:
		uint16_t __ticks=(uint16_t)__tmp2;
    21e4:	69 85       	ldd	r22, Y+9	; 0x09
    21e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    21e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    21ec:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    21f0:	25 96       	adiw	r28, 0x05	; 5
    21f2:	6c af       	std	Y+60, r22	; 0x3c
    21f4:	7d af       	std	Y+61, r23	; 0x3d
    21f6:	8e af       	std	Y+62, r24	; 0x3e
    21f8:	9f af       	std	Y+63, r25	; 0x3f
    21fa:	25 97       	sbiw	r28, 0x05	; 5
    21fc:	23 96       	adiw	r28, 0x03	; 3
    21fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2200:	9f ad       	ldd	r25, Y+63	; 0x3f
    2202:	23 97       	sbiw	r28, 0x03	; 3
    2204:	9d 8f       	std	Y+29, r25	; 0x1d
    2206:	8c 8f       	std	Y+28, r24	; 0x1c
    2208:	8c 8d       	ldd	r24, Y+28	; 0x1c
    220a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    220c:	9f 8f       	std	Y+31, r25	; 0x1f
    220e:	8e 8f       	std	Y+30, r24	; 0x1e

00002210 <.LBB91>:
	__asm__ volatile (
    2210:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2212:	9f 8d       	ldd	r25, Y+31	; 0x1f

00002214 <.L1^B11>:
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <.L1^B11>
    2218:	9f 8f       	std	Y+31, r25	; 0x1f
    221a:	8e 8f       	std	Y+30, r24	; 0x1e

0000221c <.Loc.194>:
	...

0000221e <.LBE91>:
		return;
    221e:	17 c0       	rjmp	.+46     	; 0x224e <.L84>

00002220 <.L94>:
		__ticks = (uint8_t)__tmp;
    2220:	6d 81       	ldd	r22, Y+5	; 0x05
    2222:	7e 81       	ldd	r23, Y+6	; 0x06
    2224:	8f 81       	ldd	r24, Y+7	; 0x07
    2226:	98 85       	ldd	r25, Y+8	; 0x08
    2228:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    222c:	29 96       	adiw	r28, 0x09	; 9
    222e:	6c af       	std	Y+60, r22	; 0x3c
    2230:	7d af       	std	Y+61, r23	; 0x3d
    2232:	8e af       	std	Y+62, r24	; 0x3e
    2234:	9f af       	std	Y+63, r25	; 0x3f
    2236:	29 97       	sbiw	r28, 0x09	; 9
    2238:	26 96       	adiw	r28, 0x06	; 6
    223a:	9f ad       	ldd	r25, Y+63	; 0x3f
    223c:	26 97       	sbiw	r28, 0x06	; 6
    223e:	9d 87       	std	Y+13, r25	; 0x0d

00002240 <.L71>:
    2240:	8d 85       	ldd	r24, Y+13	; 0x0d
    2242:	88 a3       	std	Y+32, r24	; 0x20

00002244 <.LBB93>:
	__asm__ volatile (
    2244:	88 a1       	ldd	r24, Y+32	; 0x20

00002246 <.L1^B12>:
    2246:	8a 95       	dec	r24
    2248:	f1 f7       	brne	.-4      	; 0x2246 <.L1^B12>
    224a:	88 a3       	std	Y+32, r24	; 0x20

0000224c <.Loc.198>:
	...

0000224e <.L84>:
    _delay_us(10);
    port_tri_R &= (~(1<<pin_tri_R));
    224e:	82 e2       	ldi	r24, 0x22	; 34
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	dc 01       	movw	r26, r24
    2254:	2c 91       	ld	r18, X

00002256 <.Loc.200>:
    2256:	82 e2       	ldi	r24, 0x22	; 34
    2258:	90 e0       	ldi	r25, 0x00	; 0

0000225a <.Loc.201>:
    225a:	2f 7e       	andi	r18, 0xEF	; 239
    225c:	fc 01       	movw	r30, r24
    225e:	20 83       	st	Z, r18

00002260 <.Loc.202>:
}
    2260:	00 00       	nop
    2262:	c8 5b       	subi	r28, 0xB8	; 184
    2264:	df 4f       	sbci	r29, 0xFF	; 255
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <__vector_15>:

ISR(TIMER2_OVF_vect){
    2276:	1f 92       	push	r1
    2278:	0f 92       	push	r0
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	0f 92       	push	r0
    227e:	11 24       	eor	r1, r1
    2280:	8f 93       	push	r24
    2282:	9f 93       	push	r25
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62

0000228c <.Loc.204>:
    count++;
    228c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <count>
    2290:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <count+0x1>
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <count+0x1>
    229a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <count>

0000229e <.Loc.205>:
}
    229e:	00 00       	nop
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	9f 91       	pop	r25
    22a6:	8f 91       	pop	r24
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	0f 90       	pop	r0
    22ae:	1f 90       	pop	r1
    22b0:	18 95       	reti

000022b2 <__divmodhi4>:
    22b2:	97 fb       	bst	r25, 7

000022b4 <.Loc.1>:
    22b4:	07 2e       	mov	r0, r23

000022b6 <.Loc.2>:
    22b6:	16 f4       	brtc	.+4      	; 0x22bc <.L^B1>

000022b8 <.Loc.3>:
    22b8:	00 94       	com	r0

000022ba <.Loc.4>:
    22ba:	07 d0       	rcall	.+14     	; 0x22ca <__divmodhi4_neg1>

000022bc <.L^B1>:
    22bc:	77 fd       	sbrc	r23, 7

000022be <.Loc.6>:
    22be:	09 d0       	rcall	.+18     	; 0x22d2 <__divmodhi4_neg2>

000022c0 <.Loc.7>:
    22c0:	0e 94 a6 11 	call	0x234c	; 0x234c <__udivmodhi4>

000022c4 <.Loc.8>:
    22c4:	07 fc       	sbrc	r0, 7

000022c6 <.Loc.9>:
    22c6:	05 d0       	rcall	.+10     	; 0x22d2 <__divmodhi4_neg2>

000022c8 <.Loc.10>:
    22c8:	3e f4       	brtc	.+14     	; 0x22d8 <__divmodhi4_exit>

000022ca <__divmodhi4_neg1>:
    22ca:	90 95       	com	r25

000022cc <.Loc.12>:
    22cc:	81 95       	neg	r24

000022ce <.Loc.13>:
    22ce:	9f 4f       	sbci	r25, 0xFF	; 255

000022d0 <.Loc.14>:
    22d0:	08 95       	ret

000022d2 <__divmodhi4_neg2>:
    22d2:	70 95       	com	r23

000022d4 <.Loc.16>:
    22d4:	61 95       	neg	r22

000022d6 <.Loc.17>:
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255

000022d8 <__divmodhi4_exit>:
    22d8:	08 95       	ret

000022da <__divmodsi4>:
    22da:	05 2e       	mov	r0, r21

000022dc <.Loc.1>:
    22dc:	97 fb       	bst	r25, 7

000022de <.Loc.2>:
    22de:	1e f4       	brtc	.+6      	; 0x22e6 <.L^B1>

000022e0 <.Loc.3>:
    22e0:	00 94       	com	r0

000022e2 <.Loc.4>:
    22e2:	0e 94 84 11 	call	0x2308	; 0x2308 <__negsi2>

000022e6 <.L^B1>:
    22e6:	57 fd       	sbrc	r21, 7

000022e8 <.Loc.6>:
    22e8:	07 d0       	rcall	.+14     	; 0x22f8 <__divmodsi4_neg2>

000022ea <.Loc.7>:
    22ea:	0e 94 ba 11 	call	0x2374	; 0x2374 <__udivmodsi4>

000022ee <.Loc.8>:
    22ee:	07 fc       	sbrc	r0, 7

000022f0 <.Loc.9>:
    22f0:	03 d0       	rcall	.+6      	; 0x22f8 <__divmodsi4_neg2>

000022f2 <.Loc.10>:
    22f2:	4e f4       	brtc	.+18     	; 0x2306 <__divmodsi4_exit>

000022f4 <.Loc.11>:
    22f4:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__negsi2>

000022f8 <__divmodsi4_neg2>:
    22f8:	50 95       	com	r21

000022fa <.Loc.13>:
    22fa:	40 95       	com	r20

000022fc <.Loc.14>:
    22fc:	30 95       	com	r19

000022fe <.Loc.15>:
    22fe:	21 95       	neg	r18

00002300 <.Loc.16>:
    2300:	3f 4f       	sbci	r19, 0xFF	; 255

00002302 <.Loc.17>:
    2302:	4f 4f       	sbci	r20, 0xFF	; 255

00002304 <.Loc.18>:
    2304:	5f 4f       	sbci	r21, 0xFF	; 255

00002306 <__divmodsi4_exit>:
    2306:	08 95       	ret

00002308 <__negsi2>:
    2308:	90 95       	com	r25
    230a:	80 95       	com	r24
    230c:	70 95       	com	r23
    230e:	61 95       	neg	r22
    2310:	7f 4f       	sbci	r23, 0xFF	; 255
    2312:	8f 4f       	sbci	r24, 0xFF	; 255
    2314:	9f 4f       	sbci	r25, 0xFF	; 255

00002316 <.Loc.1>:
    2316:	08 95       	ret

00002318 <__umulhisi3>:
    2318:	a2 9f       	mul	r26, r18

0000231a <.Loc.1>:
    231a:	b0 01       	movw	r22, r0

0000231c <.Loc.2>:
    231c:	b3 9f       	mul	r27, r19

0000231e <.Loc.3>:
    231e:	c0 01       	movw	r24, r0

00002320 <.Loc.4>:
    2320:	a3 9f       	mul	r26, r19

00002322 <.Loc.5>:
    2322:	70 0d       	add	r23, r0

00002324 <.Loc.6>:
    2324:	81 1d       	adc	r24, r1

00002326 <.Loc.7>:
    2326:	11 24       	eor	r1, r1

00002328 <.Loc.8>:
    2328:	91 1d       	adc	r25, r1

0000232a <.Loc.9>:
    232a:	b2 9f       	mul	r27, r18

0000232c <.Loc.10>:
    232c:	70 0d       	add	r23, r0

0000232e <.Loc.11>:
    232e:	81 1d       	adc	r24, r1

00002330 <.Loc.12>:
    2330:	11 24       	eor	r1, r1

00002332 <.Loc.13>:
    2332:	91 1d       	adc	r25, r1

00002334 <.Loc.14>:
    2334:	08 95       	ret

00002336 <__muluhisi3>:
    2336:	0e 94 8c 11 	call	0x2318	; 0x2318 <__umulhisi3>

0000233a <.Loc.1>:
    233a:	a5 9f       	mul	r26, r21

0000233c <.Loc.2>:
    233c:	90 0d       	add	r25, r0

0000233e <.Loc.3>:
    233e:	b4 9f       	mul	r27, r20

00002340 <.Loc.4>:
    2340:	90 0d       	add	r25, r0

00002342 <.Loc.5>:
    2342:	a4 9f       	mul	r26, r20

00002344 <.Loc.6>:
    2344:	80 0d       	add	r24, r0

00002346 <.Loc.7>:
    2346:	91 1d       	adc	r25, r1

00002348 <.Loc.8>:
    2348:	11 24       	eor	r1, r1

0000234a <.Loc.9>:
    234a:	08 95       	ret

0000234c <__udivmodhi4>:
    234c:	aa 1b       	sub	r26, r26

0000234e <.Loc.1>:
    234e:	bb 1b       	sub	r27, r27

00002350 <.Loc.2>:
    2350:	51 e1       	ldi	r21, 0x11	; 17

00002352 <.Loc.3>:
    2352:	07 c0       	rjmp	.+14     	; 0x2362 <__udivmodhi4_ep>

00002354 <__udivmodhi4_loop>:
    2354:	aa 1f       	adc	r26, r26

00002356 <.Loc.5>:
    2356:	bb 1f       	adc	r27, r27

00002358 <.Loc.6>:
    2358:	a6 17       	cp	r26, r22

0000235a <.Loc.7>:
    235a:	b7 07       	cpc	r27, r23

0000235c <.Loc.8>:
    235c:	10 f0       	brcs	.+4      	; 0x2362 <__udivmodhi4_ep>

0000235e <.Loc.9>:
    235e:	a6 1b       	sub	r26, r22

00002360 <.Loc.10>:
    2360:	b7 0b       	sbc	r27, r23

00002362 <__udivmodhi4_ep>:
    2362:	88 1f       	adc	r24, r24

00002364 <.Loc.12>:
    2364:	99 1f       	adc	r25, r25

00002366 <.Loc.13>:
    2366:	5a 95       	dec	r21

00002368 <.Loc.14>:
    2368:	a9 f7       	brne	.-22     	; 0x2354 <__udivmodhi4_loop>

0000236a <.Loc.15>:
    236a:	80 95       	com	r24

0000236c <.Loc.16>:
    236c:	90 95       	com	r25

0000236e <.Loc.17>:
    236e:	bc 01       	movw	r22, r24

00002370 <.Loc.18>:
    2370:	cd 01       	movw	r24, r26

00002372 <.Loc.19>:
    2372:	08 95       	ret

00002374 <__udivmodsi4>:
    2374:	a1 e2       	ldi	r26, 0x21	; 33

00002376 <.Loc.1>:
    2376:	1a 2e       	mov	r1, r26

00002378 <.Loc.2>:
    2378:	aa 1b       	sub	r26, r26

0000237a <.Loc.3>:
    237a:	bb 1b       	sub	r27, r27

0000237c <.Loc.4>:
    237c:	fd 01       	movw	r30, r26

0000237e <.Loc.5>:
    237e:	0d c0       	rjmp	.+26     	; 0x239a <__udivmodsi4_ep>

00002380 <__udivmodsi4_loop>:
    2380:	aa 1f       	adc	r26, r26

00002382 <.Loc.7>:
    2382:	bb 1f       	adc	r27, r27

00002384 <.Loc.8>:
    2384:	ee 1f       	adc	r30, r30

00002386 <.Loc.9>:
    2386:	ff 1f       	adc	r31, r31

00002388 <.Loc.10>:
    2388:	a2 17       	cp	r26, r18

0000238a <.Loc.11>:
    238a:	b3 07       	cpc	r27, r19

0000238c <.Loc.12>:
    238c:	e4 07       	cpc	r30, r20

0000238e <.Loc.13>:
    238e:	f5 07       	cpc	r31, r21

00002390 <.Loc.14>:
    2390:	20 f0       	brcs	.+8      	; 0x239a <__udivmodsi4_ep>

00002392 <.Loc.15>:
    2392:	a2 1b       	sub	r26, r18

00002394 <.Loc.16>:
    2394:	b3 0b       	sbc	r27, r19

00002396 <.Loc.17>:
    2396:	e4 0b       	sbc	r30, r20

00002398 <.Loc.18>:
    2398:	f5 0b       	sbc	r31, r21

0000239a <__udivmodsi4_ep>:
    239a:	66 1f       	adc	r22, r22

0000239c <.Loc.20>:
    239c:	77 1f       	adc	r23, r23

0000239e <.Loc.21>:
    239e:	88 1f       	adc	r24, r24

000023a0 <.Loc.22>:
    23a0:	99 1f       	adc	r25, r25

000023a2 <.Loc.23>:
    23a2:	1a 94       	dec	r1

000023a4 <.Loc.24>:
    23a4:	69 f7       	brne	.-38     	; 0x2380 <__udivmodsi4_loop>

000023a6 <.Loc.25>:
    23a6:	60 95       	com	r22

000023a8 <.Loc.26>:
    23a8:	70 95       	com	r23

000023aa <.Loc.27>:
    23aa:	80 95       	com	r24

000023ac <.Loc.28>:
    23ac:	90 95       	com	r25

000023ae <.Loc.29>:
    23ae:	9b 01       	movw	r18, r22

000023b0 <.Loc.30>:
    23b0:	ac 01       	movw	r20, r24

000023b2 <.Loc.31>:
    23b2:	bd 01       	movw	r22, r26

000023b4 <.Loc.32>:
    23b4:	cf 01       	movw	r24, r30

000023b6 <.Loc.33>:
    23b6:	08 95       	ret

000023b8 <__subsf3>:
    23b8:	50 58       	subi	r21, 0x80	; 128

000023ba <__addsf3>:
    23ba:	bb 27       	eor	r27, r27
    23bc:	aa 27       	eor	r26, r26
    23be:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__addsf3x>
    23c2:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__fp_round>

000023c6 <.L^B1>:
    23c6:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__fp_pscA>
    23ca:	38 f0       	brcs	.+14     	; 0x23da <.L_nan>
    23cc:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_pscB>
    23d0:	20 f0       	brcs	.+8      	; 0x23da <.L_nan>
    23d2:	39 f4       	brne	.+14     	; 0x23e2 <.L_inf>
    23d4:	9f 3f       	cpi	r25, 0xFF	; 255
    23d6:	19 f4       	brne	.+6      	; 0x23de <.L_infB>
    23d8:	26 f4       	brtc	.+8      	; 0x23e2 <.L_inf>

000023da <.L_nan>:
    23da:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__fp_nan>

000023de <.L_infB>:
    23de:	0e f4       	brtc	.+2      	; 0x23e2 <.L_inf>
    23e0:	e0 95       	com	r30

000023e2 <.L_inf>:
    23e2:	e7 fb       	bst	r30, 7
    23e4:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__fp_inf>

000023e8 <__addsf3x>:
    23e8:	e9 2f       	mov	r30, r25
    23ea:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__fp_split3>
    23ee:	58 f3       	brcs	.-42     	; 0x23c6 <.L^B1>
    23f0:	ba 17       	cp	r27, r26
    23f2:	62 07       	cpc	r22, r18
    23f4:	73 07       	cpc	r23, r19
    23f6:	84 07       	cpc	r24, r20
    23f8:	95 07       	cpc	r25, r21
    23fa:	20 f0       	brcs	.+8      	; 0x2404 <.L2^B1>
    23fc:	79 f4       	brne	.+30     	; 0x241c <.L4^B1>
    23fe:	a6 f5       	brtc	.+104    	; 0x2468 <.L_add>
    2400:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__fp_zero>

00002404 <.L2^B1>:
    2404:	0e f4       	brtc	.+2      	; 0x2408 <.L3^B1>
    2406:	e0 95       	com	r30

00002408 <.L3^B1>:
    2408:	0b 2e       	mov	r0, r27
    240a:	ba 2f       	mov	r27, r26
    240c:	a0 2d       	mov	r26, r0
    240e:	0b 01       	movw	r0, r22
    2410:	b9 01       	movw	r22, r18
    2412:	90 01       	movw	r18, r0
    2414:	0c 01       	movw	r0, r24
    2416:	ca 01       	movw	r24, r20
    2418:	a0 01       	movw	r20, r0
    241a:	11 24       	eor	r1, r1

0000241c <.L4^B1>:
    241c:	ff 27       	eor	r31, r31
    241e:	59 1b       	sub	r21, r25

00002420 <.L5^B1>:
    2420:	99 f0       	breq	.+38     	; 0x2448 <.L7^B1>
    2422:	59 3f       	cpi	r21, 0xF9	; 249
    2424:	50 f4       	brcc	.+20     	; 0x243a <.L6^B1>
    2426:	50 3e       	cpi	r21, 0xE0	; 224
    2428:	68 f1       	brcs	.+90     	; 0x2484 <.L_ret>
    242a:	1a 16       	cp	r1, r26
    242c:	f0 40       	sbci	r31, 0x00	; 0
    242e:	a2 2f       	mov	r26, r18
    2430:	23 2f       	mov	r18, r19
    2432:	34 2f       	mov	r19, r20
    2434:	44 27       	eor	r20, r20
    2436:	58 5f       	subi	r21, 0xF8	; 248
    2438:	f3 cf       	rjmp	.-26     	; 0x2420 <.L5^B1>

0000243a <.L6^B1>:
    243a:	46 95       	lsr	r20
    243c:	37 95       	ror	r19
    243e:	27 95       	ror	r18
    2440:	a7 95       	ror	r26
    2442:	f0 40       	sbci	r31, 0x00	; 0
    2444:	53 95       	inc	r21
    2446:	c9 f7       	brne	.-14     	; 0x243a <.L6^B1>

00002448 <.L7^B1>:
    2448:	7e f4       	brtc	.+30     	; 0x2468 <.L_add>
    244a:	1f 16       	cp	r1, r31
    244c:	ba 0b       	sbc	r27, r26
    244e:	62 0b       	sbc	r22, r18
    2450:	73 0b       	sbc	r23, r19
    2452:	84 0b       	sbc	r24, r20
    2454:	ba f0       	brmi	.+46     	; 0x2484 <.L_ret>

00002456 <.L8^B1>:
    2456:	91 50       	subi	r25, 0x01	; 1
    2458:	a1 f0       	breq	.+40     	; 0x2482 <.L9^B1>
    245a:	ff 0f       	add	r31, r31
    245c:	bb 1f       	adc	r27, r27
    245e:	66 1f       	adc	r22, r22
    2460:	77 1f       	adc	r23, r23
    2462:	88 1f       	adc	r24, r24
    2464:	c2 f7       	brpl	.-16     	; 0x2456 <.L8^B1>
    2466:	0e c0       	rjmp	.+28     	; 0x2484 <.L_ret>

00002468 <.L_add>:
    2468:	ba 0f       	add	r27, r26
    246a:	62 1f       	adc	r22, r18
    246c:	73 1f       	adc	r23, r19
    246e:	84 1f       	adc	r24, r20
    2470:	48 f4       	brcc	.+18     	; 0x2484 <.L_ret>
    2472:	87 95       	ror	r24
    2474:	77 95       	ror	r23
    2476:	67 95       	ror	r22
    2478:	b7 95       	ror	r27
    247a:	f7 95       	ror	r31
    247c:	9e 3f       	cpi	r25, 0xFE	; 254
    247e:	08 f0       	brcs	.+2      	; 0x2482 <.L9^B1>
    2480:	b0 cf       	rjmp	.-160    	; 0x23e2 <.L_inf>

00002482 <.L9^B1>:
    2482:	93 95       	inc	r25

00002484 <.L_ret>:
    2484:	88 0f       	add	r24, r24
    2486:	08 f0       	brcs	.+2      	; 0x248a <.L1^B1>
    2488:	99 27       	eor	r25, r25

0000248a <.L1^B1>:
    248a:	ee 0f       	add	r30, r30
    248c:	97 95       	ror	r25
    248e:	87 95       	ror	r24
    2490:	08 95       	ret

00002492 <__cmpsf2>:
    2492:	0e 94 33 13 	call	0x2666	; 0x2666 <__fp_cmp>
    2496:	08 f4       	brcc	.+2      	; 0x249a <.L1^B1>
    2498:	81 e0       	ldi	r24, 0x01	; 1

0000249a <.L1^B1>:
    249a:	08 95       	ret

0000249c <__divsf3>:
    249c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <__divsf3x>
    24a0:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__fp_round>

000024a4 <.L^B1>:
    24a4:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_pscB>
    24a8:	58 f0       	brcs	.+22     	; 0x24c0 <.L_nan>
    24aa:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__fp_pscA>
    24ae:	40 f0       	brcs	.+16     	; 0x24c0 <.L_nan>
    24b0:	29 f4       	brne	.+10     	; 0x24bc <.L_zr>
    24b2:	5f 3f       	cpi	r21, 0xFF	; 255
    24b4:	29 f0       	breq	.+10     	; 0x24c0 <.L_nan>

000024b6 <.L_inf>:
    24b6:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__fp_inf>

000024ba <.L1^B1>:
    24ba:	51 11       	cpse	r21, r1

000024bc <.L_zr>:
    24bc:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__fp_szero>

000024c0 <.L_nan>:
    24c0:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__fp_nan>

000024c4 <__divsf3x>:
    24c4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__fp_split3>
    24c8:	68 f3       	brcs	.-38     	; 0x24a4 <.L^B1>

000024ca <__divsf3_pse>:
    24ca:	99 23       	and	r25, r25
    24cc:	b1 f3       	breq	.-20     	; 0x24ba <.L1^B1>
    24ce:	55 23       	and	r21, r21
    24d0:	91 f3       	breq	.-28     	; 0x24b6 <.L_inf>
    24d2:	95 1b       	sub	r25, r21
    24d4:	55 0b       	sbc	r21, r21
    24d6:	bb 27       	eor	r27, r27
    24d8:	aa 27       	eor	r26, r26

000024da <.L2^B1>:
    24da:	62 17       	cp	r22, r18
    24dc:	73 07       	cpc	r23, r19
    24de:	84 07       	cpc	r24, r20
    24e0:	38 f0       	brcs	.+14     	; 0x24f0 <.L3^B1>
    24e2:	9f 5f       	subi	r25, 0xFF	; 255
    24e4:	5f 4f       	sbci	r21, 0xFF	; 255
    24e6:	22 0f       	add	r18, r18
    24e8:	33 1f       	adc	r19, r19
    24ea:	44 1f       	adc	r20, r20
    24ec:	aa 1f       	adc	r26, r26
    24ee:	a9 f3       	breq	.-22     	; 0x24da <.L2^B1>

000024f0 <.L3^B1>:
    24f0:	35 d0       	rcall	.+106    	; 0x255c <.L_div>
    24f2:	0e 2e       	mov	r0, r30
    24f4:	3a f0       	brmi	.+14     	; 0x2504 <.L5^B1>

000024f6 <.L4^B1>:
    24f6:	e0 e8       	ldi	r30, 0x80	; 128
    24f8:	32 d0       	rcall	.+100    	; 0x255e <.L_div1>
    24fa:	91 50       	subi	r25, 0x01	; 1
    24fc:	50 40       	sbci	r21, 0x00	; 0
    24fe:	e6 95       	lsr	r30
    2500:	00 1c       	adc	r0, r0
    2502:	ca f7       	brpl	.-14     	; 0x24f6 <.L4^B1>

00002504 <.L5^B1>:
    2504:	2b d0       	rcall	.+86     	; 0x255c <.L_div>
    2506:	fe 2f       	mov	r31, r30
    2508:	29 d0       	rcall	.+82     	; 0x255c <.L_div>
    250a:	66 0f       	add	r22, r22
    250c:	77 1f       	adc	r23, r23
    250e:	88 1f       	adc	r24, r24
    2510:	bb 1f       	adc	r27, r27
    2512:	26 17       	cp	r18, r22
    2514:	37 07       	cpc	r19, r23
    2516:	48 07       	cpc	r20, r24
    2518:	ab 07       	cpc	r26, r27
    251a:	b0 e8       	ldi	r27, 0x80	; 128
    251c:	09 f0       	breq	.+2      	; 0x2520 <.L4^B2>
    251e:	bb 0b       	sbc	r27, r27

00002520 <.L4^B2>:
    2520:	80 2d       	mov	r24, r0
    2522:	bf 01       	movw	r22, r30
    2524:	ff 27       	eor	r31, r31
    2526:	93 58       	subi	r25, 0x83	; 131
    2528:	5f 4f       	sbci	r21, 0xFF	; 255
    252a:	3a f0       	brmi	.+14     	; 0x253a <.L13^B1>
    252c:	9e 3f       	cpi	r25, 0xFE	; 254
    252e:	51 05       	cpc	r21, r1
    2530:	78 f0       	brcs	.+30     	; 0x2550 <.L15^B1>
    2532:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__fp_inf>

00002536 <.L12^B1>:
    2536:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__fp_szero>

0000253a <.L13^B1>:
    253a:	5f 3f       	cpi	r21, 0xFF	; 255
    253c:	e4 f3       	brlt	.-8      	; 0x2536 <.L12^B1>
    253e:	98 3e       	cpi	r25, 0xE8	; 232
    2540:	d4 f3       	brlt	.-12     	; 0x2536 <.L12^B1>

00002542 <.L14^B1>:
    2542:	86 95       	lsr	r24
    2544:	77 95       	ror	r23
    2546:	67 95       	ror	r22
    2548:	b7 95       	ror	r27
    254a:	f7 95       	ror	r31
    254c:	9f 5f       	subi	r25, 0xFF	; 255
    254e:	c9 f7       	brne	.-14     	; 0x2542 <.L14^B1>

00002550 <.L15^B1>:
    2550:	88 0f       	add	r24, r24
    2552:	91 1d       	adc	r25, r1
    2554:	96 95       	lsr	r25
    2556:	87 95       	ror	r24
    2558:	97 f9       	bld	r25, 7
    255a:	08 95       	ret

0000255c <.L_div>:
    255c:	e1 e0       	ldi	r30, 0x01	; 1

0000255e <.L_div1>:
    255e:	66 0f       	add	r22, r22
    2560:	77 1f       	adc	r23, r23
    2562:	88 1f       	adc	r24, r24
    2564:	bb 1f       	adc	r27, r27
    2566:	62 17       	cp	r22, r18
    2568:	73 07       	cpc	r23, r19
    256a:	84 07       	cpc	r24, r20
    256c:	ba 07       	cpc	r27, r26
    256e:	20 f0       	brcs	.+8      	; 0x2578 <.L2^B2>
    2570:	62 1b       	sub	r22, r18
    2572:	73 0b       	sbc	r23, r19
    2574:	84 0b       	sbc	r24, r20
    2576:	ba 0b       	sbc	r27, r26

00002578 <.L2^B2>:
    2578:	ee 1f       	adc	r30, r30
    257a:	88 f7       	brcc	.-30     	; 0x255e <.L_div1>
    257c:	e0 95       	com	r30
    257e:	08 95       	ret

00002580 <__fixsfsi>:
    2580:	0e 94 c7 12 	call	0x258e	; 0x258e <__fixunssfsi>
    2584:	68 94       	set
    2586:	b1 11       	cpse	r27, r1
    2588:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__fp_szero>
    258c:	08 95       	ret

0000258e <__fixunssfsi>:
    258e:	0e 94 87 13 	call	0x270e	; 0x270e <__fp_splitA>
    2592:	88 f0       	brcs	.+34     	; 0x25b6 <.L_err>
    2594:	9f 57       	subi	r25, 0x7F	; 127
    2596:	98 f0       	brcs	.+38     	; 0x25be <.L_zr>
    2598:	b9 2f       	mov	r27, r25
    259a:	99 27       	eor	r25, r25
    259c:	b7 51       	subi	r27, 0x17	; 23
    259e:	b0 f0       	brcs	.+44     	; 0x25cc <.L4^B1>
    25a0:	e1 f0       	breq	.+56     	; 0x25da <.L_sign>

000025a2 <.L1^B1>:
    25a2:	66 0f       	add	r22, r22
    25a4:	77 1f       	adc	r23, r23
    25a6:	88 1f       	adc	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	1a f0       	brmi	.+6      	; 0x25b2 <.L2^B1>
    25ac:	ba 95       	dec	r27
    25ae:	c9 f7       	brne	.-14     	; 0x25a2 <.L1^B1>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <.L_sign>

000025b2 <.L2^B1>:
    25b2:	b1 30       	cpi	r27, 0x01	; 1
    25b4:	91 f0       	breq	.+36     	; 0x25da <.L_sign>

000025b6 <.L_err>:
    25b6:	0e 94 a1 13 	call	0x2742	; 0x2742 <__fp_zero>
    25ba:	b1 e0       	ldi	r27, 0x01	; 1
    25bc:	08 95       	ret

000025be <.L_zr>:
    25be:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__fp_zero>

000025c2 <.L3^B1>:
    25c2:	67 2f       	mov	r22, r23
    25c4:	78 2f       	mov	r23, r24
    25c6:	88 27       	eor	r24, r24
    25c8:	b8 5f       	subi	r27, 0xF8	; 248
    25ca:	39 f0       	breq	.+14     	; 0x25da <.L_sign>

000025cc <.L4^B1>:
    25cc:	b9 3f       	cpi	r27, 0xF9	; 249
    25ce:	cc f3       	brlt	.-14     	; 0x25c2 <.L3^B1>

000025d0 <.L5^B1>:
    25d0:	86 95       	lsr	r24
    25d2:	77 95       	ror	r23
    25d4:	67 95       	ror	r22
    25d6:	b3 95       	inc	r27
    25d8:	d9 f7       	brne	.-10     	; 0x25d0 <.L5^B1>

000025da <.L_sign>:
    25da:	3e f4       	brtc	.+14     	; 0x25ea <.L6^B1>
    25dc:	90 95       	com	r25
    25de:	80 95       	com	r24
    25e0:	70 95       	com	r23
    25e2:	61 95       	neg	r22
    25e4:	7f 4f       	sbci	r23, 0xFF	; 255
    25e6:	8f 4f       	sbci	r24, 0xFF	; 255
    25e8:	9f 4f       	sbci	r25, 0xFF	; 255

000025ea <.L6^B1>:
    25ea:	08 95       	ret

000025ec <__floatunsisf>:
    25ec:	e8 94       	clt
    25ee:	09 c0       	rjmp	.+18     	; 0x2602 <.L1^B1>

000025f0 <__floatsisf>:
    25f0:	97 fb       	bst	r25, 7
    25f2:	3e f4       	brtc	.+14     	; 0x2602 <.L1^B1>
    25f4:	90 95       	com	r25
    25f6:	80 95       	com	r24
    25f8:	70 95       	com	r23
    25fa:	61 95       	neg	r22
    25fc:	7f 4f       	sbci	r23, 0xFF	; 255
    25fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2600:	9f 4f       	sbci	r25, 0xFF	; 255

00002602 <.L1^B1>:
    2602:	99 23       	and	r25, r25
    2604:	a9 f0       	breq	.+42     	; 0x2630 <.L4^B1>
    2606:	f9 2f       	mov	r31, r25
    2608:	96 e9       	ldi	r25, 0x96	; 150
    260a:	bb 27       	eor	r27, r27

0000260c <.L2^B1>:
    260c:	93 95       	inc	r25
    260e:	f6 95       	lsr	r31
    2610:	87 95       	ror	r24
    2612:	77 95       	ror	r23
    2614:	67 95       	ror	r22
    2616:	b7 95       	ror	r27
    2618:	f1 11       	cpse	r31, r1
    261a:	f8 cf       	rjmp	.-16     	; 0x260c <.L2^B1>
    261c:	fa f4       	brpl	.+62     	; 0x265c <.L_pack>
    261e:	bb 0f       	add	r27, r27
    2620:	11 f4       	brne	.+4      	; 0x2626 <.L3^B1>
    2622:	60 ff       	sbrs	r22, 0
    2624:	1b c0       	rjmp	.+54     	; 0x265c <.L_pack>

00002626 <.L3^B1>:
    2626:	6f 5f       	subi	r22, 0xFF	; 255
    2628:	7f 4f       	sbci	r23, 0xFF	; 255
    262a:	8f 4f       	sbci	r24, 0xFF	; 255
    262c:	9f 4f       	sbci	r25, 0xFF	; 255
    262e:	16 c0       	rjmp	.+44     	; 0x265c <.L_pack>

00002630 <.L4^B1>:
    2630:	88 23       	and	r24, r24
    2632:	11 f0       	breq	.+4      	; 0x2638 <.L5^B1>
    2634:	96 e9       	ldi	r25, 0x96	; 150
    2636:	11 c0       	rjmp	.+34     	; 0x265a <.L8^B1>

00002638 <.L5^B1>:
    2638:	77 23       	and	r23, r23
    263a:	21 f0       	breq	.+8      	; 0x2644 <.L6^B1>
    263c:	9e e8       	ldi	r25, 0x8E	; 142
    263e:	87 2f       	mov	r24, r23
    2640:	76 2f       	mov	r23, r22
    2642:	05 c0       	rjmp	.+10     	; 0x264e <.L7^B1>

00002644 <.L6^B1>:
    2644:	66 23       	and	r22, r22
    2646:	71 f0       	breq	.+28     	; 0x2664 <.L9^B1>
    2648:	96 e8       	ldi	r25, 0x86	; 134
    264a:	86 2f       	mov	r24, r22
    264c:	70 e0       	ldi	r23, 0x00	; 0

0000264e <.L7^B1>:
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	2a f0       	brmi	.+10     	; 0x265c <.L_pack>

00002652 <.L10^B1>:
    2652:	9a 95       	dec	r25
    2654:	66 0f       	add	r22, r22
    2656:	77 1f       	adc	r23, r23
    2658:	88 1f       	adc	r24, r24

0000265a <.L8^B1>:
    265a:	da f7       	brpl	.-10     	; 0x2652 <.L10^B1>

0000265c <.L_pack>:
    265c:	88 0f       	add	r24, r24
    265e:	96 95       	lsr	r25
    2660:	87 95       	ror	r24
    2662:	97 f9       	bld	r25, 7

00002664 <.L9^B1>:
    2664:	08 95       	ret

00002666 <__fp_cmp>:
    2666:	99 0f       	add	r25, r25
    2668:	00 08       	sbc	r0, r0
    266a:	55 0f       	add	r21, r21
    266c:	aa 0b       	sbc	r26, r26
    266e:	e0 e8       	ldi	r30, 0x80	; 128
    2670:	fe ef       	ldi	r31, 0xFE	; 254
    2672:	16 16       	cp	r1, r22
    2674:	17 06       	cpc	r1, r23
    2676:	e8 07       	cpc	r30, r24
    2678:	f9 07       	cpc	r31, r25
    267a:	c0 f0       	brcs	.+48     	; 0x26ac <.L9^B1>
    267c:	12 16       	cp	r1, r18
    267e:	13 06       	cpc	r1, r19
    2680:	e4 07       	cpc	r30, r20
    2682:	f5 07       	cpc	r31, r21
    2684:	98 f0       	brcs	.+38     	; 0x26ac <.L9^B1>
    2686:	62 1b       	sub	r22, r18
    2688:	73 0b       	sbc	r23, r19
    268a:	84 0b       	sbc	r24, r20
    268c:	95 0b       	sbc	r25, r21
    268e:	39 f4       	brne	.+14     	; 0x269e <.L1^B1>
    2690:	0a 26       	eor	r0, r26
    2692:	61 f0       	breq	.+24     	; 0x26ac <.L9^B1>
    2694:	23 2b       	or	r18, r19
    2696:	24 2b       	or	r18, r20
    2698:	25 2b       	or	r18, r21
    269a:	21 f4       	brne	.+8      	; 0x26a4 <.L2^B1>
    269c:	08 95       	ret

0000269e <.L1^B1>:
    269e:	0a 26       	eor	r0, r26
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <.L2^B1>
    26a2:	a1 40       	sbci	r26, 0x01	; 1

000026a4 <.L2^B1>:
    26a4:	a6 95       	lsr	r26
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	81 1d       	adc	r24, r1
    26aa:	81 1d       	adc	r24, r1

000026ac <.L9^B1>:
    26ac:	08 95       	ret

000026ae <__fp_inf>:
    26ae:	97 f9       	bld	r25, 7
    26b0:	9f 67       	ori	r25, 0x7F	; 127
    26b2:	80 e8       	ldi	r24, 0x80	; 128
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	08 95       	ret

000026ba <__fp_nan>:
    26ba:	9f ef       	ldi	r25, 0xFF	; 255
    26bc:	80 ec       	ldi	r24, 0xC0	; 192
    26be:	08 95       	ret

000026c0 <__fp_pscA>:
    26c0:	00 24       	eor	r0, r0
    26c2:	0a 94       	dec	r0
    26c4:	16 16       	cp	r1, r22
    26c6:	17 06       	cpc	r1, r23
    26c8:	18 06       	cpc	r1, r24
    26ca:	09 06       	cpc	r0, r25
    26cc:	08 95       	ret

000026ce <__fp_pscB>:
    26ce:	00 24       	eor	r0, r0
    26d0:	0a 94       	dec	r0
    26d2:	12 16       	cp	r1, r18
    26d4:	13 06       	cpc	r1, r19
    26d6:	14 06       	cpc	r1, r20
    26d8:	05 06       	cpc	r0, r21
    26da:	08 95       	ret

000026dc <__fp_round>:
    26dc:	09 2e       	mov	r0, r25
    26de:	03 94       	inc	r0
    26e0:	00 0c       	add	r0, r0
    26e2:	11 f4       	brne	.+4      	; 0x26e8 <.L1^B1>
    26e4:	88 23       	and	r24, r24
    26e6:	52 f0       	brmi	.+20     	; 0x26fc <.L3^B1>

000026e8 <.L1^B1>:
    26e8:	bb 0f       	add	r27, r27
    26ea:	40 f4       	brcc	.+16     	; 0x26fc <.L3^B1>
    26ec:	bf 2b       	or	r27, r31
    26ee:	11 f4       	brne	.+4      	; 0x26f4 <.L2^B1>
    26f0:	60 ff       	sbrs	r22, 0
    26f2:	04 c0       	rjmp	.+8      	; 0x26fc <.L3^B1>

000026f4 <.L2^B1>:
    26f4:	6f 5f       	subi	r22, 0xFF	; 255
    26f6:	7f 4f       	sbci	r23, 0xFF	; 255
    26f8:	8f 4f       	sbci	r24, 0xFF	; 255
    26fa:	9f 4f       	sbci	r25, 0xFF	; 255

000026fc <.L3^B1>:
    26fc:	08 95       	ret

000026fe <__fp_split3>:
    26fe:	57 fd       	sbrc	r21, 7
    2700:	90 58       	subi	r25, 0x80	; 128
    2702:	44 0f       	add	r20, r20
    2704:	55 1f       	adc	r21, r21
    2706:	59 f0       	breq	.+22     	; 0x271e <.L4^B1>
    2708:	5f 3f       	cpi	r21, 0xFF	; 255
    270a:	71 f0       	breq	.+28     	; 0x2728 <.L5^B1>

0000270c <.L1^B1>:
    270c:	47 95       	ror	r20

0000270e <__fp_splitA>:
    270e:	88 0f       	add	r24, r24
    2710:	97 fb       	bst	r25, 7
    2712:	99 1f       	adc	r25, r25
    2714:	61 f0       	breq	.+24     	; 0x272e <.L6^B1>
    2716:	9f 3f       	cpi	r25, 0xFF	; 255
    2718:	79 f0       	breq	.+30     	; 0x2738 <.L7^B1>

0000271a <.L3^B1>:
    271a:	87 95       	ror	r24
    271c:	08 95       	ret

0000271e <.L4^B1>:
    271e:	12 16       	cp	r1, r18
    2720:	13 06       	cpc	r1, r19
    2722:	14 06       	cpc	r1, r20
    2724:	55 1f       	adc	r21, r21
    2726:	f2 cf       	rjmp	.-28     	; 0x270c <.L1^B1>

00002728 <.L5^B1>:
    2728:	46 95       	lsr	r20
    272a:	f1 df       	rcall	.-30     	; 0x270e <__fp_splitA>
    272c:	08 c0       	rjmp	.+16     	; 0x273e <.L8^B1>

0000272e <.L6^B1>:
    272e:	16 16       	cp	r1, r22
    2730:	17 06       	cpc	r1, r23
    2732:	18 06       	cpc	r1, r24
    2734:	99 1f       	adc	r25, r25
    2736:	f1 cf       	rjmp	.-30     	; 0x271a <.L3^B1>

00002738 <.L7^B1>:
    2738:	86 95       	lsr	r24
    273a:	71 05       	cpc	r23, r1
    273c:	61 05       	cpc	r22, r1

0000273e <.L8^B1>:
    273e:	08 94       	sec
    2740:	08 95       	ret

00002742 <__fp_zero>:
    2742:	e8 94       	clt

00002744 <__fp_szero>:
    2744:	bb 27       	eor	r27, r27
    2746:	66 27       	eor	r22, r22
    2748:	77 27       	eor	r23, r23
    274a:	cb 01       	movw	r24, r22
    274c:	97 f9       	bld	r25, 7
    274e:	08 95       	ret

00002750 <__gesf2>:
    2750:	0e 94 33 13 	call	0x2666	; 0x2666 <__fp_cmp>
    2754:	08 f4       	brcc	.+2      	; 0x2758 <.L1^B1>
    2756:	8f ef       	ldi	r24, 0xFF	; 255

00002758 <.L1^B1>:
    2758:	08 95       	ret

0000275a <__mulsf3>:
    275a:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3x>
    275e:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__fp_round>

00002762 <.L^B1>:
    2762:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__fp_pscA>
    2766:	38 f0       	brcs	.+14     	; 0x2776 <.L1^B1>
    2768:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_pscB>
    276c:	20 f0       	brcs	.+8      	; 0x2776 <.L1^B1>
    276e:	95 23       	and	r25, r21
    2770:	11 f0       	breq	.+4      	; 0x2776 <.L1^B1>
    2772:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__fp_inf>

00002776 <.L1^B1>:
    2776:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__fp_nan>

0000277a <.L2^B1>:
    277a:	11 24       	eor	r1, r1
    277c:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__fp_szero>

00002780 <__mulsf3x>:
    2780:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__fp_split3>
    2784:	70 f3       	brcs	.-36     	; 0x2762 <.L^B1>

00002786 <__mulsf3_pse>:
    2786:	95 9f       	mul	r25, r21
    2788:	c1 f3       	breq	.-16     	; 0x277a <.L2^B1>
    278a:	95 0f       	add	r25, r21
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	55 1f       	adc	r21, r21
    2790:	62 9f       	mul	r22, r18
    2792:	f0 01       	movw	r30, r0
    2794:	72 9f       	mul	r23, r18
    2796:	bb 27       	eor	r27, r27
    2798:	f0 0d       	add	r31, r0
    279a:	b1 1d       	adc	r27, r1
    279c:	63 9f       	mul	r22, r19
    279e:	aa 27       	eor	r26, r26
    27a0:	f0 0d       	add	r31, r0
    27a2:	b1 1d       	adc	r27, r1
    27a4:	aa 1f       	adc	r26, r26
    27a6:	64 9f       	mul	r22, r20
    27a8:	66 27       	eor	r22, r22
    27aa:	b0 0d       	add	r27, r0
    27ac:	a1 1d       	adc	r26, r1
    27ae:	66 1f       	adc	r22, r22
    27b0:	82 9f       	mul	r24, r18
    27b2:	22 27       	eor	r18, r18
    27b4:	b0 0d       	add	r27, r0
    27b6:	a1 1d       	adc	r26, r1
    27b8:	62 1f       	adc	r22, r18
    27ba:	73 9f       	mul	r23, r19
    27bc:	b0 0d       	add	r27, r0
    27be:	a1 1d       	adc	r26, r1
    27c0:	62 1f       	adc	r22, r18
    27c2:	83 9f       	mul	r24, r19
    27c4:	a0 0d       	add	r26, r0
    27c6:	61 1d       	adc	r22, r1
    27c8:	22 1f       	adc	r18, r18
    27ca:	74 9f       	mul	r23, r20
    27cc:	33 27       	eor	r19, r19
    27ce:	a0 0d       	add	r26, r0
    27d0:	61 1d       	adc	r22, r1
    27d2:	23 1f       	adc	r18, r19
    27d4:	84 9f       	mul	r24, r20
    27d6:	60 0d       	add	r22, r0
    27d8:	21 1d       	adc	r18, r1
    27da:	82 2f       	mov	r24, r18
    27dc:	76 2f       	mov	r23, r22
    27de:	6a 2f       	mov	r22, r26
    27e0:	11 24       	eor	r1, r1
    27e2:	9f 57       	subi	r25, 0x7F	; 127
    27e4:	50 40       	sbci	r21, 0x00	; 0
    27e6:	9a f0       	brmi	.+38     	; 0x280e <.L13^B1>
    27e8:	f1 f0       	breq	.+60     	; 0x2826 <.L15^B1>

000027ea <.L10^B1>:
    27ea:	88 23       	and	r24, r24
    27ec:	4a f0       	brmi	.+18     	; 0x2800 <.L11^B1>
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	bb 1f       	adc	r27, r27
    27f4:	66 1f       	adc	r22, r22
    27f6:	77 1f       	adc	r23, r23
    27f8:	88 1f       	adc	r24, r24
    27fa:	91 50       	subi	r25, 0x01	; 1
    27fc:	50 40       	sbci	r21, 0x00	; 0
    27fe:	a9 f7       	brne	.-22     	; 0x27ea <.L10^B1>

00002800 <.L11^B1>:
    2800:	9e 3f       	cpi	r25, 0xFE	; 254
    2802:	51 05       	cpc	r21, r1
    2804:	80 f0       	brcs	.+32     	; 0x2826 <.L15^B1>
    2806:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__fp_inf>

0000280a <.L12^B1>:
    280a:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__fp_szero>

0000280e <.L13^B1>:
    280e:	5f 3f       	cpi	r21, 0xFF	; 255
    2810:	e4 f3       	brlt	.-8      	; 0x280a <.L12^B1>
    2812:	98 3e       	cpi	r25, 0xE8	; 232
    2814:	d4 f3       	brlt	.-12     	; 0x280a <.L12^B1>

00002816 <.L14^B1>:
    2816:	86 95       	lsr	r24
    2818:	77 95       	ror	r23
    281a:	67 95       	ror	r22
    281c:	b7 95       	ror	r27
    281e:	f7 95       	ror	r31
    2820:	e7 95       	ror	r30
    2822:	9f 5f       	subi	r25, 0xFF	; 255
    2824:	c1 f7       	brne	.-16     	; 0x2816 <.L14^B1>

00002826 <.L15^B1>:
    2826:	fe 2b       	or	r31, r30
    2828:	88 0f       	add	r24, r24
    282a:	91 1d       	adc	r25, r1
    282c:	96 95       	lsr	r25
    282e:	87 95       	ror	r24
    2830:	97 f9       	bld	r25, 7
    2832:	08 95       	ret

00002834 <_exit>:
    2834:	f8 94       	cli

00002836 <__stop_program>:
    2836:	ff cf       	rjmp	.-2      	; 0x2836 <__stop_program>
